eval_err_num:1
medium pred: SELECT "Name", "Country", "Age" FROM "singer" ORDER BY "Age" DESC
medium gold: SELECT name ,  country ,  age FROM singer ORDER BY age DESC

eval_err_num:2
medium pred: SELECT AVG("Age"), MIN("Age"), MAX("Age") FROM "singer" WHERE "Country" = 'France'
medium gold: SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'

eval_err_num:3
medium pred: SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France'
medium gold: SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'

eval_err_num:4
medium pred: SELECT s."Name", s."Song_release_year" FROM "singer" s WHERE s."Age" = ( SELECT MIN("Age") FROM "singer" )
medium gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1

eval_err_num:5
medium pred: SELECT "Name", "Song_release_year" FROM "singer" JOIN "singer_in_concert" ON "singer"."Singer_ID" = "singer_in_concert"."Singer_ID" WHERE "Age" = (SELECT MIN("Age") FROM "singer")
medium gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1

eval_err_num:6
easy pred: SELECT DISTINCT "Country" FROM "singer" WHERE "Age" > 20
easy gold: SELECT DISTINCT country FROM singer WHERE age  >  20

eval_err_num:7
easy pred: SELECT DISTINCT "Country" FROM "singer" WHERE "Age" > 20
easy gold: SELECT DISTINCT country FROM singer WHERE age  >  20

eval_err_num:8
medium pred: SELECT Country, COUNT(*) AS Singer_Count FROM singer GROUP BY Country
medium gold: SELECT country ,  count(*) FROM singer GROUP BY country

eval_err_num:9
medium pred: SELECT Country, COUNT(*) AS num_singers FROM singer GROUP BY Country
medium gold: SELECT country ,  count(*) FROM singer GROUP BY country

eval_err_num:10
medium pred: SELECT "Location", "Name" FROM "stadium" WHERE "Capacity" BETWEEN 5000 AND 10000
medium gold: SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000

eval_err_num:11
medium pred: SELECT MAX("Capacity"), AVG("Average") FROM "stadium"
medium gold: select max(capacity), average from stadium

eval_err_num:12
medium pred: SELECT AVG("Capacity"), MAX("Capacity") FROM "stadium"
medium gold: select avg(capacity) ,  max(capacity) from stadium

medium pred: SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)
medium gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1

medium pred: SELECT Name, Capacity FROM stadium WHERE Average = ( SELECT MAX(Average) FROM stadium )
medium gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1

eval_err_num:13
medium pred: SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015')
medium gold: SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015

eval_err_num:14
medium pred: SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015')
medium gold: SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015

eval_err_num:15
medium pred: SELECT s.Name, COUNT(c.concert_ID) AS "Number of Concerts" FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name
medium gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id

eval_err_num:16
medium pred: SELECT stadium.Name, COUNT(concert.concert_ID) AS Num_Concerts FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name
medium gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id

eval_err_num:17
extra pred: SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= '2014' GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1
extra gold: SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT Name, Capacity FROM stadium WHERE Stadium_ID = ( SELECT Stadium_ID FROM concert WHERE Year > '2013' GROUP BY Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1 )
extra gold: select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1

eval_err_num:18
hard pred: SELECT Year, COUNT(*) as num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1
hard gold: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1

eval_err_num:19
hard pred: SELECT Year, COUNT(*) AS Num_Concerts FROM concert GROUP BY Year ORDER BY Num_Concerts DESC LIMIT 1
hard gold: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1

eval_err_num:20
hard pred: SELECT DISTINCT s1.Country FROM singer s1 JOIN singer s2 ON s1.Country = s2.Country WHERE s1.Age > 40 AND s2.Age < 30
hard gold: SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30

hard pred: SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')
hard gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014

hard pred: SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')
hard gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014

eval_err_num:21
medium pred: SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS number_of_singers FROM concert AS c INNER JOIN singer_in_concert AS sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_Name, c.Theme
medium gold: SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id

eval_err_num:22
medium pred: SELECT concert_Name, Theme, COUNT(Singer_ID) as number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert_Name, Theme
medium gold: select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id

eval_err_num:23
medium pred: SELECT s.Name, COUNT(c.concert_ID) AS Num_Concerts FROM singer s INNER JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID INNER JOIN concert c ON sic.concert_ID = c.concert_ID GROUP BY s.Name
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id

eval_err_num:24
medium pred: SELECT singer.Name, COUNT(concert.concert_ID) AS number_of_concerts FROM singer LEFT JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID LEFT JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID GROUP BY singer.Singer_ID
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id

eval_err_num:25
hard pred: SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014'
hard gold: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014

eval_err_num:26
extra pred: SELECT DISTINCT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = '2014' AND EXISTS ( SELECT 1 FROM concert c2 WHERE c2.Year = '2015' AND c.Stadium_ID = c2.Stadium_ID )
extra gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015

eval_err_num:27
extra pred: SELECT s.Name, s.Location FROM stadium s INNER JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = '2014' AND s.Stadium_ID IN ( SELECT s2.Stadium_ID FROM stadium s2 INNER JOIN concert c2 ON s2.Stadium_ID = c2.Stadium_ID WHERE c2.Year = '2015' )
extra gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015

hard pred: SELECT COUNT(concert_ID) FROM concert WHERE Stadium_ID = ( SELECT Stadium_ID FROM stadium WHERE Capacity = ( SELECT MAX(Capacity) FROM stadium ) )
hard gold: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)

medium pred: SELECT MIN(weight) FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1

medium pred: SELECT MIN(weight) FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1

eval_err_num:28
medium pred: SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType
medium gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType

eval_err_num:29
medium pred: SELECT PetType, MAX(weight) AS "Max Weight", PetType AS "Type of Pet" FROM Pets GROUP BY PetType
medium gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType

medium pred: SELECT COUNT(PetID) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20
medium gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20

eval_err_num:30
medium pred: SELECT COUNT(PetID) FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20
medium gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20

eval_err_num:31
easy pred: SELECT COUNT(DISTINCT PetType) AS NumPetTypes FROM Pets
easy gold: SELECT count(DISTINCT pettype) FROM pets

eval_err_num:32
easy pred: SELECT COUNT(DISTINCT PetType) AS num_pet_types FROM Pets
easy gold: SELECT count(DISTINCT pettype) FROM pets

eval_err_num:33
extra pred: SELECT DISTINCT Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType IN ('cat', 'dog')
extra gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'

eval_err_num:34
extra pred: SELECT DISTINCT Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType IN ('cat', 'dog')
extra gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'

extra pred: SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat') INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog') )
extra gold: select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'

extra pred: SELECT DISTINCT Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' AND StuID IN ( SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog' )
extra gold: SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'

extra pred: SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

eval_err_num:35
extra pred: SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN ( SELECT Has_Pet.StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' )
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

hard pred: SELECT StuID FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' )
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'

eval_err_num:36
hard pred: SELECT StuID FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' )
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'

eval_err_num:37
extra pred: SELECT Fname, Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (SELECT Student.StuID FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

extra pred: SELECT Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog' AND StuID NOT IN ( SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' )
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

medium pred: SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
medium gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1

medium pred: SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
medium gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1

eval_err_num:38
medium pred: SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY PetType
medium gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype

eval_err_num:39
medium pred: SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType
medium gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype

eval_err_num:40
medium pred: SELECT PetType, AVG(weight) AS avg_weight FROM Pets GROUP BY PetType
medium gold: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype

eval_err_num:41
medium pred: SELECT PetType, AVG(weight) AS Average_Weight FROM Pets GROUP BY PetType
medium gold: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype

eval_err_num:42
medium pred: SELECT Fname, Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID
medium gold: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid

medium pred: SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE LName = 'Smith'
medium gold: SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'

medium pred: SELECT Pets.PetID FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith'
medium gold: SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'

eval_err_num:43
medium pred: SELECT Has_Pet.StuID, COUNT(*) AS num_of_pets FROM Has_Pet GROUP BY Has_Pet.StuID
medium gold: SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid

eval_err_num:44
medium pred: SELECT Student.StuID, COUNT(Pets.PetID) AS num_of_pets FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY Student.StuID
medium gold: select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid

medium pred: SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1)
medium gold: SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1

medium pred: SELECT Fname, Sex FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1 )
medium gold: SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1

eval_err_num:45
hard pred: SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND p.pet_age = 3
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'

eval_err_num:46
hard pred: SELECT s.LName FROM Student s INNER JOIN Has_Pet hp ON s.StuID = hp.StuID INNER JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND p.pet_age = 3
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'

eval_err_num:47
medium pred: SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumOfCountries FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId
medium gold: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;

eval_err_num:48
medium pred: SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumOfCountries FROM continents c JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent
medium gold: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;

eval_err_num:49
medium pred: SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.Model) AS NumberOfModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName
medium gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;

eval_err_num:50
medium pred: SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS NumModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id
medium gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;

hard pred: SELECT Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;

hard pred: SELECT Model FROM car_names WHERE MakeId = ( SELECT Id FROM cars_data ORDER BY Horsepower ASC LIMIT 1 )
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;

eval_err_num:51
extra pred: SELECT Model FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Weight < (SELECT AVG(Weight) FROM cars_data)
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)

eval_err_num:52
extra pred: SELECT model_list.Model FROM model_list INNER JOIN car_names ON model_list.ModelId = car_names.Model AND car_names.MakeId IN ( SELECT cars_data.Id FROM cars_data WHERE cars_data.Weight < ( SELECT AVG(Weight) FROM cars_data ) )
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)

eval_err_num:53
extra pred: SELECT DISTINCT car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.ModelId = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';

eval_err_num:54
extra pred: SELECT DISTINCT car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.ModelId = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';

extra pred: SELECT car_makers.Maker, cars_data.Year FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);

eval_err_num:55
extra pred: SELECT car_makers.Maker, MIN(cars_data.Year) AS EarliestYear FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Maker ORDER BY EarliestYear LIMIT 1
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);

eval_err_num:56
hard pred: SELECT model_list.Model FROM model_list INNER JOIN car_makers ON car_makers.Id = model_list.Maker INNER JOIN car_names ON car_names.Model = model_list.Model INNER JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE cars_data.Year > 1980
hard gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;

eval_err_num:57
hard pred: SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS MakerCount FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent
hard gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;

eval_err_num:58
hard pred: SELECT c.Continent, COUNT(cm.Id) as CarMakersCount FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent LEFT JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent
hard gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;

eval_err_num:59
extra pred: SELECT countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(DISTINCT car_makers.Id) DESC LIMIT 1
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;

extra pred: SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;

eval_err_num:60
medium pred: SELECT car_makers.FullName, COUNT(model_list.ModelId) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id
medium gold: select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;

eval_err_num:61
medium pred: SELECT cm.Id, cm.FullName, COUNT(ml.ModelId) AS NumModels FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName
medium gold: SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;

medium pred: SELECT Accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'hornet sportabout (sw)' AND Make = 'amc')
medium gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';

medium pred: SELECT Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'AMC' AND model_list.Model = 'Hornet Sportabout (sw)'
medium gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';

medium pred: SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';

medium pred: SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';

hard pred: SELECT COUNT(model_list.ModelId) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa'
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';

eval_err_num:62
hard pred: SELECT COUNT(DISTINCT model_list.ModelId) FROM model_list INNER JOIN car_makers ON model_list.Maker = car_makers.Id INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States'
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';

easy pred: SELECT AVG(Edispl) FROM cars_data WHERE Cylinders = 4
easy gold: SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;

medium pred: SELECT MIN(Weight) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE cylinders = 8 AND Year = 1974
medium gold: select min(weight) from cars_data where cylinders  =  8 and year  =  1974

eval_err_num:63
medium pred: SELECT MIN(Weight) FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model INNER JOIN car_makers ON model_list.Maker = car_makers.Id INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE cylinders = 8 AND Year = 1974
medium gold: select min(weight) from cars_data where cylinders  =  8 and year  =  1974

eval_err_num:64
medium pred: SELECT car_makers.Maker, model_list.Model FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;

medium pred: SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;

medium pred: SELECT CountryId, CountryName FROM countries WHERE CountryId IN ( SELECT Country FROM car_makers GROUP BY Country )
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;

medium pred: SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers)
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;

eval_err_num:65
medium pred: SELECT Year, AVG(Weight) AS Avg_Weight FROM cars_data GROUP BY Year
medium gold: SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;

medium pred: SELECT Year, AVG(Weight), AVG(Year) FROM cars_data GROUP BY Year
medium gold: SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;

eval_err_num:66
extra pred: SELECT c.CountryName FROM countries c INNER JOIN car_makers cm ON c.CountryId = cm.Country INNER JOIN continents co ON c.Continent = co.ContId WHERE co.Continent = 'Europe' GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;

eval_err_num:67
extra pred: SELECT countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent = (SELECT continents.ContId FROM continents WHERE continents.Continent = 'Europe') GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;

extra pred: SELECT MAX(cd.Horsepower), cn.Make FROM cars_data AS cd JOIN car_names AS cn ON cn.MakeId = cd.Id JOIN model_list AS ml ON ml.ModelId = cn.Model JOIN car_makers AS cm ON cm.Id = ml.Maker WHERE cd.Cylinders = 3
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;

extra pred: SELECT car_makers.Maker, MAX(cars_data.Horsepower) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker ORDER BY MAX(cars_data.Horsepower) DESC LIMIT 1
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;

hard pred: SELECT Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE MPG = (SELECT MAX(MPG) FROM cars_data)
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;

eval_err_num:68
hard pred: SELECT Model FROM model_list INNER JOIN car_names ON model_list.ModelId = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY MPG DESC LIMIT 1
hard gold: select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;

eval_err_num:69
easy pred: SELECT AVG(Horsepower) FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model INNER JOIN car_makers ON model_list.Maker = car_makers.Id INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE Year < 1980
easy gold: SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;

medium pred: SELECT AVG(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo')
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';

medium pred: SELECT AVG(Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'Volvo')
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';

eval_err_num:70
medium pred: SELECT cylinders, MAX(accelerate) AS max_accelerate FROM cars_data GROUP BY cylinders
medium gold: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;

medium pred: SELECT MAX(Accelerate) FROM cars_data GROUP BY Cylinders
medium gold: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;

eval_err_num:71
hard pred: SELECT model_list.Model, COUNT(car_names.Make) AS Num_of_Versions FROM model_list INNER JOIN car_makers ON model_list.Maker = car_makers.Id INNER JOIN car_names ON model_list.ModelId = car_names.Model GROUP BY model_list.Model ORDER BY Num_of_Versions DESC LIMIT 1
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;

eval_err_num:72
hard pred: SELECT Model FROM model_list WHERE ModelId IN ( SELECT Maker FROM car_makers GROUP BY Maker HAVING COUNT(DISTINCT Model) = ( SELECT MAX(model_count) FROM ( SELECT COUNT(DISTINCT Model) AS model_count FROM car_makers GROUP BY Maker ) ) )
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;

eval_err_num:73
medium pred: SELECT COUNT(model_list.Model) FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = 'American Motor Company'
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';

medium pred: SELECT COUNT(model_list.ModelId) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'American Motor Company'
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';

eval_err_num:74
medium pred: SELECT car_makers.Id, car_makers.FullName FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(model_list.ModelId) > 3
medium gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;

medium pred: SELECT Id, Maker FROM car_makers WHERE Id IN ( SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) > 3 )
medium gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;

eval_err_num:75
extra pred: SELECT DISTINCT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE (car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500)
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;

eval_err_num:76
extra pred: SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE (car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500)
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;

easy pred: SELECT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000
easy gold: select distinct year from cars_data where weight between 3000 and 4000;

easy pred: SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 INTERSECT SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000
easy gold: select distinct year from cars_data where weight between 3000 and 4000;

medium pred: SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
medium gold: SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;

medium pred: SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
medium gold: SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;

extra pred: SELECT MIN(Cylinders) FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'volvo') AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'volvo'))
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;

extra pred: SELECT MIN(Cylinders) FROM cars_data WHERE Id IN ( SELECT MakeId FROM car_names WHERE Model = 'volvo' ) AND Accelerate = ( SELECT MIN(Accelerate) FROM cars_data WHERE Id IN ( SELECT MakeId FROM car_names WHERE Model = 'volvo' ) )
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;

hard pred: SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Accelerate) FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data))
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );

hard pred: SELECT COUNT(*) FROM cars_data WHERE Accelerate > ( SELECT MAX(Accelerate) FROM cars_data WHERE Horsepower = ( SELECT MAX(Horsepower) FROM cars_data ) )
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );

medium pred: SELECT COUNT(DISTINCT countries.CountryId) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 2
medium gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2

eval_err_num:77
medium pred: SELECT COUNT(DISTINCT countries.CountryId) FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) > 2
medium gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2

extra pred: SELECT Model, MAX(Horsepower) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Cylinders = 4 GROUP BY Model ORDER BY MAX(Horsepower) DESC LIMIT 1
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;

extra pred: SELECT model_list.Model, cars_data.Horsepower FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;

eval_err_num:78
extra pred: SELECT car_names.MakeId, car_names.Make FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3
extra gold: SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;

extra pred: SELECT car_names.MakeId, car_names.Make FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower NOT IN ( SELECT MIN(Horsepower) FROM cars_data )
extra gold: select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;

medium pred: SELECT MAX(MPG) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE cars_data.Cylinders = 8 AND cars_data.Year < 1980
medium gold: select max(mpg) from cars_data where cylinders  =  8 or year  <  1980

eval_err_num:79
medium pred: SELECT MAX(MPG) FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model INNER JOIN car_makers ON model_list.Maker = car_makers.Id INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE (cars_data.Cylinders = 8 OR cars_data.Year < 1980)
medium gold: select max(mpg) from cars_data where cylinders  =  8 or year  <  1980

extra pred: SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.ModelId = car_names.Model AND car_names.Make != 'Ford Motor Company' JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';

extra pred: SELECT Model FROM model_list JOIN car_makers ON car_makers.Id = model_list.Maker JOIN countries ON countries.CountryId = car_makers.Country JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE Weight < 3500 AND Maker != (SELECT Id FROM car_makers WHERE Maker = 'Ford Motor Company')
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';

hard pred: SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers)
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;

hard pred: SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers)
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;

extra pred: SELECT Id, Maker FROM car_makers WHERE Id IN ( SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) >= 2 ) AND Country IN ( SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 3 )
extra gold: select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;

eval_err_num:80
extra pred: SELECT car_makers.Id, car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.ModelId = car_names.Model GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.ModelId) >= 2 AND COUNT(DISTINCT car_names.MakeId) > 3
extra gold: SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;

eval_err_num:81
extra pred: SELECT DISTINCT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.ModelId = car_names.Model WHERE (SELECT COUNT(*) FROM car_makers WHERE car_makers.Country = countries.CountryId) > 3 OR car_names.Make = 'fiat'
extra gold: SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';

extra pred: SELECT CountryId, CountryName FROM countries WHERE CountryId IN ( SELECT Country FROM car_makers WHERE Maker = 'Fiat' GROUP BY Country UNION SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 3 )
extra gold: select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';

medium pred: SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABZ'
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"

hard pred: SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley')
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"

hard pred: SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABR' AND DestAirport = 'ASY'
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"

medium pred: SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways')
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"

eval_err_num:82
medium pred: SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'Jetblue Airways'
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"

medium pred: SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'ASY'
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"

medium pred: SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport = 'ASY'
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"

medium pred: SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'AHD'
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"

medium pred: SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'AHD'
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"

eval_err_num:83
extra pred: SELECT airports.City, COUNT(flights.DestAirport) AS num_arrivals FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY num_arrivals DESC LIMIT 1
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1

eval_err_num:84
extra pred: SELECT DestAirport, COUNT(*) AS Frequency FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY DestAirport ORDER BY Frequency DESC LIMIT 1
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1

eval_err_num:85
extra pred: SELECT SourceAirport, COUNT(*) AS DepartingFlights FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY SourceAirport ORDER BY DepartingFlights DESC LIMIT 1
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1

eval_err_num:86
extra pred: SELECT SourceAirport, COUNT(*) as Frequency FROM flights GROUP BY SourceAirport ORDER BY Frequency DESC LIMIT 1
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1

eval_err_num:87
extra pred: SELECT SourceAirport, COUNT(*) as num_flights FROM flights GROUP BY SourceAirport ORDER BY num_flights DESC LIMIT 1
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1

eval_err_num:88
extra pred: SELECT SourceAirport, COUNT(*) AS num_flights FROM flights GROUP BY SourceAirport ORDER BY num_flights DESC LIMIT 1
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights) ORDER BY AirportCode ASC LIMIT 1
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1

eval_err_num:89
extra pred: SELECT SourceAirport, COUNT(*) as num_flights FROM flights GROUP BY SourceAirport ORDER BY num_flights ASC LIMIT 1
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1

eval_err_num:90
extra pred: SELECT Airline, COUNT(*) AS NumFlights FROM flights GROUP BY Airline ORDER BY NumFlights DESC LIMIT 1
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1

eval_err_num:91
extra pred: SELECT Airline, COUNT(*) AS num_flights FROM flights GROUP BY Airline ORDER BY num_flights DESC LIMIT 1
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT Abbreviation, Country FROM airlines WHERE uid = ( SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1 )
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1

extra pred: SELECT Abbreviation, Country FROM airlines WHERE uid = ( SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1 )
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1

eval_err_num:92
medium pred: SELECT DISTINCT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD'
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"

medium pred: SELECT Airline, Abbreviation, Country FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD'
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"

eval_err_num:93
medium pred: SELECT DISTINCT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD'
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"

medium pred: SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD'
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"

extra pred: SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports AS source ON flights.SourceAirport = source.AirportCode JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE source.AirportCode = 'APG' AND dest.AirportCode = 'CVO' INTERSECT SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports AS source ON flights.SourceAirport = source.AirportCode JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE source.AirportCode = 'CVO' AND dest.AirportCode = 'APG'
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"

extra pred: SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'APG' AND flights.DestAirport = 'CVO' INTERSECT SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'CVO' AND flights.DestAirport = 'APG'
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"

extra pred: SELECT Airline FROM airlines WHERE uid IN ( SELECT Airline FROM flights WHERE SourceAirport = 'CVO' AND Airline NOT IN ( SELECT Airline FROM flights WHERE SourceAirport = 'APG' ) )
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"

extra pred: SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'CVO' AND airlines.Airline NOT IN ( SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = 'APG' )
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"

eval_err_num:94
medium pred: SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(*) >= 10
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10

eval_err_num:95
medium pred: SELECT Airline, COUNT(*) as num_flights FROM flights GROUP BY Airline HAVING num_flights >= 10
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10

medium pred: SELECT Airline FROM airlines WHERE uid IN ( SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200 )
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200

medium pred: SELECT Airline FROM airlines WHERE uid IN ( SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200 )
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200

medium pred: SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines')
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"

eval_err_num:96
medium pred: SELECT FlightNo FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines'
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"

eval_err_num:97
easy pred: SELECT FlightNo FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = "APG"
easy gold: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"

eval_err_num:98
medium pred: SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen'
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"

medium pred: SELECT FlightNo FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"

eval_err_num:99
hard pred: SELECT COUNT(*) FROM flights WHERE DestAirport IN ('ABZ', 'ABI')
hard gold: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"

eval_err_num:100
hard pred: SELECT COUNT(*) FROM flights WHERE DestAirport IN ('ABZ', 'ABI')
hard gold: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"

eval_err_num:101
hard pred: SELECT AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.Airline IS NULL
hard gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)

hard pred: SELECT AirportCode, AirportName, City, Country, CountryAbbrev FROM airports WHERE AirportCode NOT IN (SELECT DISTINCT SourceAirport FROM flights UNION SELECT DISTINCT DestAirport FROM flights)
hard gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)

eval_err_num:102
easy pred: SELECT "Name" FROM "employee" ORDER BY "Age" ASC
easy gold: SELECT name FROM employee ORDER BY age

eval_err_num:103
medium pred: SELECT City, COUNT(Employee_ID) AS "Number of Employees" FROM employee GROUP BY City
medium gold: SELECT count(*) ,  city FROM employee GROUP BY city

eval_err_num:104
medium pred: SELECT City, COUNT(*) AS Employee_Count FROM employee GROUP BY City
medium gold: SELECT count(*) ,  city FROM employee GROUP BY city

medium pred: SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1
medium gold: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1

eval_err_num:105
medium pred: SELECT Location, COUNT(*) AS Num_Shops FROM shop GROUP BY Location
medium gold: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION

eval_err_num:106
medium pred: SELECT Location, COUNT(*) AS num_shops FROM shop GROUP BY Location
medium gold: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION

medium pred: SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop)
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1

medium pred: SELECT Manager_name, District FROM shop WHERE Number_products = ( SELECT MAX(Number_products) FROM shop )
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1

eval_err_num:107
medium pred: SELECT MIN("Number_products"), MAX("Number_products") FROM "shop"
medium gold: SELECT min(Number_products) ,  max(Number_products) FROM shop

eval_err_num:108
medium pred: SELECT MIN("Number_products"), MAX("Number_products") FROM "shop"
medium gold: SELECT min(Number_products) ,  max(Number_products) FROM shop

eval_err_num:109
hard pred: SELECT "Name" FROM "shop" WHERE "Number_products" > (SELECT AVG("Number_products") FROM "shop")
hard gold: SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)

eval_err_num:110
extra pred: SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1

eval_err_num:111
extra pred: SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1

eval_err_num:112
hard pred: SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation)
hard gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1

eval_err_num:113
hard pred: SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation)
hard gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1

eval_err_num:114
extra pred: SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1
extra gold: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:115
extra pred: SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1
extra gold: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:116
medium pred: SELECT shop.Name, COUNT(hiring.Employee_ID) AS "Number of Employees Hired" FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name
medium gold: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name

eval_err_num:117
medium pred: SELECT shop.Name, COUNT(hiring.Employee_ID) as Num_of_Employees FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID
medium gold: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name

eval_err_num:118
easy pred: SELECT SUM(Bonus) AS "Total Bonus" FROM evaluation
easy gold: SELECT sum(bonus) FROM evaluation

eval_err_num:119
easy pred: SELECT SUM(Bonus) AS Total_Bonus FROM evaluation
easy gold: SELECT sum(bonus) FROM evaluation

eval_err_num:120
hard pred: SELECT DISTINCT s1.District FROM shop s1 JOIN shop s2 ON s1.District = s2.District WHERE s1.Number_products < 3000 AND s2.Number_products > 10000
hard gold: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000

eval_err_num:121
hard pred: SELECT DISTINCT s1.District FROM shop s1, shop s2 WHERE s1.Number_products < 3000 AND s2.Number_products > 10000 AND s1.District = s2.District
hard gold: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000

eval_err_num:122
easy pred: SELECT COUNT(DISTINCT Location) AS "Number of Store Locations" FROM shop
easy gold: SELECT count(DISTINCT LOCATION) FROM shop

eval_err_num:123
easy pred: SELECT COUNT(DISTINCT Location) AS num_locations FROM shop
easy gold: SELECT count(DISTINCT LOCATION) FROM shop

eval_err_num:124
medium pred: SELECT Documents.Document_Name, Templates.Template_ID FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Description LIKE '%w%'
medium gold: SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"

eval_err_num:125
easy pred: SELECT COUNT(DISTINCT Template_ID) AS NumberOfTemplatesUsed FROM Documents
easy gold: SELECT count(DISTINCT template_id) FROM Documents

medium pred: SELECT COUNT(*) FROM Documents WHERE Template_ID IN ( SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT' )
medium gold: SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'

eval_err_num:126
medium pred: SELECT COUNT(*) FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT'
medium gold: SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'

eval_err_num:127
medium pred: SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Document_Count FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID
medium gold: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id

eval_err_num:128
medium pred: SELECT Template_ID, COUNT(*) AS Usage_Count FROM Documents GROUP BY Template_ID
medium gold: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id

eval_err_num:129
extra pred: SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates INNER JOIN ( SELECT Template_ID FROM Documents GROUP BY Template_ID ORDER BY COUNT(*) DESC LIMIT 1 ) AS most_used ON Templates.Template_ID = most_used.Template_ID
extra gold: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:130
extra pred: SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates INNER JOIN ( SELECT Template_ID, COUNT(*) AS count FROM Documents GROUP BY Template_ID ORDER BY count DESC LIMIT 1 ) AS doc_counts ON Templates.Template_ID = doc_counts.Template_ID
extra gold: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:131
easy pred: SELECT t.Template_ID FROM Templates t INNER JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID HAVING COUNT(DISTINCT d.Document_ID) > 1
easy gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1

easy pred: SELECT Template_ID FROM Templates WHERE Template_ID IN ( SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1 )
easy gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1

eval_err_num:132
hard pred: SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL
hard gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents

hard pred: SELECT Template_ID FROM Templates WHERE Template_ID NOT IN ( SELECT Template_ID FROM Documents )
hard gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents

easy pred: SELECT Template_Type_Code FROM Ref_Template_Types
easy gold: SELECT DISTINCT template_type_code FROM Templates

eval_err_num:133
medium pred: SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')
medium gold: SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"

eval_err_num:134
medium pred: SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP','PPT')
medium gold: SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"

eval_err_num:135
medium pred: SELECT t.Template_Type_Code, COUNT(*) AS Number_of_Templates FROM Templates t JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code GROUP BY t.Template_Type_Code
medium gold: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code

eval_err_num:136
medium pred: SELECT Template_Type_Code, COUNT(*) AS Num_Templates FROM Templates GROUP BY Template_Type_Code
medium gold: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code

eval_err_num:137
hard pred: SELECT Template_Type_Code, COUNT(*) AS Template_Count FROM Templates GROUP BY Template_Type_Code ORDER BY Template_Count DESC LIMIT 1
hard gold: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1

easy pred: SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN ( SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) >= 3 )
easy gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3

easy pred: SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3)
easy gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3

medium pred: SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY MIN(Version_Number) ASC LIMIT 1
medium gold: SELECT min(Version_Number) ,  template_type_code FROM Templates

eval_err_num:138
medium pred: SELECT Template_Type_Code, MIN(Version_Number) AS Lowest_Version_Number FROM Templates GROUP BY Template_Type_Code
medium gold: SELECT min(Version_Number) ,  template_type_code FROM Templates

eval_err_num:139
medium pred: SELECT Templates.Template_Type_Code FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base'
medium gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"

eval_err_num:140
medium pred: SELECT Document_Name FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK'
medium gold: SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"

eval_err_num:141
medium pred: SELECT Document_Name FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK'
medium gold: SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"

eval_err_num:142
medium pred: SELECT t.Template_Type_Code, COUNT(d.Document_ID) AS Num_Documents FROM Ref_Template_Types t LEFT JOIN Templates temp ON t.Template_Type_Code = temp.Template_Type_Code LEFT JOIN Documents d ON temp.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code
medium gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code

eval_err_num:143
medium pred: SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID) AS Number_of_Documents FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code
medium gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code

extra pred: SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1

hard pred: SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN ( SELECT Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID )
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id

eval_err_num:144
hard pred: SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID)
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id

eval_err_num:145
medium pred: SELECT DISTINCT RTT.Template_Type_Description FROM Ref_Template_Types RTT INNER JOIN Templates T ON RTT.Template_Type_Code = T.Template_Type_Code INNER JOIN Documents D ON T.Template_ID = D.Template_ID
medium gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID

eval_err_num:146
medium pred: SELECT DISTINCT T.Template_Details FROM Templates T INNER JOIN Documents D ON T.Template_ID = D.Template_ID
medium gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID

medium pred: SELECT Template_ID FROM Templates WHERE Template_Type_Code = ( SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation' )
medium gold: SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"

medium pred: SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ( SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation' )
medium gold: SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"

eval_err_num:147
easy pred: SELECT COUNT(*) AS total_paragraphs FROM Paragraphs
easy gold: SELECT count(*) FROM Paragraphs

eval_err_num:148
easy pred: SELECT COUNT(*) AS paragraph_count FROM Paragraphs
easy gold: SELECT count(*) FROM Paragraphs

eval_err_num:149
medium pred: SELECT COUNT(*) AS 'Number of Paragraphs' FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show'
medium gold: SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'

eval_err_num:150
medium pred: SELECT COUNT(*) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show'
medium gold: SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'

medium pred: SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'
medium gold: select other_details from paragraphs where paragraph_text like 'korea'

medium pred: SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea %'
medium gold: select other_details from paragraphs where paragraph_text like 'korea'

eval_err_num:151
medium pred: SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY'
medium gold: SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'

medium pred: SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = ( SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY' )
medium gold: SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'

eval_err_num:152
medium pred: SELECT Paragraph_Text FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews'
medium gold: SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"

eval_err_num:153
medium pred: SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Num_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID
medium gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id

eval_err_num:154
medium pred: SELECT Document_ID, COUNT(*) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID ASC
medium gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id

eval_err_num:155
medium pred: SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Num_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name
medium gold: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id

eval_err_num:156
medium pred: SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name
medium gold: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id

eval_err_num:157
extra pred: SELECT d.Document_ID, d.Document_Name FROM Documents AS d JOIN ( SELECT Document_ID, COUNT(*) AS num_paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY num_paragraphs DESC LIMIT 1 ) AS p ON d.Document_ID = p.Document_ID
extra gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:158
extra pred: SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN ( SELECT Document_ID, COUNT(*) AS num_paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY num_paragraphs DESC LIMIT 1 ) p ON d.Document_ID = p.Document_ID
extra gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1

easy pred: SELECT Document_ID FROM Documents WHERE Document_ID IN ( SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2 )
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2

eval_err_num:159
easy pred: SELECT Document_ID FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Paragraphs GROUP BY Template_ID HAVING COUNT(*) BETWEEN 1 AND 2)
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2

eval_err_num:160
hard pred: SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text IN ('Brazil', 'Ireland') GROUP BY Document_ID HAVING COUNT(DISTINCT Paragraph_Text) = 2
hard gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'

eval_err_num:161
hard pred: SELECT DISTINCT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text LIKE '%Brazil%' AND d.Document_ID IN ( SELECT d2.Document_ID FROM Documents d2 JOIN Paragraphs p2 ON d2.Document_ID = p2.Document_ID WHERE p2.Paragraph_Text LIKE '%Ireland%' )
hard gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'

eval_err_num:162
easy pred: SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'
easy gold: select name from teacher where hometown != "little lever urban district"

eval_err_num:163
medium pred: SELECT Name FROM teacher WHERE Age IN ('32','33')
medium gold: SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33

eval_err_num:164
medium pred: SELECT Name FROM teacher WHERE Age IN ('32', '33')
medium gold: SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33

medium pred: SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
medium gold: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1

eval_err_num:165
medium pred: SELECT Hometown, COUNT(*) AS Num_Teachers FROM teacher GROUP BY Hometown
medium gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown

eval_err_num:166
medium pred: SELECT Hometown, COUNT(*) AS Number_of_Teachers FROM teacher GROUP BY Hometown
medium gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown

eval_err_num:167
hard pred: SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown ORDER BY Count DESC LIMIT 1
hard gold: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:168
hard pred: SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown ORDER BY Count DESC LIMIT 1
hard gold: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:169
easy pred: SELECT DISTINCT t1.Hometown FROM teacher t1 INNER JOIN teacher t2 ON t1.Hometown = t2.Hometown AND t1.Teacher_ID <> t2.Teacher_ID
easy gold: SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2

eval_err_num:170
medium pred: SELECT teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID
medium gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID

eval_err_num:171
hard pred: SELECT teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC
hard gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name

eval_err_num:172
hard pred: SELECT teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC
hard gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name

eval_err_num:173
hard pred: SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'Math'
hard gold: SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"

eval_err_num:174
medium pred: SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS num_courses FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name
medium gold: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name

eval_err_num:175
medium pred: SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS Num_of_Courses FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name
medium gold: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name

eval_err_num:176
medium pred: SELECT t.Name FROM teacher t INNER JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID HAVING COUNT(DISTINCT ca.Course_ID) >= 2
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2

eval_err_num:177
medium pred: SELECT t.Name FROM teacher t INNER JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID HAVING COUNT(DISTINCT ca.Course_ID) >= 2
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2

eval_err_num:178
hard pred: SELECT DISTINCT t.Name FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Course_ID IS NULL
hard gold: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)

eval_err_num:179
medium pred: SELECT "Name" FROM "visitor" WHERE "Level_of_membership" > 4 ORDER BY "Level_of_membership" DESC
medium gold: SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC

medium pred: SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = ( SELECT MAX(Num_of_Staff) FROM museum )
medium gold: SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1

eval_err_num:180
medium pred: SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor INNER JOIN visit ON visitor.ID = visit.visitor_ID WHERE visit.Num_of_Ticket > 1 GROUP BY visitor.ID, visitor.Name, visitor.Age
medium gold: SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1

extra pred: SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(visit.Total_spent) DESC LIMIT 1
extra gold: SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1

eval_err_num:181
extra pred: SELECT m.Museum_ID, m.Name FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID, m.Name ORDER BY SUM(v.Num_of_Ticket) DESC LIMIT 1
extra gold: SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1

eval_err_num:182
hard pred: SELECT v.Name, v.Age FROM visitor v JOIN visit vt ON v.ID = vt.visitor_ID WHERE vt.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)
hard gold: SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1

eval_err_num:183
medium pred: SELECT SUM(Total_spent) FROM visit INNER JOIN visitor ON visit.visitor_ID = visitor.ID WHERE Level_of_membership = 1
medium gold: SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1

eval_err_num:184
extra pred: SELECT v.Name FROM visitor v INNER JOIN visit vi ON v.ID = vi.visitor_ID INNER JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < '2009' AND vi.visitor_ID IN (SELECT visitor_ID FROM visit INNER JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > '2011')
extra gold: SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011

extra pred: SELECT COUNT(*) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE Open_Year > '2010')
extra gold: SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)

eval_err_num:185
medium pred: SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches
medium gold: SELECT avg(loser_age) ,  avg(winner_age) FROM matches

eval_err_num:186
medium pred: SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches
medium gold: SELECT avg(loser_age) ,  avg(winner_age) FROM matches

eval_err_num:187
easy pred: SELECT AVG(winner_rank) AS avg_winner_rank FROM matches
easy gold: SELECT avg(winner_rank) FROM matches

easy pred: SELECT MAX(loser_rank) FROM matches
easy gold: SELECT min(loser_rank) FROM matches

eval_err_num:188
easy pred: SELECT MAX(loser_rank) AS best_rank FROM matches WHERE loser_rank IS NOT NULL
easy gold: SELECT min(loser_rank) FROM matches

eval_err_num:189
easy pred: SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players
easy gold: SELECT count(DISTINCT country_code) FROM players

eval_err_num:190
easy pred: SELECT COUNT(DISTINCT loser_name) AS distinct_losers FROM matches
easy gold: SELECT count(DISTINCT loser_name) FROM matches

eval_err_num:191
easy pred: SELECT COUNT(DISTINCT loser_name) AS num_of_loser_names FROM matches
easy gold: SELECT count(DISTINCT loser_name) FROM matches

hard pred: SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_name IN (SELECT winner_name FROM matches WHERE year = 2016)
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016

eval_err_num:192
hard pred: SELECT DISTINCT p.first_name, p.last_name FROM players p INNER JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013 INNER JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016

extra pred: SELECT players.country_code, players.first_name FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id JOIN matches AS m2 ON m1.winner_id = m2.winner_id WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open'
extra gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'

eval_err_num:193
extra pred: SELECT players.first_name, players.country_code FROM players INNER JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' AND matches.year IN (SELECT year FROM matches WHERE tourney_name = 'Australian Open' AND winner_id = matches.winner_id)
extra gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'

medium pred: SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1

medium pred: SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1

eval_err_num:194
medium pred: SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date
medium gold: SELECT first_name ,  last_name FROM players ORDER BY birth_date

eval_err_num:195
medium pred: SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC
medium gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date

hard pred: SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = (SELECT MAX(tours) FROM rankings)
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1

hard pred: SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = ( SELECT MAX(tours) FROM rankings )
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1

eval_err_num:196
hard pred: SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1
hard gold: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1

eval_err_num:197
hard pred: SELECT winner_name, winner_rank_points FROM matches WHERE winner_id IN ( SELECT winner_id FROM matches GROUP BY winner_id HAVING COUNT(*) = ( SELECT MAX(wins) FROM ( SELECT winner_id, COUNT(*) AS wins FROM matches GROUP BY winner_id ) AS win_counts ) )
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1

eval_err_num:198
hard pred: SELECT players.first_name, players.last_name, MAX(winner_count.wins) AS total_wins, rankings.ranking_points FROM players JOIN ( SELECT winner_id, COUNT(winner_id) AS wins FROM matches GROUP BY winner_id ) AS winner_count ON players.player_id = winner_count.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE winner_count.wins = ( SELECT MAX(wins) FROM ( SELECT winner_id, COUNT(winner_id) AS wins FROM matches GROUP BY winner_id ) AS winner_count ) GROUP BY players.first_name, players.last_name, rankings.ranking_points
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1

eval_err_num:199
hard pred: SELECT winner_name FROM matches INNER JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
hard gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1

medium pred: SELECT loser_name, winner_name FROM matches JOIN players ON matches.loser_id = players.player_id JOIN players ON matches.winner_id = players.player_id WHERE minutes = (SELECT MAX(minutes) FROM matches)
medium gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1

medium pred: SELECT winner_name, loser_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE minutes = (SELECT MAX(minutes) FROM matches)
medium gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1

eval_err_num:200
medium pred: SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name
medium gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

eval_err_num:201
medium pred: SELECT first_name, AVG(ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name
medium gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

eval_err_num:202
medium pred: SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
medium gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

eval_err_num:203
medium pred: SELECT first_name, SUM(ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name
medium gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

eval_err_num:204
medium pred: SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code
medium gold: SELECT count(*) ,  country_code FROM players GROUP BY country_code

eval_err_num:205
medium pred: SELECT country_code, COUNT(player_id) AS num_players FROM players GROUP BY country_code
medium gold: SELECT count(*) ,  country_code FROM players GROUP BY country_code

eval_err_num:206
hard pred: SELECT country_code, COUNT(*) as total_players FROM players GROUP BY country_code ORDER BY total_players DESC LIMIT 1
hard gold: SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1

eval_err_num:207
medium pred: SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date
medium gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date

eval_err_num:208
medium pred: SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date
medium gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date

eval_err_num:209
medium pred: SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year
medium gold: SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR

eval_err_num:210
medium pred: SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year
medium gold: SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR

eval_err_num:211
medium pred: SELECT winner_name, winner_rank FROM matches INNER JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age ASC LIMIT 3
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3

medium pred: SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_age IN ( SELECT DISTINCT winner_age FROM matches ORDER BY winner_age LIMIT 3 ) ORDER BY winner_age
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3

medium pred: SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'

medium pred: SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships'
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'

eval_err_num:212
hard pred: SELECT players.first_name, players.country_code, players.birth_date FROM players INNER JOIN matches ON players.player_id = matches.winner_id WHERE matches.winner_rank_points = ( SELECT MAX(winner_rank_points) FROM matches )
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1

hard pred: SELECT first_name, country_code, birth_date FROM players WHERE player_id = ( SELECT winner_id FROM matches WHERE winner_rank_points = ( SELECT MAX(winner_rank_points) FROM matches ) )
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1

eval_err_num:213
medium pred: SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand
medium gold: SELECT count(*) ,  hand FROM players GROUP BY hand

eval_err_num:214
medium pred: SELECT hand, COUNT(*) as num_players FROM players GROUP BY hand
medium gold: SELECT count(*) ,  hand FROM players GROUP BY hand

eval_err_num:215
medium pred: SELECT "name", "tonnage" FROM "ship" ORDER BY "name" DESC
medium gold: SELECT name ,  tonnage FROM ship ORDER BY name DESC

medium pred: SELECT name, date, result FROM battle
medium gold: SELECT name ,  date FROM battle

medium pred: SELECT * FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')
medium gold: SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'

eval_err_num:216
medium pred: SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'
medium gold: SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'

eval_err_num:217
medium pred: SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig'
medium gold: SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'

hard pred: SELECT id, name FROM battle WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING SUM(killed) > 10)
hard gold: SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10

eval_err_num:218
extra pred: SELECT d.caused_by_ship_id, s.name FROM death d JOIN ship s ON d.caused_by_ship_id = s.id GROUP BY d.caused_by_ship_id, s.name ORDER BY SUM(d.injured) DESC LIMIT 1
extra gold: SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1

eval_err_num:219
extra pred: SELECT b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.name IN ('Lettice', 'HMS Atalanta') GROUP BY b.name, b.date HAVING COUNT(DISTINCT s.name) = 2
extra gold: SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'

eval_err_num:220
extra pred: SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.location != 'English Channel' OR s.location IS NULL
extra gold: SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'

easy pred: SELECT course_description FROM Courses WHERE course_name LIKE '%math%'
easy gold: SELECT course_description FROM Courses WHERE course_name  =  'math'

eval_err_num:221
easy pred: SELECT zip_postcode FROM Addresses WHERE city='Port Chelsea'
easy gold: SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'

eval_err_num:222
extra pred: SELECT department_name, department_id FROM Departments WHERE department_id IN ( SELECT department_id FROM Degree_Programs GROUP BY department_id HAVING COUNT(*) = ( SELECT MAX(count) FROM ( SELECT COUNT(*) as count FROM Degree_Programs GROUP BY department_id ) department_counts ) )
extra gold: SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT department_id, department_name FROM Departments WHERE department_id = ( SELECT department_id FROM Degree_Programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1 )
extra gold: select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1

eval_err_num:223
easy pred: SELECT COUNT(DISTINCT department_id) AS num_departments FROM Degree_Programs
easy gold: SELECT count(DISTINCT department_id) FROM Degree_Programs

easy pred: SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs
easy gold: SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs

medium pred: SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering')
medium gold: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'

medium pred: SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')
medium gold: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'

medium pred: SELECT Courses.course_id, Courses.course_name FROM Courses WHERE Courses.course_id IN ( SELECT Sections.course_id FROM Sections GROUP BY Sections.course_id HAVING COUNT(*) <= 2 )
medium gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2

medium pred: SELECT course_id, course_name FROM Courses WHERE course_id IN ( SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) < 2 )
medium gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2

eval_err_num:224
extra pred: SELECT s.semester_name, s.semester_id FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id ORDER BY COUNT(se.student_id) DESC LIMIT 1
extra gold: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:225
extra pred: SELECT se.semester_id, s.semester_name FROM Student_Enrolment se JOIN Semesters s ON se.semester_id = s.semester_id GROUP BY se.semester_id, s.semester_name ORDER BY COUNT(se.student_id) DESC LIMIT 1
extra gold: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:226
medium pred: SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s INNER JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE se.semester_id = [semester_id] GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2

eval_err_num:227
medium pred: SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s INNER JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE se.semester_id = (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2) GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT se.degree_program_id) = 2
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2

hard pred: SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name LIKE '%Bachelor%'
hard gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'

eval_err_num:228
hard pred: SELECT s.first_name, s.middle_name, s.last_name FROM Students s INNER JOIN Student_Enrolment se ON s.student_id = se.student_id INNER JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelor%'
hard gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'

eval_err_num:229
extra pred: SELECT d.degree_summary_name AS program_name, COUNT(se.student_id) AS num_students_enrolled FROM Degree_Programs d INNER JOIN Student_Enrolment se ON d.degree_program_id = se.degree_program_id GROUP BY d.degree_summary_name ORDER BY num_students_enrolled DESC LIMIT 1
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1

eval_err_num:230
extra pred: SELECT Degree_Programs.degree_summary_name, COUNT(*) as num_students FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY num_students DESC LIMIT 1
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id = ( SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1 )
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1)
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:231
extra pred: SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(*) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:232
extra pred: SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.degree_program_id) AS enrollment_count FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(se.degree_program_id) = ( SELECT MAX(enrollment_count) FROM ( SELECT COUNT(degree_program_id) AS enrollment_count FROM Student_Enrolment GROUP BY student_id ) AS enrollment_counts )
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:233
hard pred: SELECT semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL
hard gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )

easy pred: SELECT DISTINCT Courses.course_name FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id
easy gold: SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id

eval_err_num:234
easy pred: SELECT DISTINCT Courses.course_name FROM Courses INNER JOIN Sections ON Courses.course_id = Sections.course_id INNER JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id
easy gold: SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id

eval_err_num:235
extra pred: SELECT Courses.course_name FROM Courses INNER JOIN Sections ON Courses.course_id = Sections.course_id INNER JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1

eval_err_num:236
extra pred: SELECT Courses.course_name FROM Courses INNER JOIN Sections ON Courses.course_id = Sections.course_id INNER JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_id ORDER BY COUNT(Student_Enrolment_Courses.student_course_id) DESC LIMIT 1
extra gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id

eval_err_num:237
extra pred: SELECT last_name FROM Students INNER JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment)
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id

eval_err_num:238
medium pred: SELECT Transcripts.transcript_id, Transcripts.transcript_date FROM Transcripts INNER JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Transcripts.transcript_id HAVING COUNT(DISTINCT Transcript_Contents.student_course_id) >= 2
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2

eval_err_num:239
medium pred: SELECT Transcripts.transcript_id, Transcripts.transcript_date FROM Transcripts INNER JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Transcripts.transcript_id HAVING COUNT(*) >= 2
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2

eval_err_num:240
medium pred: SELECT first_name, middle_name, last_name FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id INNER JOIN Transcript_Contents ON Student_Enrolment.student_course_id = Transcript_Contents.student_course_id INNER JOIN Transcripts ON Transcript_Contents.transcript_id = Transcripts.transcript_id ORDER BY Transcripts.transcript_date ASC LIMIT 1
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1

medium pred: SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students)
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1

eval_err_num:241
easy pred: SELECT first_name FROM Students WHERE current_address_id <> permanent_address_id
easy gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id

eval_err_num:242
easy pred: SELECT Students.first_name FROM Students INNER JOIN Addresses AS current ON Students.current_address_id = current.address_id INNER JOIN Addresses AS permanent ON Students.permanent_address_id = permanent.address_id WHERE current.line_1 != permanent.line_1
easy gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id

eval_err_num:243
extra pred: SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM Addresses a INNER JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id ORDER BY COUNT(s.student_id) DESC LIMIT 1
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2 FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Addresses.address_id ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:244
medium pred: SELECT MIN(transcript_date) AS earliest_release_date, other_details FROM Transcripts GROUP BY other_details
medium gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1

medium pred: SELECT MAX(transcript_date) FROM Transcripts
medium gold: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1

medium pred: SELECT MAX(transcript_date) FROM Transcripts
medium gold: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1

eval_err_num:245
hard pred: SELECT student_course_id, COUNT(transcript_id) AS num_transcripts FROM Transcript_Contents GROUP BY student_course_id ORDER BY num_transcripts DESC LIMIT 1
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:246
hard pred: SELECT sec.course_id, COUNT(*) AS num_transcripts FROM Student_Enrolment_Courses sec JOIN Transcript_Contents tc ON sec.student_course_id = tc.student_course_id GROUP BY sec.course_id HAVING COUNT(*) = ( SELECT MAX(num_transcripts) FROM ( SELECT sec.course_id, COUNT(*) AS num_transcripts FROM Student_Enrolment_Courses sec JOIN Transcript_Contents tc ON sec.student_course_id = tc.student_course_id GROUP BY sec.course_id ) t )
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN ( SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1 )
extra gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1

extra pred: SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id = ( SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1 )
extra gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1

eval_err_num:247
extra pred: SELECT Semesters.semester_name FROM Semesters INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Master' AND Semesters.semester_id IN ( SELECT Semesters.semester_id FROM Semesters INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelor' )
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'

eval_err_num:248
extra pred: SELECT se.semester_id FROM Student_Enrolment se INNER JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY se.semester_id HAVING COUNT(DISTINCT dp.degree_summary_name) = 2
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'

eval_err_num:249
easy pred: SELECT COUNT(DISTINCT current_address_id) AS num_of_addresses FROM Students
easy gold: SELECT count(DISTINCT current_address_id) FROM Students

eval_err_num:250
easy pred: SELECT DISTINCT Addresses.* FROM Addresses INNER JOIN Students ON Addresses.address_id = Students.current_address_id OR Addresses.address_id = Students.permanent_address_id
easy gold: SELECT count(DISTINCT current_address_id) FROM Students

easy pred: SELECT * FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC

easy pred: SELECT * FROM Students ORDER BY last_name DESC
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC

easy pred: SELECT * FROM Sections WHERE section_name = 'h'
easy gold: SELECT section_description FROM Sections WHERE section_name  =  'h'

eval_err_num:251
hard pred: SELECT first_name FROM Students INNER JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'
hard gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'

eval_err_num:252
hard pred: SELECT first_name FROM Students INNER JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE country = 'Haiti' OR cell_mobile_number = '09700166582'
hard gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'

eval_err_num:253
easy pred: SELECT "Title" FROM "Cartoon" ORDER BY "Title" ASC
easy gold: SELECT Title FROM Cartoon ORDER BY title

eval_err_num:254
easy pred: SELECT "Title" FROM "Cartoon" ORDER BY "Title" ASC
easy gold: SELECT Title FROM Cartoon ORDER BY title

eval_err_num:255
easy pred: SELECT * FROM "Cartoon" WHERE "Directed_by" = 'Ben Jones'
easy gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";

eval_err_num:256
medium pred: SELECT "Title", "Directed_by" FROM "Cartoon" ORDER BY "Original_air_date"
medium gold: SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date

eval_err_num:257
hard pred: SELECT Country, COUNT(*) as Number_of_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_Channels DESC LIMIT 1
hard gold: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;

eval_err_num:258
hard pred: SELECT Country, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_Channels DESC LIMIT 1
hard gold: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;

eval_err_num:259
medium pred: SELECT COUNT(DISTINCT series_name) AS num_series, COUNT(DISTINCT Content) AS num_content FROM TV_Channel
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;

eval_err_num:260
medium pred: SELECT COUNT(DISTINCT series_name, Content) FROM TV_Channel
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;

eval_err_num:261
easy pred: SELECT "Content" FROM "TV_Channel" WHERE "series_name" = 'Sky Radio'
easy gold: SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";

eval_err_num:262
easy pred: SELECT "Content" FROM "TV_Channel" WHERE "series_name" = 'Sky Radio'
easy gold: SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";

eval_err_num:263
hard pred: SELECT Language, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Language ORDER BY Number_of_TV_Channels ASC LIMIT 1
hard gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;

eval_err_num:264
hard pred: SELECT Language, COUNT(Language) AS Num_Channels FROM TV_Channel GROUP BY Language ORDER BY Num_Channels ASC LIMIT 1
hard gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;

eval_err_num:265
medium pred: SELECT Language, COUNT(*) AS "Number of TV Channels" FROM TV_Channel GROUP BY Language
medium gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE

eval_err_num:266
medium pred: SELECT Language, COUNT(DISTINCT id) as "Number of TV Channels" FROM TV_Channel GROUP BY Language
medium gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE

eval_err_num:267
medium pred: SELECT Cartoon.Title FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"
medium gold: SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";

easy pred: SELECT Episode FROM TV_series ORDER BY Rating DESC
easy gold: SELECT Episode FROM TV_series ORDER BY rating

easy pred: SELECT Episode FROM TV_series ORDER BY Rating DESC
easy gold: SELECT Episode FROM TV_series ORDER BY rating

eval_err_num:268
medium pred: SELECT MIN("Share"), MAX("Share") FROM "TV_series"
medium gold: SELECT max(SHARE) , min(SHARE) FROM TV_series;

eval_err_num:269
medium pred: SELECT MAX("Share"), MIN("Share") FROM "TV_series"
medium gold: SELECT max(SHARE) , min(SHARE) FROM TV_series;

eval_err_num:270
easy pred: SELECT "Weekly_Rank" FROM "TV_series" WHERE "Episode" = 'A Love of a Lifetime'
easy gold: SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";

eval_err_num:271
medium pred: SELECT "TV_Channel"."series_name" FROM "TV_Channel" JOIN "TV_series" ON "TV_Channel"."id" = "TV_series"."Channel" WHERE "TV_series"."Episode" = 'A Love of a Lifetime'
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";

medium pred: SELECT Episode FROM TV_series WHERE Channel IN (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')
medium gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";

medium pred: SELECT Episode FROM TV_series WHERE id IN (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')
medium gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";

eval_err_num:272
medium pred: SELECT Directed_by, COUNT(*) AS num_cartoons FROM Cartoon GROUP BY Directed_by
medium gold: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by

eval_err_num:273
medium pred: SELECT Directed_by, COUNT(*) AS number_of_cartoons FROM Cartoon GROUP BY Directed_by
medium gold: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by

eval_err_num:274
medium pred: SELECT "Production_code", "Channel" FROM "Cartoon" WHERE "Original_air_date" = (SELECT MAX("Original_air_date") FROM "Cartoon")
medium gold: select production_code ,  channel from cartoon order by original_air_date desc limit 1

eval_err_num:275
medium pred: SELECT "Production_code", "Channel" FROM "Cartoon" WHERE "Original_air_date" = (SELECT MAX("Original_air_date") FROM "Cartoon")
medium gold: select production_code ,  channel from cartoon order by original_air_date desc limit 1

eval_err_num:276
medium pred: SELECT Country FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Written_by = 'Todd Casey'
medium gold: SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'

hard pred: SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'

hard pred: SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN ( SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey' )
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'

eval_err_num:277
extra pred: SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'

extra pred: SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang'
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'

eval_err_num:278
medium pred: SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'
medium gold: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'

easy pred: SELECT id FROM TV_Channel WHERE Country IN ( SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2 )
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2

eval_err_num:279
easy pred: SELECT "id" FROM "TV_Channel" GROUP BY "id" HAVING COUNT("id") > 2
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2

hard pred: SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN ( SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones' )
hard gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'

eval_err_num:280
hard pred: SELECT DISTINCT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL
hard gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'

eval_err_num:281
easy pred: SELECT "Earnings" FROM "poker_player" ORDER BY "Earnings" DESC
easy gold: SELECT Earnings FROM poker_player ORDER BY Earnings DESC

eval_err_num:282
medium pred: SELECT "Final_Table_Made", "Best_Finish" FROM "poker_player"
medium gold: SELECT Final_Table_Made ,  Best_Finish FROM poker_player

eval_err_num:283
easy pred: SELECT AVG("Earnings") FROM "poker_player"
easy gold: SELECT avg(Earnings) FROM poker_player

eval_err_num:284
easy pred: SELECT AVG("Earnings") FROM "poker_player"
easy gold: SELECT avg(Earnings) FROM poker_player

medium pred: SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)
medium gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1

medium pred: SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)
medium gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1

eval_err_num:285
easy pred: SELECT MAX("Final_Table_Made") FROM "poker_player" WHERE "Earnings" < 200000
easy gold: SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000

eval_err_num:286
medium pred: SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000

eval_err_num:287
medium pred: SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000

eval_err_num:288
hard pred: SELECT p."Birth_Date" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" WHERE pp."Earnings" = (SELECT MIN("Earnings") FROM "poker_player")
hard gold: SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1

eval_err_num:289
hard pred: SELECT p."Birth_Date" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" WHERE pp."Earnings" = (SELECT MIN("Earnings") FROM "poker_player")
hard gold: SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1

eval_err_num:290
hard pred: SELECT pp.Earnings AS "Money Rank" FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE p.Height = (SELECT MAX(Height) FROM people)
hard gold: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1

hard pred: SELECT Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height = (SELECT MAX(Height) FROM people)
hard gold: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1

eval_err_num:291
medium pred: SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC

eval_err_num:292
medium pred: SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC

eval_err_num:293
medium pred: SELECT "Nationality", COUNT(*) AS "Number of People" FROM "people" GROUP BY "Nationality"
medium gold: SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality

eval_err_num:294
medium pred: SELECT Nationality, COUNT(*) as "Count" FROM people GROUP BY Nationality
medium gold: SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality

eval_err_num:295
hard pred: SELECT Nationality, COUNT(*) as Count FROM people GROUP BY Nationality ORDER BY Count DESC LIMIT 1
hard gold: SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1

easy pred: SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) > 1
easy gold: SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2

eval_err_num:296
easy pred: SELECT "Nationality" FROM "people" GROUP BY "Nationality" HAVING COUNT(*) >= 2
easy gold: SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2

eval_err_num:297
medium pred: SELECT "Name", "Birth_Date" FROM "people" ORDER BY "Name" ASC
medium gold: SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC

eval_err_num:298
easy pred: SELECT COUNT(DISTINCT Nationality) AS Num_Nationalities FROM people
easy gold: SELECT count(DISTINCT Nationality) FROM people

easy pred: SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE
easy gold: SELECT count(*) FROM area_code_state

eval_err_num:299
medium pred: SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE
medium gold: SELECT max(area_code) ,  min(area_code) FROM area_code_state

eval_err_num:300
easy pred: SELECT MAX(created) AS last_date_created FROM VOTES WHERE state = 'CA'
easy gold: SELECT max(created) FROM votes WHERE state  =  'CA'

eval_err_num:301
easy pred: SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'
easy gold: SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'

eval_err_num:302
medium pred: SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c INNER JOIN ( SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(*) >= 2 ) v ON c.contestant_number = v.contestant_number
medium gold: SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2

extra pred: SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number = ( SELECT contestant_number FROM VOTES GROUP BY contestant_number ORDER BY COUNT(*) ASC LIMIT 1 )
extra gold: SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1

eval_err_num:303
medium pred: SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA')
medium gold: SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'

eval_err_num:304
extra pred: SELECT state, COUNT(DISTINCT phone_number) AS num_voters FROM VOTES GROUP BY state ORDER BY num_voters DESC LIMIT 1
extra gold: SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1

medium pred: SELECT created, state, phone_number FROM VOTES WHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling')
medium gold: SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'

eval_err_num:305
extra pred: SELECT area_code FROM VOTES WHERE contestant_number IN (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling') AND area_code IN (SELECT area_code FROM VOTES WHERE contestant_number IN (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Kelly Clauss')) GROUP BY area_code HAVING COUNT(DISTINCT contestant_number) = 2
extra gold: SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'

easy pred: SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'
easy gold: SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"

easy pred: SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'
easy gold: SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"

eval_err_num:306
easy pred: SELECT SUM(SurfaceArea) FROM country WHERE Continent='Caribbean'
easy gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"

easy pred: SELECT Continent FROM country WHERE Code = 'AIA'
easy gold: SELECT Continent FROM country WHERE Name  =  "Anguilla"

eval_err_num:307
medium pred: SELECT Region FROM country INNER JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Kabul'
medium gold: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"

medium pred: SELECT Region FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Kabul')
medium gold: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"

eval_err_num:308
extra pred: SELECT Language FROM countrylanguage WHERE CountryCode='ABW' AND Percentage=( SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode='ABW' )
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1

extra pred: SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T'
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1

eval_err_num:309
medium pred: SELECT Population, LifeExpectancy FROM country WHERE Name='Brazil'
medium gold: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"

eval_err_num:310
hard pred: SELECT c.Name FROM country c WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC LIMIT 1
hard gold: SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1

eval_err_num:311
medium pred: SELECT SUM(c.Population) AS "Total Population in Asia", MAX(co.GNP) AS "Largest GNP in Asia" FROM city c JOIN country co ON c.CountryCode = co.Code WHERE co.Continent = 'Asia'
medium gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"

medium pred: SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'
medium gold: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"

medium pred: SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'
medium gold: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"

eval_err_num:312
medium pred: SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')
medium gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"

eval_err_num:313
medium pred: SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')
medium gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"

medium pred: SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm LIKE '%US territory%'
medium gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"

medium pred: SELECT AVG(GNP), SUM(Population) FROM country WHERE Continent = 'North America' AND Region LIKE '%Caribbean%' AND GovernmentForm LIKE '%US%'
medium gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"

eval_err_num:314
easy pred: SELECT COUNT(DISTINCT Language) AS num_languages FROM countrylanguage
easy gold: SELECT count(DISTINCT LANGUAGE) FROM countrylanguage

eval_err_num:315
medium pred: SELECT COUNT(Language) AS TotalLanguages FROM countrylanguage WHERE CountryCode = 'ABW'
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"

eval_err_num:316
medium pred: SELECT COUNT(*) FROM countrylanguage WHERE CountryCode='ABW'
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"

medium pred: SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"

medium pred: SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"

eval_err_num:317
extra pred: SELECT c.Name FROM country c JOIN ( SELECT CountryCode, COUNT(Language) AS num_languages FROM countrylanguage GROUP BY CountryCode ORDER BY num_languages DESC LIMIT 1 ) cl ON c.Code = cl.CountryCode
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:318
extra pred: SELECT c.Name FROM country c JOIN ( SELECT cl.CountryCode, COUNT(cl.Language) AS num_languages FROM countrylanguage cl GROUP BY cl.CountryCode ORDER BY num_languages DESC LIMIT 1 ) AS sub ON c.Code = sub.CountryCode
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:319
extra pred: SELECT c.Continent FROM country c INNER JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY COUNT(DISTINCT cl.Language) DESC LIMIT 1
extra gold: SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:320
extra pred: SELECT Continent, COUNT(Language) AS NumLanguages FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY NumLanguages DESC LIMIT 1
extra gold: SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:321
easy pred: SELECT COUNT(*) FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.CountryCode = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'Dutch' AND cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T'
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")

eval_err_num:322
easy pred: SELECT COUNT(DISTINCT CountryCode) AS NumOfNations FROM countrylanguage WHERE Language IN ('English', 'Dutch') AND IsOfficial = 'T'
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")

eval_err_num:323
extra pred: SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"

eval_err_num:324
extra pred: SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French'
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"

eval_err_num:325
extra pred: SELECT c.Name FROM country c INNER JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' INNER JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"

eval_err_num:326
extra pred: SELECT Name FROM country WHERE Code IN ( SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'French') AND IsOfficial = 'T' GROUP BY CountryCode HAVING COUNT(*) = 2 )
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"

eval_err_num:327
medium pred: SELECT COUNT(DISTINCT c.Continent) AS NumDistinctContinents FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese' AND cl.IsOfficial = 'T'
medium gold: SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"

eval_err_num:328
medium pred: SELECT COUNT(DISTINCT c.Continent) AS NumContinents FROM countrylanguage cl INNER JOIN country c ON cl.CountryCode=c.Code WHERE cl.Language='Chinese' AND cl.IsOfficial='T'
medium gold: SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"

eval_err_num:329
hard pred: SELECT DISTINCT Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE Language IN ('English', 'Dutch')
hard gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"

eval_err_num:330
hard pred: SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English') AND cl.IsOfficial = 'T'
hard gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"

eval_err_num:331
extra pred: SELECT c.Name AS Country FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE (cl.Language = 'English' OR cl.Language = 'Dutch') AND cl.IsOfficial = 'T'
extra gold: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"

eval_err_num:332
extra pred: SELECT DISTINCT Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (Language = 'English' OR Language = 'Dutch') AND IsOfficial = 'T'
extra gold: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"

extra pred: SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' ORDER BY Percentage DESC LIMIT 1
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1

extra pred: SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1

eval_err_num:333
hard pred: SELECT cl.Language FROM countrylanguage cl INNER JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm LIKE '%Republic%' AND cl.Language NOT IN ( SELECT cl2.Language FROM countrylanguage cl2 INNER JOIN country c2 ON cl2.CountryCode = c2.Code WHERE c2.GovernmentForm LIKE '%Republic%' GROUP BY cl2.Language HAVING COUNT(DISTINCT cl2.CountryCode) > 1 )
hard gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1

eval_err_num:334
hard pred: SELECT cl.Language FROM countrylanguage cl INNER JOIN country c ON cl.CountryCode = c.Code WHERE cl.Percentage = 100 AND c.GovernmentForm LIKE '%Republic%' AND NOT EXISTS ( SELECT cl2.Language FROM countrylanguage cl2 WHERE cl2.Language = cl.Language AND cl2.CountryCode != cl.CountryCode )
hard gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1

eval_err_num:335
extra pred: SELECT city.Name, MAX(city.Population) AS Largest_Population FROM city INNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' GROUP BY city.ID ORDER BY Largest_Population DESC LIMIT 1
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1

eval_err_num:336
extra pred: SELECT city.Name, MAX(city.Population) FROM city INNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T'
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1

eval_err_num:337
hard pred: SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1
hard gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1

eval_err_num:338
hard pred: SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1
hard gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1

extra pred: SELECT AVG(LifeExpectancy) FROM country WHERE Code IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'F' )
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")

extra pred: SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' )
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")

extra pred: SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")

extra pred: SELECT SUM(Population) FROM country WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' )
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")

eval_err_num:339
medium pred: SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"

eval_err_num:340
medium pred: SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"

eval_err_num:341
medium pred: SELECT COUNT(DISTINCT cl.Language) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T' AND c.IndepYear < 1930
medium gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"

eval_err_num:342
medium pred: SELECT COUNT(DISTINCT Language) AS TotalDistinctOfficialLanguages FROM countrylanguage INNER JOIN country ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930 AND IsOfficial = 'T'
medium gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"

eval_err_num:343
hard pred: SELECT c.Name FROM country c WHERE c.SurfaceArea > ( SELECT MAX(c2.SurfaceArea) FROM country c2 WHERE c2.Continent = 'Europe' )
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")

hard pred: SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")

extra pred: SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')
extra gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")

eval_err_num:344
extra pred: SELECT c.Name FROM country c WHERE c.Continent = 'Africa' AND c.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')
extra gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")

eval_err_num:345
extra pred: SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')
extra gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  "Africa")

eval_err_num:346
extra pred: SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')
extra gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")

hard pred: SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English'
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

eval_err_num:347
hard pred: SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

hard pred: SELECT Code FROM country WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' ) AND GovernmentForm != 'Republic'
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

eval_err_num:348
hard pred: SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') AND GovernmentForm <> 'Republic'
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

eval_err_num:349
extra pred: SELECT city.Name FROM city INNER JOIN country ON city.CountryCode = country.Code INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F'
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')

eval_err_num:350
extra pred: SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial = 'F'
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')

medium pred: SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country)
medium gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1

medium pred: SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country)
medium gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1

eval_err_num:351
medium pred: SELECT c.Population, c.Name, c.HeadOfState FROM country c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
medium gold: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1

medium pred: SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
medium gold: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1

eval_err_num:352
medium pred: SELECT c.Name, COUNT(cl.Language) AS NumLanguages FROM country c INNER JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Code IN ( SELECT CountryCode FROM countrylanguage GROUP BY CountryCode HAVING COUNT(Language) >= 3 ) GROUP BY c.Name
medium gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2

eval_err_num:353
medium pred: SELECT c.Name, COUNT(cl.Language) AS NumLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code HAVING NumLanguages > 2
medium gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2

eval_err_num:354
extra pred: SELECT District, COUNT(*) AS NumOfCities FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District
extra gold: SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District

eval_err_num:355
medium pred: SELECT GovernmentForm, SUM(Population) as TotalPopulation FROM country WHERE GovernmentForm IN ( SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72 ) GROUP BY GovernmentForm
medium gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72

eval_err_num:356
medium pred: SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm
medium gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72

eval_err_num:357
medium pred: SELECT continent, AVG(lifeexpectancy) AS avg_life_expectancy, SUM(population) AS total_population FROM country WHERE lifeexpectancy < 72 GROUP BY continent
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72

eval_err_num:358
medium pred: SELECT c.Continent, SUM(c.Population) as Total_Population, AVG(c.LifeExpectancy) as Average_Life_Expectancy FROM country c WHERE c.Continent IN ( SELECT Continent FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72 ) GROUP BY c.Continent
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72

eval_err_num:359
hard pred: SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000
hard gold: select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000

easy pred: SELECT * FROM city WHERE Population BETWEEN 160000 AND 900000
easy gold: SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000

hard pred: SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1
hard gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1

hard pred: SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1
hard gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1

eval_err_num:360
medium pred: SELECT cl.CountryCode, cl.Language FROM countrylanguage cl INNER JOIN ( SELECT CountryCode, MAX(Percentage) AS MaxPercentage FROM countrylanguage GROUP BY CountryCode ) grouped_cl ON cl.CountryCode = grouped_cl.CountryCode AND cl.Percentage = grouped_cl.MaxPercentage ORDER BY cl.CountryCode
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode

eval_err_num:361
medium pred: SELECT cl.CountryCode, cl.Language FROM countrylanguage cl JOIN ( SELECT CountryCode, MAX(Percentage) AS MaxPercentage FROM countrylanguage GROUP BY CountryCode ) cl2 ON cl.CountryCode = cl2.CountryCode AND cl.Percentage = cl2.MaxPercentage ORDER BY cl.CountryCode ASC
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode

eval_err_num:362
extra pred: SELECT COUNT(*) AS total_countries FROM ( SELECT CountryCode, MAX(Percentage) AS max_percentage FROM countrylanguage WHERE Language = 'Spanish' GROUP BY CountryCode ) AS subquery WHERE max_percentage = ( SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish' )
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

extra pred: SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

eval_err_num:363
medium pred: SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T' ORDER BY cl.Percentage DESC LIMIT 1
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

medium pred: SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

eval_err_num:364
easy pred: SELECT "Name" FROM "conductor" WHERE "Nationality" <> 'USA'
easy gold: SELECT Name FROM conductor WHERE Nationality != 'USA'

eval_err_num:365
easy pred: SELECT Name FROM conductor WHERE Nationality <> 'USA'
easy gold: SELECT Name FROM conductor WHERE Nationality != 'USA'

eval_err_num:366
easy pred: SELECT AVG(`Attendance`) AS `Average Attendance` FROM `show`
easy gold: SELECT avg(Attendance) FROM SHOW

eval_err_num:367
easy pred: SELECT AVG(`Attendance`) FROM `show`
easy gold: SELECT avg(Attendance) FROM SHOW

eval_err_num:368
medium pred: SELECT MAX(`Share`), MIN(`Share`) FROM `performance` WHERE `Type` != "Live final"
medium gold: SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"

eval_err_num:369
medium pred: SELECT MAX(Share), MIN(Share) FROM performance WHERE Type <> 'Live final'
medium gold: SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"

eval_err_num:370
easy pred: SELECT "Name", "Year_of_Work" FROM "conductor" ORDER BY "Year_of_Work" DESC
easy gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC

medium pred: SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)
medium gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1

eval_err_num:371
medium pred: SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded <= c.Year_of_Work ORDER BY c.Year_of_Work DESC LIMIT 1
medium gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1

eval_err_num:372
medium pred: SELECT c.Name, o.Orchestra FROM conductor c INNER JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID
medium gold: SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID

eval_err_num:373
medium pred: SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID
medium gold: SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID

medium pred: SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1

eval_err_num:374
medium pred: SELECT c.Name FROM conductor c INNER JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID HAVING COUNT(DISTINCT o.Orchestra_ID) > 1
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1

eval_err_num:375
extra pred: SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1
extra gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:376
extra pred: SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1
extra gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:377
medium pred: SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008

eval_err_num:378
medium pred: SELECT Record_Company, COUNT(Orchestra_ID) AS NumberOfOrchestras FROM orchestra GROUP BY Record_Company
medium gold: SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company

eval_err_num:379
medium pred: SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Num_Of_Orchestras FROM orchestra GROUP BY Record_Company
medium gold: SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company

eval_err_num:380
medium pred: SELECT Major_Record_Format, COUNT(*) as Count FROM orchestra GROUP BY Major_Record_Format ORDER BY Count ASC
medium gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC

eval_err_num:381
medium pred: SELECT Major_Record_Format, COUNT(*) as Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC
medium gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC

eval_err_num:382
hard pred: SELECT Record_Company, COUNT(Orchestra_ID) as num_orchestras FROM orchestra GROUP BY Record_Company ORDER BY num_orchestras DESC LIMIT 1
hard gold: SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:383
hard pred: SELECT Record_Company, COUNT(Orchestra_ID) as num_orchestras FROM orchestra GROUP BY Record_Company ORDER BY num_orchestras DESC LIMIT 1
hard gold: SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:384
hard pred: SELECT Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL
hard gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)

eval_err_num:385
hard pred: SELECT Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL
hard gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)

eval_err_num:386
hard pred: SELECT DISTINCT o1.Record_Company FROM orchestra o1 JOIN orchestra o2 ON o1.Record_Company = o2.Record_Company WHERE o1.Year_of_Founded < 2003 AND o2.Year_of_Founded > 2003
hard gold: SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003

eval_err_num:387
medium pred: SELECT DISTINCT o.Year_of_Founded FROM orchestra o INNER JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID HAVING COUNT(DISTINCT p.Performance_ID) > 1
medium gold: SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1

eval_err_num:388
medium pred: SELECT Orchestra.Year_of_Founded FROM Orchestra INNER JOIN Performance ON Orchestra.Orchestra_ID = Performance.Orchestra_ID GROUP BY Orchestra.Orchestra_ID HAVING COUNT(*) > 1
medium gold: SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1

eval_err_num:389
medium pred: SELECT COUNT(*) FROM Highschooler WHERE grade IN (9,10)
medium gold: SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10

eval_err_num:390
medium pred: SELECT COUNT(*) FROM Highschooler WHERE grade IN (9,10)
medium gold: SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10

eval_err_num:391
medium pred: SELECT grade, COUNT(*) as count FROM Highschooler GROUP BY grade
medium gold: SELECT grade ,  count(*) FROM Highschooler GROUP BY grade

eval_err_num:392
hard pred: SELECT grade, COUNT(*) AS num_students FROM Highschooler GROUP BY grade ORDER BY num_students DESC LIMIT 1
hard gold: SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1

eval_err_num:393
easy pred: SELECT grade, COUNT(*) as num_students FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
easy gold: SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4

eval_err_num:394
medium pred: SELECT student_id, COUNT(friend_id) as num_of_friends FROM Friend GROUP BY student_id
medium gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id

eval_err_num:395
medium pred: SELECT student_id, COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id
medium gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id

eval_err_num:396
medium pred: SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name
medium gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id

eval_err_num:397
medium pred: SELECT Highschooler.name, COUNT(Friend.friend_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name
medium gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id

eval_err_num:398
extra pred: SELECT h.name FROM Highschooler h JOIN ( SELECT student_id, COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id ORDER BY num_friends DESC LIMIT 1 ) f ON h.ID = f.student_id
extra gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT name FROM Highschooler WHERE ID IN ( SELECT student_id FROM Friend GROUP BY student_id ORDER BY COUNT(friend_id) DESC LIMIT 1 )
extra gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:399
medium pred: SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID HAVING COUNT(f.friend_id) >= 3
medium gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3

eval_err_num:400
medium pred: SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID HAVING COUNT(f.friend_id) >= 3
medium gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3

eval_err_num:401
hard pred: SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.friend_id JOIN Highschooler K ON K.ID = F.student_id WHERE K.name = 'Kyle'
hard gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"

eval_err_num:402
hard pred: SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON f.friend_id = h.ID JOIN Highschooler k ON f.student_id = k.ID WHERE k.name = 'Kyle'
hard gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"

eval_err_num:403
medium pred: SELECT COUNT(*) FROM Highschooler h JOIN Friend f ON h.ID=f.friend_id WHERE h.name='Kyle'
medium gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"

medium pred: SELECT COUNT(friend_id) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
medium gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"

hard pred: SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT friend_id FROM Friend)
hard gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend

hard pred: SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT friend_id FROM Friend)
hard gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend

hard pred: SELECT name FROM Highschooler WHERE ID NOT IN ( SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend )
hard gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id

hard pred: SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT friend_id FROM Friend)
hard gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id

eval_err_num:404
hard pred: SELECT DISTINCT f.student_id FROM Friend f JOIN Likes l ON f.student_id = l.student_id AND f.friend_id = l.liked_id
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes

eval_err_num:405
hard pred: SELECT DISTINCT f.student_id FROM Friend f INNER JOIN Likes l ON f.student_id = l.student_id AND f.friend_id = l.liked_id
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes

eval_err_num:406
hard pred: SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.liked_id WHERE h.ID IN ( SELECT student_id FROM Friend ) AND h.ID IN ( SELECT liked_id FROM Likes )
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id

eval_err_num:407
hard pred: SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.student_id WHERE h.ID IN (SELECT student_id FROM Friend) AND h.ID IN (SELECT student_id FROM Likes)
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id

eval_err_num:408
medium pred: SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id
medium gold: SELECT student_id ,  count(*) FROM Likes GROUP BY student_id

eval_err_num:409
medium pred: SELECT student_id, COUNT(liked_id) AS num_likes FROM Likes GROUP BY student_id
medium gold: SELECT student_id ,  count(*) FROM Likes GROUP BY student_id

eval_err_num:410
medium pred: SELECT Highschooler.name, COUNT(Likes.liked_id) AS number_of_likes FROM Highschooler INNER JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID
medium gold: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id

eval_err_num:411
medium pred: SELECT Highschooler.name, COUNT(Likes.liked_id) as num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name
medium gold: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id

extra pred: SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID ORDER BY COUNT(Likes.liked_id) DESC LIMIT 1
extra gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

medium pred: SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID, Highschooler.name HAVING COUNT(Likes.liked_id) >= 2
medium gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2

eval_err_num:412
medium pred: SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID HAVING COUNT(L.liked_id) >= 2
medium gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2

eval_err_num:413
hard pred: SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.grade > 5 GROUP BY h.ID HAVING COUNT(f.friend_id) >= 2
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2

eval_err_num:414
hard pred: SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.grade > 5 GROUP BY h.ID, h.name HAVING COUNT(f.friend_id) >= 2
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2

medium pred: SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
medium gold: SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"

medium pred: SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
medium gold: SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"

hard pred: SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend UNION SELECT DISTINCT friend_id FROM Friend)
hard gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)

eval_err_num:415
hard pred: SELECT AVG(H.grade) FROM Highschooler H JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id
hard gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)

extra pred: SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
extra gold: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)

extra pred: SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
extra gold: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)

eval_err_num:416
hard pred: SELECT DISTINCT o.state FROM Owners o INNER JOIN Professionals p ON o.state = p.state
hard gold: SELECT state FROM Owners INTERSECT SELECT state FROM Professionals

eval_err_num:417
hard pred: SELECT DISTINCT o.state FROM Owners o INNER JOIN Professionals p ON o.state = p.state
hard gold: SELECT state FROM Owners INTERSECT SELECT state FROM Professionals

eval_err_num:418
hard pred: SELECT AVG(DATEDIFF(NOW(), date_of_birth)) AS average_age FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
hard gold: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )

extra pred: SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)
extra gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2

extra pred: SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2 )
extra gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2

eval_err_num:419
hard pred: SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment <= 1000 GROUP BY d.name
hard gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )

eval_err_num:420
hard pred: SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE d.owner_id IN ( SELECT o.owner_id FROM Owners o JOIN Treatments t ON o.owner_id = t.dog_id GROUP BY o.owner_id HAVING SUM(t.cost_of_treatment) <= 1000 )
hard gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )

eval_err_num:421
hard pred: SELECT DISTINCT first_name FROM ( SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals ) AS names WHERE names.first_name NOT IN ( SELECT name FROM Dogs )
hard gold: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs

eval_err_num:422
hard pred: SELECT DISTINCT owners.first_name FROM owners LEFT JOIN dogs ON owners.first_name = dogs.name UNION SELECT DISTINCT professionals.first_name FROM professionals LEFT JOIN dogs ON professionals.first_name = dogs.name WHERE dogs.name IS NULL
hard gold: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs

extra pred: SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
extra gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id

extra pred: SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
extra gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id

extra pred: SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = ( SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1 )
extra gold: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1)
extra gold: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1

medium pred: SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2 )
medium gold: SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2

medium pred: SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2 )
medium gold: SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2

extra pred: SELECT breed_name FROM Breeds WHERE breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1 )
extra gold: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1

eval_err_num:423
extra pred: SELECT Owners.owner_id, Owners.last_name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1
extra gold: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:424
extra pred: SELECT o.owner_id, o.last_name FROM Owners o INNER JOIN Dogs d ON o.owner_id = d.owner_id INNER JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1
extra gold: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:425
extra pred: SELECT tt.treatment_type_description FROM Treatment_Types tt JOIN Treatments t ON tt.treatment_type_code = t.treatment_type_code GROUP BY tt.treatment_type_description ORDER BY SUM(t.cost_of_treatment) ASC LIMIT 1
extra gold: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1

extra pred: SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = ( SELECT treatment_type_code FROM Treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1 )
extra gold: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1

eval_err_num:426
extra pred: SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN ( SELECT dog_id, SUM(cost_of_treatment) as total_cost FROM Treatments GROUP BY dog_id ) t ON d.dog_id = t.dog_id GROUP BY o.owner_id ORDER BY SUM(t.total_cost) DESC LIMIT 1
extra gold: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1

eval_err_num:427
extra pred: SELECT o.owner_id, o.zip_code FROM Owners o INNER JOIN Dogs d ON o.owner_id = d.owner_id INNER JOIN ( SELECT dog_id, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY dog_id ) t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.total_cost) DESC LIMIT 1
extra gold: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1

eval_err_num:428
medium pred: SELECT Professionals.professional_id, Professionals.cell_number FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id, Professionals.cell_number HAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2
medium gold: SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2

medium pred: SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
medium gold: SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2

extra pred: SELECT first_name, last_name FROM Professionals WHERE professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING AVG(cost_of_treatment) < ( SELECT AVG(cost_of_treatment) FROM Treatments ) )
extra gold: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )

extra pred: SELECT first_name, last_name FROM Professionals WHERE professional_id IN ( SELECT professional_id FROM Treatments WHERE cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM Treatments ) )
extra gold: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )

eval_err_num:429
medium pred: SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments INNER JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
medium gold: SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id

eval_err_num:430
medium pred: SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
medium gold: SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code

eval_err_num:431
medium pred: SELECT tt.treatment_type_description, t.cost_of_treatment FROM Treatments t INNER JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code
medium gold: SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code

eval_err_num:432
medium pred: SELECT o.first_name, o.last_name, s.size_description FROM Owners o INNER JOIN Dogs d ON o.owner_id = d.owner_id INNER JOIN Sizes s ON d.size_code = s.size_code
medium gold: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id

eval_err_num:433
medium pred: SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code
medium gold: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id

eval_err_num:434
medium pred: SELECT Owners.first_name, Dogs.name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id
medium gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id

eval_err_num:435
medium pred: SELECT Owners.first_name, Dogs.name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id
medium gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id

eval_err_num:436
extra pred: SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN Treatments t ON d.dog_id = t.dog_id WHERE b.breed_name = ( SELECT breed_name FROM Breeds ORDER BY COUNT(*) ASC LIMIT 1 )
extra gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )

eval_err_num:437
extra pred: SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN Treatments t ON d.dog_id = t.dog_id WHERE b.breed_name = (SELECT breed_name FROM Breeds ORDER BY breed_code DESC LIMIT 1) GROUP BY d.dog_id, t.date_of_treatment ORDER BY t.date_of_treatment ASC
extra gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )

eval_err_num:438
medium pred: SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia'
medium gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'

eval_err_num:439
medium pred: SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia'
medium gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'

eval_err_num:440
medium pred: SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.date_departed IS NOT NULL
medium gold: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id

eval_err_num:441
medium pred: SELECT d.date_arrived, d.date_departed FROM Dogs d INNER JOIN Treatments t ON d.dog_id = t.dog_id
medium gold: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id

eval_err_num:442
extra pred: SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM Dogs)
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )

eval_err_num:443
extra pred: SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.date_of_birth = (SELECT MIN(date_of_birth) FROM Dogs)
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )

eval_err_num:444
medium pred: SQL NOT GET: may be TIMEOUT
medium gold: SELECT date_arrived ,  date_departed FROM Dogs

eval_err_num:445
easy pred: SELECT COUNT(DISTINCT dog_id) AS num_dogs_treated FROM Treatments
easy gold: SELECT count(DISTINCT dog_id) FROM Treatments

eval_err_num:446
easy pred: SELECT COUNT(DISTINCT dog_id) AS num_dogs_treated FROM Treatments
easy gold: SELECT count(DISTINCT dog_id) FROM Treatments

eval_err_num:447
easy pred: SELECT COUNT(DISTINCT professional_id) FROM Treatments WHERE dog_id IS NOT NULL
easy gold: SELECT count(DISTINCT professional_id) FROM Treatments

eval_err_num:448
medium pred: SELECT MAX(cost_of_treatment) AS 'Most Recent Treatment Cost' FROM Treatments
medium gold: SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1

medium pred: SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = ( SELECT MAX(date_of_treatment) FROM Treatments )
medium gold: SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1

eval_err_num:449
extra pred: SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE date_departed IS NULL)
extra gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )

eval_err_num:450
extra pred: SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_adopted IS NULL)
extra gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )

extra pred: SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN ( SELECT DISTINCT professional_id FROM Treatments )
extra gold: SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )

eval_err_num:451
easy pred: SELECT AVG(age) AS average_age_of_dogs FROM Dogs
easy gold: SELECT avg(age) FROM Dogs

eval_err_num:452
easy pred: SELECT MAX(age) AS oldest_dog_age FROM Dogs
easy gold: SELECT max(age) FROM Dogs

eval_err_num:453
easy pred: SELECT MAX(charge_amount) AS "Most Expensive Charge Type Cost" FROM Charges
easy gold: SELECT max(charge_amount) FROM Charges

eval_err_num:454
medium pred: SELECT b.breed_name, s.size_description FROM Breeds b, Sizes s
medium gold: SELECT DISTINCT breed_code ,  size_code FROM dogs

eval_err_num:455
medium pred: SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
medium gold: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code

eval_err_num:456
easy pred: SELECT COUNT(*) as Singer_Count FROM singer
easy gold: SELECT count(*) FROM singer

eval_err_num:457
easy pred: SELECT "Name" FROM "singer" ORDER BY "Net_Worth_Millions" ASC
easy gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC

eval_err_num:458
easy pred: SELECT "Name" FROM "singer" ORDER BY "Net_Worth_Millions" ASC
easy gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC

eval_err_num:459
medium pred: SELECT "Birth_Year", "Citizenship" FROM "singer"
medium gold: SELECT Birth_Year ,  Citizenship FROM singer

eval_err_num:460
medium pred: SELECT "Birth_Year", "Citizenship" FROM "singer"
medium gold: SELECT Birth_Year ,  Citizenship FROM singer

eval_err_num:461
easy pred: SELECT Name FROM singer WHERE Citizenship <> 'France'
easy gold: SELECT Name FROM singer WHERE Citizenship != "France"

eval_err_num:462
easy pred: SELECT "Name" FROM "singer" WHERE "Citizenship" <> 'French'
easy gold: SELECT Name FROM singer WHERE Citizenship != "France"

eval_err_num:463
medium pred: SELECT "Name" FROM "singer" WHERE "Birth_Year" IN (1948, 1949)
medium gold: SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949

eval_err_num:464
medium pred: SELECT "Name" FROM "singer" WHERE "Birth_Year" = 1948 OR "Birth_Year" = 1949
medium gold: SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949

medium pred: SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)
medium gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1

medium pred: SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)
medium gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1

eval_err_num:465
medium pred: SELECT "Citizenship", COUNT(*) as "Number of Singers" FROM "singer" GROUP BY "Citizenship"
medium gold: SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship

eval_err_num:466
medium pred: SELECT Citizenship, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Citizenship
medium gold: SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship

eval_err_num:467
hard pred: SELECT Citizenship, COUNT(*) AS Num_Singers FROM singer GROUP BY Citizenship ORDER BY Num_Singers DESC LIMIT 1
hard gold: SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:468
hard pred: SELECT Citizenship, COUNT(*) AS Total FROM singer GROUP BY Citizenship ORDER BY Total DESC LIMIT 1
hard gold: select citizenship from singer group by citizenship order by count(*) desc limit 1

eval_err_num:469
medium pred: SELECT "Citizenship", MAX("Net_Worth_Millions") AS "Max_Net_Worth" FROM "singer" GROUP BY "Citizenship"
medium gold: SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship

eval_err_num:470
medium pred: SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship
medium gold: SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship

eval_err_num:471
medium pred: SELECT song.Title, singer.Name FROM song INNER JOIN singer ON song.Singer_ID = singer.Singer_ID
medium gold: SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID

eval_err_num:472
medium pred: SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID
medium gold: SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID

eval_err_num:473
medium pred: SELECT DISTINCT s."Name" FROM "singer" s JOIN "song" so ON s."Singer_ID" = so."Singer_ID" WHERE so."Sales" > 300000
medium gold: SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000

eval_err_num:474
medium pred: SELECT DISTINCT s."Name" FROM "singer" s JOIN "song" son ON s."Singer_ID" = son."Singer_ID" WHERE son."Sales" > 300000
medium gold: SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000

eval_err_num:475
medium pred: SELECT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(so.Song_ID) > 1
medium gold: SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1

eval_err_num:476
medium pred: SELECT singer.Name FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name HAVING COUNT(song.Song_ID) > 1
medium gold: SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1

eval_err_num:477
medium pred: SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name
medium gold: SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name

eval_err_num:478
medium pred: SELECT singer.Name, SUM(song.Sales) as Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name
medium gold: SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name

eval_err_num:479
hard pred: SELECT "Name" FROM "singer" LEFT JOIN "song" ON "singer"."Singer_ID" = "song"."Singer_ID" WHERE "song"."Song_ID" IS NULL
hard gold: SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)

eval_err_num:480
hard pred: SELECT Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL
hard gold: SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)

eval_err_num:481
hard pred: SELECT DISTINCT s1."Citizenship" FROM "singer" s1 JOIN "singer" s2 ON s1."Citizenship" = s2."Citizenship" WHERE s1."Birth_Year" < 1945 AND s2."Birth_Year" > 1955
hard gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955

eval_err_num:482
hard pred: SELECT DISTINCT s.Citizenship FROM singer s WHERE s.Birth_Year < 1945 AND s.Citizenship IN (SELECT s2.Citizenship FROM singer s2 WHERE s2.Birth_Year > 1955)
hard gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955

medium pred: SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = (SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon')
medium gold: SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  "AirCon"

eval_err_num:483
medium pred: SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = [code]
medium gold: SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code

eval_err_num:484
hard pred: SELECT property_name FROM Properties WHERE property_type_code IN ('APT', 'HSE') AND room_count > 1
hard gold: SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1

                     easy                 medium               hard                 extra                all                 
count                248                  446                  174                  166                  1034                
=====================   EXECUTION ACCURACY     =====================
execution            0.657                0.397                0.282                0.259                0.418               

====================== EXACT MATCHING ACCURACY =====================
exact match          0.637                0.267                0.236                0.066                0.318               

---------------------PARTIAL MATCHING ACCURACY----------------------
select               0.956                0.903                0.949                0.877                0.924               
select(no AGG)       0.962                0.922                0.949                0.918                0.938               
where                0.882                0.532                0.507                0.215                0.559               
where(no OP)         0.925                0.551                0.609                0.338                0.616               
group(no Having)     1.000                0.778                1.000                0.667                0.846               
group                0.889                0.556                1.000                0.667                0.769               
order                0.733                0.920                0.818                0.500                0.769               
and/or               1.000                0.955                0.947                0.895                0.955               
IUEN                 0.000                0.000                1.000                0.000                0.250               
keywords             0.906                0.717                0.667                0.438                0.712               
---------------------- PARTIAL MATCHING RECALL ----------------------
select               0.702                0.439                0.425                0.386                0.491               
select(no AGG)       0.706                0.448                0.425                0.404                0.499               
where                0.759                0.456                0.372                0.149                0.448               
where(no OP)         0.796                0.473                0.447                0.234                0.494               
group(no Having)     0.450                0.053                0.231                0.101                0.122               
group                0.400                0.038                0.231                0.101                0.111               
order                0.500                0.307                0.164                0.089                0.216               
and/or               0.996                0.986                0.970                0.907                0.974               
IUEN                 0.000                0.000                0.024                0.000                0.013               
keywords             0.707                0.349                0.299                0.193                0.371               
---------------------- PARTIAL MATCHING F1 --------------------------
select               0.809                0.591                0.587                0.536                0.641               
select(no AGG)       0.814                0.603                0.587                0.561                0.652               
where                0.816                0.491                0.429                0.176                0.497               
where(no OP)         0.856                0.509                0.515                0.277                0.548               
group(no Having)     0.621                0.099                0.375                0.176                0.213               
group                0.552                0.070                0.375                0.176                0.194               
order                0.595                0.460                0.273                0.151                0.338               
and/or               0.998                0.970                0.958                0.901                0.964               
IUEN                 1.000                1.000                0.047                1.000                0.025               
keywords             0.794                0.470                0.413                0.268                0.488               
