eval_err_num:1
easy pred: SELECT COUNT(*) AS total_singers FROM "singer"
easy gold: SELECT count(*) FROM singer

eval_err_num:2
easy pred: SELECT COUNT(*) FROMsinger
easy gold: SELECT count(*) FROM singer

eval_err_num:3
medium pred: SELECT singer.Name, singer.Country, singer.Age FROM "singer" AS singer JOIN "concert" AS concert ON concert.Stadium_ID = singer.Singer_ID JOIN "singer_in_concert" ASsinger_in_concert ONsinger_in_concert.Singer_ID = singer.Singer_ID ORDER BY singer.Age DESC LIMIT 0, 3
medium gold: SELECT name ,  country ,  age FROM singer ORDER BY age DESC

eval_err_num:4
medium pred: SELECT name, country, age FROMsinger ORDER BY age DESC
medium gold: SELECT name ,  country ,  age FROM singer ORDER BY age DESC

eval_err_num:5
medium pred: SELECT AVG(Age) as avg_age, MIN(Age) as min_age, MAX(Age) as max_age FROM singer WHERE Country = ' France'
medium gold: SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'

eval_err_num:6
medium pred: SELECT AVG(Age) as avg_age, MIN(Age) as min_age, MAX(Age) as max_age FROMsinger GROUP BY Name, Country
medium gold: SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'

eval_err_num:7
medium pred: SELECTsinger.Name AS YoungestSinger,singer.Song_release_year FROMsinger JOINconcert ONsinger.Singer_ID=concert.Singer_ID JOINstadium ON concert.Stadium_ID=stadium.Stadium_ID WHEREconcert.Year=(SELECTYear FROMconcert WHEREconcert_ID=1)
medium gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1

eval_err_num:8
medium pred: SELECT Name, Song_release_year FROM "singer" WHEREsinger_ID= ( SELECT min(Singer_ID) FROM "singer" )
medium gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1

eval_err_num:9
easy pred: SELECT DISTINCT country FROM "singer" WHERE age > 20
easy gold: SELECT DISTINCT country FROM singer WHERE age  >  20

eval_err_num:10
easy pred: SELECT * FROM "singer" WHERE "Age" > 20
easy gold: SELECT DISTINCT country FROM singer WHERE age  >  20

eval_err_num:11
medium pred: SELECT country, COUNT(*) AS num_singers FROM "singer" GROUP BY country
medium gold: SELECT country ,  count(*) FROM singer GROUP BY country

eval_err_num:12
medium pred: SELECT country, COUNT(*) as num_singers FROM "singer" GROUP BY country ORDER BY num_singers DESC
medium gold: SELECT country ,  count(*) FROM singer GROUP BY country

eval_err_num:13
hard pred: SELECT Song_Name FROM "singer" WHERE "Singer_ID" > (SELECT AVG("Singer_ID") FROM "singer")
hard gold: SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)

eval_err_num:14
hard pred: SELECT * FROM "singer" WHERE age > (SELECT avg(age) FROM "singer")
hard gold: SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)

eval_err_num:15
medium pred: SELECT * FROM "stadium" WHERE Capacity >= 5000 AND Capacity <= 10000
medium gold: SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000

eval_err_num:16
medium pred: SELECT ST.Location, ST.Name FROM Stadium ST INNER JOIN singersinger_in_concert SWI ON SWI.Stadium_ID = ST.Stadium_ID WHERE ST.Capacity >= 5000 AND ST.Capacity <= 10000
medium gold: SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000

eval_err_num:17
medium pred: SELECT max(capacity), avg(capacity) FROM stadiums
medium gold: select max(capacity), average from stadium

eval_err_num:18
medium pred: SELECT avg(capacity), max(capacity) FROM "stadium"
medium gold: select avg(capacity) ,  max(capacity) from stadium

eval_err_num:19
medium pred: SELECT Stadium.Name, Stadium.Capacity FROMStadium JOINsinger ON Stadium.ID =singer.Stadium_ID JOINconcert ON concert.ID =singer.Singer_ID GROUP BY Stadium.Name, Stadium.Capacity ORDER BY average DESC LIMIT 1
medium gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1

eval_err_num:20
medium pred: SELECT "Name", "Capacity" FROM "stadium" ORDER BY "Average" DESC LIMIT 1
medium gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1

eval_err_num:21
medium pred: SELECT COUNT(*) FROM "concert" WHERE year = 2014 OR year = 2015
medium gold: SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015

eval_err_num:22
medium pred: SELECT COUNT(*) FROM "concert" WHERE year = 2014 or year = 2015
medium gold: SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015

eval_err_num:23
medium pred: SELECT体育场.Name, COUNT(*) FROM stadium JOIN concert ON 体育场.Stadium_ID = concert.Stadium_ID JOINsinger ON 体育场.Stadium_ID =singer.Singer_ID GROUP BY 体育场.Stadium_ID ORDER BY 体育场.Name DESC
medium gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id

eval_err_num:24
medium pred: SELECTStadium_ID, COUNT(*) as count FROM "stadium" GROUP BYStadium_ID ORDER BY count DESC
medium gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id

eval_err_num:25
extra pred: SELECT Stadium.Name, Stadium.Capacity FROM stadium INNER JOIN concert ONStadium.Stadium_ID = concert.Stadium_ID INNER JOINsinger_in_concert ON concert.concert_ID =singer_in_concert.concert_ID GROUP BY Stadium.Name,Stadium.Capacity ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:26
extra pred: SELECT "Stadium"."Name", "Stadium"."Capacity" FROM "stadium" JOIN "concert" ON "stadium"."Stadium_ID" = "concert"."Stadium_ID" JOIN "singer" ON "concert"."concert_ID" = "singer"."Singer_ID" WHERE "stadium"."Year" = ( SELECT Year FROM "concert" WHERE "concert"."Year" >= 2013 GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1 ) ORDER BY COUNT(*) DESC LIMIT 1
extra gold: select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1

eval_err_num:27
hard pred: The year that had the most concerts was 2021.
hard gold: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1

eval_err_num:28
hard pred: SELECT * FROM "stadium" WHERE PRIMARY KEY NOT IN (SELECT * FROM "concert")
hard gold: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)

eval_err_num:29
hard pred: The names of the stadiums without any concerts are: - \"New York Met Life Stadium\" - \"Oracle Park\" - \"One World Trade Center\" - \" Soldier Field\" - \" Fenway Park\" - \" Yankee Stadium\" I hope that helps! Let me know if you have any other questions.
hard gold: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)

eval_err_num:30
hard pred: SELECT Singer.Name, Country.Name FROM singersinger join concert concert onsinger.Singer_ID=concert.Singer_ID LEFT JOINStadiumStadium on concert.Stadium_ID=Stadium.Stadium_ID ONsinger.Age>40 AND concert.Stadium_ID=Stadium.Stadium_ID WHERE concert.Year=2022 AND singer.Name='刘德华'
hard gold: SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30

eval_err_num:31
hard pred: SELECT * FROM "stadium" WHERE "Stadium_ID" NOT IN ( SELECT "Stadium_ID" FROM "concert" WHERE "Year" = 2014 )
hard gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014

eval_err_num:32
hard pred: SELECT DISTINCT * FROM "stadium" WHERE "Stadium_ID" NOT IN (SELECT "Stadium_ID" FROM "concert")
hard gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014

eval_err_num:33
medium pred: SELECT concert_Name, theme FROM "concert" GROUP BY concert_Name, theme ORDER BY concert_Name, theme
medium gold: SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id

eval_err_num:34
medium pred: SELECT concert_name, theme, COUNT(*) as singer_count FROM concert GROUP BY concert_name, theme ORDER BY singer_count DESC
medium gold: select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id

eval_err_num:35
medium pred: SELECT singer.Name, (SELECT COUNT(*) FROM concert WHERE concert.Stadium_ID = singer.Singer_ID) AS Num_concert FROM singer LEFT JOIN concert ON singer.Singer_ID = concert.Singer_ID GROUP BY singer.Name
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id

eval_err_num:36
medium pred: SELECT singer.Name, COUNT(*) AS num_ concerts FROMsinger INNER JOIN concert ON singer.Singer_ID = concert.Singer_ID GROUP BY singer.Name
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id

eval_err_num:37
hard pred: SELECT singer.Name FROMsinger INNER JOIN concert ON singer.Singer_ID = concert.Singer_ID INNER JOINstadium ON concert.Stadium_ID =stadium.Stadium_ID WHERE concert.Year = 2014
hard gold: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014

eval_err_num:38
hard pred: SELECT singer.Name, singer.Country, song_name, song_release_year, age, is_male FROM singer INNER JOIN concert ON singer.Singer_ID = concert.Singer_ID INNER JOINstadium ON concert.Stadium_ID =stadium.Stadium_ID WHERE concert.Year = 2014
hard gold: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014

eval_err_num:39
medium pred: SELECT singer.Name, singer.Country FROM "singer" AS singer INNER JOIN "concert" AS concert ON concert.Singer_ID = singer.Singer_ID INNER JOIN "stadium" ASStadium ONStadium.Stadium_ID = concert.Stadium_ID WHERE song_name = 'Hey'
medium gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'

eval_err_num:40
medium pred: SELECT singer.Name, singer.Country FROM singer INNER JOIN concert ON singer.Singer_ID = concert.Singer_ID INNER JOINstadium ON concert.Stadium_ID =stadium.Stadium_ID WHERE song.Title LIKE '%Hey%'
medium gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'

eval_err_num:41
extra pred: SELECT ST."Name", ST."Location" FROM "stadium" ST WHERE ST."Year" IN (2014, 2015)
extra gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015

eval_err_num:42
extra pred: SELECT Stadium.Name, Stadium.Location FROM Stadium JOIN concerts ON concerts.Stadium_ID = Stadium.Stadium_ID JOINsinger_in_concert ONsinger_in_concert.Singer_ID = concerts.Singer_ID WHERE concerts.Year = 2014 AND concerts.Year = 2015
extra gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015

eval_err_num:43
hard pred: SELECT COUNT(*) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID JOIN Stadium ON singer_in_concert.Stadium_ID = Stadium.Stadium_ID WHERE Stadium.的最高 = (SELECT 最高 FROM Stadium WHERE Capacity = (SELECT Capacity FROM concert WHERE场馆 = 'The most capacity'))
hard gold: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)

eval_err_num:44
hard pred: SELECT COUNT(*) FROM "concert" WHERE "Stadium_ID" = (SELECT MAX("Stadium_ID") FROM "stadium")
hard gold: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)

eval_err_num:45
easy pred: SELECT COUNT(DISTINCT Pets.PetID) WHERE Pets.weight > 10
easy gold: SELECT count(*) FROM pets WHERE weight  >  10

eval_err_num:46
medium pred: SELECT weight FROM Pets WHERE pet_age = (SELECT min(pet_age) FROMPets)
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1

eval_err_num:47
medium pred: SELECT 很轻的关键字， '小型犬' 类型的值， 0 公斤 FROM 学生表 WHERE 年龄 = ( SELECT 最小的年龄 FROM 学生表 ORDER BY 年龄 ASC LIMIT 1 )
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1

eval_err_num:48
medium pred: SELECT pet_type, MAX(weight) FROM Pets GROUP BY pet_type
medium gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType

eval_err_num:49
medium pred: SELECT PetType, MAX(weight) as weight_max FROM Pets GROUP BY PetType
medium gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType

medium pred: SELECT COUNT(*) FROM Has_Pet WHERE StuID > 20
medium gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20

eval_err_num:50
medium pred: `SELECT COUNT(DISTINCT Pets.PetID) FROM Has_Pet WHERE StuID IN (SELECTStuID FROM Student WHERE Age大于20)`
medium gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20

eval_err_num:51
hard pred: SELECT COUNT(*) FROM Has_Pet WHEREStuID=1 AND PetID IN (SELECT PetID FROM Pets WHERE PetType='Dog' AND Pet_age>18 AND性别='F')
hard gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'

eval_err_num:52
hard pred: SELECT COUNT(DISTINCTDISTINCT Pets.PetType) AS Dogpets FROM Student, Has_Pet WHERE Student.StuID = Has_Pet.StuID AND Pets.PetID = Has_Pet.PetID AND Student.Sex = 'F'
hard gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'

eval_err_num:53
easy pred: SELECT COUNT(DISTINCTPetType) AS distinct_pet_types FROM Pets
easy gold: SELECT count(DISTINCT pettype) FROM pets

eval_err_num:54
easy pred: SELECT COUNT(DISTINCTPetType) as different_types FROM Pets
easy gold: SELECT count(DISTINCT pettype) FROM pets

eval_err_num:55
extra pred: SELECT s.LName FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID WHERE p.PetType = 'cat' OR p.PetType = 'dog'
extra gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'

eval_err_num:56
extra pred: SELECT s.LName, s.Fname FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID WHERE p.PetType = 'cat' OR p.PetType = 'dog'
extra gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'

eval_err_num:57
extra pred: SELECT s.LName FROM Student s INNER JOIN Has_Pet h ON s.StuID = h.StuID INNER JOIN Pets p ON h.PetID = p.PetID WHERE p.PetType = 'cat' AND p.PetType = 'dog'
extra gold: select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'

eval_err_num:58
extra pred: SELECT s.Fname FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID AND p.PetType = 'cat' WHERE s.LName = 'John' AND p.PetType = 'dog'
extra gold: SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'

extra pred: SELECT StuID, Age FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet WHERE PetID = 1 )
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

eval_err_num:59
extra pred: SELECT StuID, SUM(CASE WHEN Pets.PetType = 'cat' THEN 1 else 0 END) AS NoCatPets, MAX(Age) FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

eval_err_num:60
hard pred: SELECTStuID FROM Student WHEREStuIDNOT IN (SELECTStuID FROMHas_Pet WHEREPetType='cat')
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'

eval_err_num:61
hard pred: SELECT StuID FROM Student WHERE LName='John' AND Fname='Doe' ANDStuID NOT IN (SELECTStuID FROM Has_Pet WHERE PetID='Cat')
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'

eval_err_num:62
extra pred: SELECT s.LName, s.Fname, s.Age FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID WHERE p.PetType = 'dog' AND s.Has_Pet.PetID = p.PetID AND s.Has_Pet.StuID = s.ID
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

eval_err_num:63
extra pred: SELECT s.LName, s.Fname FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID WHERE h.PetID IS NULL
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

eval_err_num:64
medium pred: SELECT PetType,pet_age FROM Pets WHERE pet_age=MIN(PET_AGE)
medium gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1

eval_err_num:65
medium pred: The youngest animal is a dog and it weighs 5 kg.
medium gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1

eval_err_num:66
medium pred: SELECT pet_type, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROMPets GROUP BY pet_type
medium gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype

eval_err_num:67
medium pred: SELECT pet_age_mean, pet_age_max FROM Pets
medium gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype

eval_err_num:68
medium pred: select pet_type, avg(weight) from Pets group by pet_type
medium gold: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype

eval_err_num:69
medium pred: SELECTPetType, AVG(weight) FROMPets JOINHas_Pet ON Pets.PetID = Has_Pet.PetID GROUP BYPetType
medium gold: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype

eval_err_num:70
medium pred: SELECT s.LName, s.Fname, s.Age FROM Student s INNER JOIN Has_Pet h ON s.StuID = h.StuID INNER JOIN Pets p ON h.PetID = p.PetID
medium gold: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid

eval_err_num:71
medium pred: SELECT S.LName, S.FName, COUNT(*) as Num_Pet_Users FROM Student S JOIN Has_Pet H ON S.StuID = H.StuID JOIN Pets P ON H.PetID = P.PetID WHERE P.PetType = 'Dog' AND S.StuID IS NOT NULL
medium gold: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid

eval_err_num:72
medium pred: SELECTPetID FROMHas_Pet WHEREStuID=('Smith')
medium gold: SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'

eval_err_num:73
medium pred: SELECT Pets.PetID FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith' AND Student.Fname = ' Smith'
medium gold: SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'

medium pred: SELECT COUNT(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID
medium gold: SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid

eval_err_num:74
medium pred: SELECT s.StuID, COUNT(p.PetID) AS PetCount FROM Student s JOIN Has_Pet p ON s.StuID = p.StuID GROUP BY s.StuID
medium gold: select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid

eval_err_num:75
medium pred: SELECT s.LName, s.Fname, p.PetType FROM Student s INNER JOIN Has_Pet p ON s.StuID = p.StuID INNER JOIN Pets p1 ON p.PetID = p1.PetID AND p1.PetType = 'Dog' WHERE s.StuID IN (SELECTStuID FROM Has_Pet WHERE PetID IN (SELECTPETID FROM Pets WHERE PetType = 'Cat' ANDPET_AGE > 1))
medium gold: SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1

eval_err_num:76
medium pred: SELECT s.LName, s.FName FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID GROUP BY s.LName, s.FName HAVING COUNT(DISTINCT h.PetID) > 1
medium gold: SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1

eval_err_num:77
hard pred: SELECT s.LName FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID WHERE p.pet_age = 3 AND s.LName = 'John'
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'

eval_err_num:78
hard pred: SELECT s.LName FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID WHERE p.pet_age = 3 AND s.性别 = '男'
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'

eval_err_num:79
extra pred: SELECT AVG(Age) FROM Student WHEREStuID NOT IN (SELECT StuID FROM Has_Pet)
extra gold: select avg(age) from student where stuid not in (select stuid from has_pet)

eval_err_num:80
extra pred: SELECT AVG(Age) FROM Student WHEREStuID NOT IN (SELECT StuID FROM Has_Pet)
extra gold: select avg(age) from student where stuid not in (select stuid from has_pet)

eval_err_num:81
easy pred: SELECT COUNT(1) AS count_continents FROMcontinents
easy gold: SELECT count(*) FROM CONTINENTS;

eval_err_num:82
easy pred: SELECT COUNT(DISTINCTContinent) FROMcontinents
easy gold: SELECT count(*) FROM CONTINENTS;

eval_err_num:83
medium pred: SELECT continents.ContId, continents.ContName, COUNT(DISTINCT countries.CountryName) AS NUM_COUNTS FROM continents INNER JOIN countries ONcontinents.ContId = countries.ContId GROUP BY continents.ContId,continents.ContName ORDER BY NUM_COUNTS DESC
medium gold: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;

eval_err_num:84
medium pred: SELECTcontinents.ContId,continents.ContName,COUNT(*) as countries FROMcontinents JOIN countries ONcontinents.ContId= countries.ContId GROUP BYcontinents.ContId,continents.ContName
medium gold: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;

medium pred: SELECT car_makers.FullName, car_makers.Id, COUNT(*) FROM car_makers GROUP BY car_makers.FullName, car_makers.Id ORDER BY COUNT(*) DESC
medium gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;

eval_err_num:85
medium pred: SELECT car_makers.FullName, car_makers.Id, COUNT(*) as Models FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN countries ON model_list.Maker = countries.Id GROUP BY car_makers.FullName, car_makers.Id ORDER BY models DESC
medium gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;

hard pred: SELECT * FROM cars_data WHERE Horsepower = (SELECT MIN( Horsepower) FROM cars_data)
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;

hard pred: SELECT Model FROM car_names WHERE Make = 'Audi'
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;

eval_err_num:86
extra pred: SELECT model_list.Model FROM car_makers asMaker JOIN model_list onMaker.Id=model_list.Maker JOIN car_names asModel onModel.Model=car_names.Model JOIN cars_data onMaker.Id= Cars_data.Id WHERE Cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)

eval_err_num:87
extra pred: The model for the car with a weight smaller than the average is \" model_list (\'model\', \'smallest_weight\').\"
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)

eval_err_num:88
extra pred: SELECTMaker, Model FROM Car_Makers WHERE Year = 1970
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';

eval_err_num:89
extra pred: The name of the different car makers who produced a car in 1970 could be: - Toyota - Nissan - Renault - BMW - Mercedes-Benz - Audi - Volkswagen I hope this helps! Let me know if you have any other questions.
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';

eval_err_num:90
extra pred: SELECT make, production_time FROM cars_data WHERE year = ( SELECT min(year) FROM cars_data ORDER BY year ASC LIMIT 1 )
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);

eval_err_num:91
extra pred: SELECT Maker, Year from cars_data where Year = ( SELECT最早年份 from model_list WHEREMaker = 'Audi' and Model = 'A08' )
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);

hard pred: SELECT DISTINCT Model FROM car_names WHERE Make >= '80'
hard gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;

eval_err_num:92
hard pred: SELECT Model FROM car_makers WHERE Maker = 'Nissan' AND Year <= 2020
hard gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;

eval_err_num:93
hard pred: SELECTcontinent, COUNT(*) as count FROM("continents","car_makers") c JOIN("countries","model_list") cn ON c.ContId=cn.CountryId GROUP BYcontinent ORDER BY count DESC
hard gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;

eval_err_num:94
hard pred: SELECTcontinents.ContId, COUNT(DISTINCT car_makers.Maker) AS car_makers_count FROMcontinents INNER JOIN car_makers ONcontinents.ContId = car_makers.ContId GROUP BYcontinents.ContId ORDER BYContId ASC
hard gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;

extra pred: SELECT countryName FROM countries GROUP BY countryName ORDER BY count(*) DESC LIMIT 1
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;

eval_err_num:95
extra pred: SELECT countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;

eval_err_num:96
medium pred: SELECT Maker, COUNT(*) AS Models FROM car_makers GROUP BY Maker ORDER BY Models DESC
medium gold: select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;

eval_err_num:97
medium pred: SELECTMaker, COUNT(*) AS Models FROM car_makers GROUP BYMaker ORDER BY Models DESC
medium gold: SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;

eval_err_num:98
medium pred: SELECT Accelerate FROM cars_data WHERE Make = 'AC hornet sportabout (sw)'
medium gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';

eval_err_num:99
medium pred: SELECT Accelerate FROM cars_data WHERE Make = 'AC hornet sportabout' AND Model = 'sw'
medium gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';

eval_err_num:100
medium pred: SELECT COUNT(DISTINCT Maker) AS number_of_car_makers FROM car_makers WHERE Country = ' France'
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';

medium pred: SELECT COUNT(*) FROM car_makers WHERE country = ' France'
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';

hard pred: SELECT COUNT(*) FROM car_names WHERE Make = 'USA'
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';

eval_err_num:101
hard pred: SELECT COUNT(*) AS count FROM car_makers WHERE Country = 'United States'
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';

easy pred: SELECT MIN(mpg) FROM Cars_data WHERE cylinders = 4
easy gold: SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;

eval_err_num:102
medium pred: SELECT MIN(weight) AS smallest_weight, Cylinders, Edispl, Horsepower, Accelerate FROM cars_data WHERE year = 1974 AND cylinders = 8
medium gold: select min(weight) from cars_data where cylinders  =  8 and year  =  1974

medium pred: SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8
medium gold: select min(weight) from cars_data where cylinders  =  8 and year  =  1974

eval_err_num:103
medium pred: SELECTMaker, Model FROM car_makers; SELECTMaker, Model FROM car_names; SELECTMaker, Model FROM cars_data
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;

eval_err_num:104
medium pred: SELECTMaker, Model FROM car_makers
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;

eval_err_num:105
medium pred: SELECT country.CountryName, car_makers.FullName, COUNT(DISTINCT car_makers.Maker) AS count FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY country.CountryName HAVING count > 0
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;

medium pred: SELECT CountryName, CountryId FROM countries WHERE Continent = 'World'
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;

eval_err_num:106
easy pred: `SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;`
easy gold: SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;

eval_err_num:107
medium pred: SELECT AVG(weight) AS average_weight FROM cars_data WHERE Year = ()
medium gold: SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;

eval_err_num:108
medium pred: SELECT Year, AVG(weight) FROM "cars_data" GROUP BY Year
medium gold: SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;

eval_err_num:109
extra pred: SELECTCountryName FROM countries GROUP BYCountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;

eval_err_num:110
extra pred: SELECT countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY countries.CountryName HAVING COUNT(DISTINCT model_list.Model) >= 3
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;

eval_err_num:111
extra pred: SELECT MAX( Horsepower) ASMaximum Horsepower, Maker AS Make FROM cars_data WHERE cylinders = 3
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;

eval_err_num:112
extra pred: SELECT MAX( Horsepower) FROM cars_data WHERE Cylinders = 3 AND Maker = 'Tesla'
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;

eval_err_num:113
hard pred: SELECT Model FROM cars_data WHERE MPG = (SELECT MAX(mpg) FROM cars_data)
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;

eval_err_num:114
hard pred: SELECT Model FROM cars_data WHERE mpg = (SELECT MAX(mpg) FROM cars_data)
hard gold: select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;

easy pred: SELECT AVG( Horsepower) FROM Cars_data WHERE Year <= 1980
easy gold: select avg(horsepower) from cars_data where year  <  1980;

eval_err_num:115
medium pred: SELECT AVG(Edispl) FROM cars_data WHERE Maker = 'Volvo'
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';

eval_err_num:116
medium pred: SELECT AVG(Edispl) FROM cars_data WHERE Make = 'Volvo'
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';

eval_err_num:117
medium pred: SELECT MAX(Accelerate) AS Max加速度 FROM cars_data WHERE Cylinders = ( SELECT MAX(cylinders) FROM cars_data WHERE make = 'Tesla' )
medium gold: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;

eval_err_num:118
medium pred: SELECT MAX(Accelerate) FROM "cars_data" WHERE Cylinders IN ( SELECT cylinders FROM "Cars_data" GROUP BY Cylinders HAVING COUNT(DISTINCT Maker) > 1 )
medium gold: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;

eval_err_num:119
hard pred: SELECT Model FROM car_makers WHERE id IN (SELECT ModelId FROM car_names GROUP BY Model HAVING COUNT(DISTINCT Make) > 1)
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;

eval_err_num:120
hard pred: SELECT Model FROM car_makers WHERE id IN ( SELECT Model FROM model_list WHERE UNIQUEModel = 'Model_Name' ) ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;

easy pred: SELECT COUNT(*) FROM car_names WHERE Make = 'Toyota'
easy gold: SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;

easy pred: SELECT COUNT(*) FROM car_names WHERE Make = '80'
easy gold: SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;

eval_err_num:121
medium pred: SELECT COUNT(*) FROM car_makers WHEREMaker = 'American Motor Company'
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';

eval_err_num:122
medium pred: SELECT COUNT(*) AS num_models FROM car_makers WHEREMaker = 'American Motor Company'
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';

eval_err_num:123
medium pred: SELECTMaker,ModelList.ModelID FROM car_makers JOIN model_list ON car_makers.Id=model_list.Maker GROUP BYMaker,ModelList.ModelID HAVING COUNT(DISTINCT ModelList.ModelID)>3 ORDER BYMakes.MakeID DESC
medium gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;

eval_err_num:124
medium pred: SELECT car_names.Maker, model_list.Model FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker HAVING COUNT(DISTINCT model_list.Model) > 3
medium gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;

eval_err_num:125
extra pred: SELECT Model FROM car_makers WHEREMaker='General Motors' AND Model>=3500
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;

eval_err_num:126
extra pred: SELECT Maker, Model FROM car_makers WHERE Maker = 'General Motors' AND Model > 3500
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;

easy pred: SELECT Year FROM cars_data WHERE MPG >= 18 AND Cylinders <= 6
easy gold: select distinct year from cars_data where weight between 3000 and 4000;

eval_err_num:127
easy pred: SELECT * FROM "cars_data" WHERE ("Weight" <= 4000 AND "Weight" >= 3000) OR ("Accelerate" > 0 AND "Accelerate" < 1000)
easy gold: select distinct year from cars_data where weight between 3000 and 4000;

eval_err_num:128
medium pred: SELECT Horsepower = MAX( Horsepower) FROM cars_data
medium gold: SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;

medium pred: SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
medium gold: SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;

eval_err_num:129
extra pred: SELECT Model, Cylinders, Edispl, Horsepower,Weight, Accelerate, year FROM cars_data WHERE Make = 'Volvo' ORDER BY Accelerate DESC LIMIT 1
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;

eval_err_num:130
extra pred: SELECT Model, cylinders, Horsepower, Accelerate, Year FROM " cars_data" WHERE Year = ( SELECT Year FROM " cars_data" WHERE Model = 'volvo' ORDER BY Accelerate DESC LIMIT 1 ) ORDER BY cylinders DESC LIMIT 1
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;

eval_err_num:131
hard pred: SELECT COUNT(*) as num_cars, SUM(Accelerate) as accel FROM ( SELECT Model, Accelerate, COUNT(*) as num_ Models FROM car_names GROUP BY Model, Accelerate ORDER BY Accelerate DESC LIMIT 1 ) subquery WHERE Accelerate > ( SELECT Horsepower FROM car_makers GROUP BY Horsepower ORDER BY Horsepower DESC LIMIT 1 ) max_ Horsepower
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );

eval_err_num:132
hard pred: SELECT COUNT(DISTINCT car_names.Model) AS num_cars, CASE WHEN car_names.Accelerate > car_makers. Horsepower THEN 1 ELSE 0 END AS greater_accelerate FROM car_names JOIN car_makers ON car_names.Model = car_makers.Model JOIN cars_data ON car_makers.Id = cars_data.Maker WHERE car_names.Accelerate > car_data. Horsepower
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );

eval_err_num:133
medium pred: SELECT COUNT(DISTINCTCountryId) AS num_Countries FROM countries WHERE CountryName = 'United States'
medium gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2

eval_err_num:134
medium pred: SELECT COUNT(*) as Num countries FROM countries WHERE CountryId in (SELECTContId FROMcontinents WHEREContName = 'World')
medium gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2

eval_err_num:135
easy pred: SELECT COUNT(DISTINCT car_names) FROM "cars_data" WHERE cylinders > 6
easy gold: SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;

eval_err_num:136
extra pred: select model from car_makers where id in ( select id from cars_data where Cylinders = 4 )
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;

eval_err_num:137
extra pred: select Model from car_makers where Maker = 'Apple' and Cylinders = 4 order by Horsepower DESC limit 1
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;

eval_err_num:138
extra pred: SELECT car_names.MakeId, car_names.Model FROM car_makers as car_makers INNER JOIN model_list as model_list ON car_makers.Id = model_list.Maker WHERE car_makers. Horsepower > (SELECT min( Horsepower) FROM cars_data) AND model_list. cylinders < 3
extra gold: SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;

eval_err_num:139
extra pred: SELECT MakeId, Model FROM cars_data WHERE Cylinders < 4 AND Horsepower < 4
extra gold: select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;

eval_err_num:140
medium pred: SELECT MAX(MPG) AS max_mpg FROM ( SELECT 寿屋_ID, MAX(寿屋_mpg) AS max_mpg, 8 AScylinders, 0 AS Horsepower, 0 AS weight, 0 AS accelerate, 0 AS year FROM 寿屋_Cars_data WHERE 寿屋_cyls > 0 AND 寿屋_ Horsepower > 0 AND 寿屋_year < 1980 GROUP BY 寿屋_ID, 寿屋_cylinders, 寿屋_ Horsepower, 寿屋_weight, 寿屋_ accelerate, 寿屋_year ) AS subquery WHERE subquery.寿屋_cyls = 8
medium gold: select max(mpg) from cars_data where cylinders  =  8 or year  <  1980

extra pred: SELECT Model FROM model_list WHERE Model < 3500 AND Maker != ' Ford Motor Company'
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';

eval_err_num:141
extra pred: SELECT ModelList.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE Model < 3500
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';

eval_err_num:142
hard pred: SELECTCountryNameFROM countries WHERECountryId NOT IN (SELECTCountryIdFROM car_makers)
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;

eval_err_num:143
hard pred: SELECT countryName FROM countries WHERE countryId NOT IN ( SELECT countryId FROM car_makers GROUP BY countryId HAVING COUNT(*) = 0 )
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;

extra pred: SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN countries ON car_makers.Country = countries.CountryName WHERE countries.Continent = ' Europe' GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT car_names.Model) > 2 AND COUNT(DISTINCT car_names.Make) > 3
extra gold: select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;

eval_err_num:144
extra pred: SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Make WHERE model_list.Count >= 2 AND car_names.Count >= 3
extra gold: SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;

eval_err_num:145
extra pred: SELECTCountryId,CountryName FROM countries WHEREContinent = 'Asia' AND COUNT(DISTINCT car_makers) > 3 OR COUNT(DISTINCT model_list) = 1 AND maker = 'Fiat'
extra gold: SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';

eval_err_num:146
extra pred: SELECT c.CountryId, c.CountryName FROM countries c INNER JOIN car_makers m ON c.CountryId = m.FullName INNER JOIN model_list l ON m.Id = l.Maker WHERE l.Model = 'Fiat' AND ( SELECT COUNT(*) FROM model_list l2 WHERE l2.Maker = m.Id AND l2.Model = 'Fiat' >= 3 )
extra gold: select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';

eval_err_num:147
easy pred: SELECT country FROM airlines WHERE name = 'JetBlue Airways'
easy gold: SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"

eval_err_num:148
medium pred: SELECT airline, abbreviation FROM airports WHERE country = 'USA'
medium gold: SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"

eval_err_num:149
medium pred: INSERT INTO airports (City, AirportCode) VALUES ('Anthony', 'AXX')
medium gold: SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"

eval_err_num:150
easy pred: SELECT COUNT(DISTINCT airline) AS total_ airlines FROM airlines
easy gold: SELECT count(*) FROM AIRLINES

eval_err_num:151
easy pred: SELECT COUNT(DISTINCT Airlines) as total_ airlines
easy gold: SELECT count(*) FROM AIRLINES

eval_err_num:152
easy pred: SELECT COUNT(*) as num_airports FROM airports
easy gold: SELECT count(*) FROM AIRPORTS

eval_err_num:153
easy pred: SELECT COUNT(DISTINCT AirportCode) as NumAirports FROM airports
easy gold: SELECT count(*) FROM AIRPORTS

eval_err_num:154
easy pred: SELECT COUNT(*) AS num_flights FROM Flights WHERE Airline = 'ABC旅行社' AND DestAirport = '杭州萧山国际机场'
easy gold: SELECT count(*) FROM FLIGHTS

eval_err_num:155
easy pred: SELECT COUNT(DISTINCT FlightNo) as num_flights FROM Flights WHERE Airline IN ( SELECT Airline FROM airports )
easy gold: SELECT count(*) FROM FLIGHTS

eval_err_num:156
easy pred: SELECT airline FROM airports WHERE abbreviation = 'UAL'
easy gold: SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"

eval_err_num:157
easy pred: CREATE TABLE airlines ( uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT )
easy gold: SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"

eval_err_num:158
easy pred: SELECT COUNT(*) FROM airlines WHERECountry = 'USA'
easy gold: SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"

easy pred: SELECT COUNT(DISTINCT airline) FROM airlines
easy gold: SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"

medium pred: SELECT City, Country FROM airports WHERE AirportCode = 'Alton'
medium gold: SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"

eval_err_num:159
medium pred: SELECT City, Country FROM Alton airports
medium gold: SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"

easy pred: SELECT AirportName, AirportCode FROM airports WHERE City = 'Aberdeen'
easy gold: SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"

eval_err_num:160
easy pred: SELECT COUNT(DISTINCT Airline) AS NumFlights INTO ATO FROMflights
easy gold: SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"

eval_err_num:161
medium pred: SELECT COUNT(*) AS Num Flights FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'New York City'
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"

medium pred: SELECT COUNT(DISTINCT airline) FROM Flights WHERE SourceAirport = 'Aberdeen'
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"

eval_err_num:162
medium pred: SELECT COUNT(*) AS NumOfFlights FROM Flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Aberdeen'
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"

eval_err_num:163
medium pred: SELECT COUNT(DISTINCT airline) AS NumOfFlights arriveInAberdeen FROM Flights
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"

eval_err_num:164
hard pred: SELECT COUNT(*) as Num航班 FROM Flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"

eval_err_num:165
hard pred: SELECT COUNT(DISTINCT airline) AS NumFlights FROM airports WHERE AirportCode = 'Aberdeen' AND AirportCode = 'Ashley'
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"

medium pred: SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways'
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"

eval_err_num:166
medium pred: SELECT COUNT(*) AS num_Jetblue_ Airways_flights FROMFlights INNER JOIN airports ON Flights.SourceAirport = airports.AirportCode INNER JOIN airlines ON Flights.Airline = airlines.uid GROUP BY airlines.uid, flights.FlightNo
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"

eval_err_num:167
medium pred: SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND AirportCode = 'ASY'
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"

eval_err_num:168
medium pred: SELECT COUNT(*) as Num FROM flights WHERE airline = 'United' AND destAirport = 'ASY'
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"

eval_err_num:169
medium pred: SELECT COUNT(DISTINCT flight.Airline) AS NumOfFlights FROM flight INNER JOIN airlines ON flight.Airline = airlines.uid INNER JOIN airports ON flight.SourceAirport = airports.AirportCode AND airlines.Abbreviation = 'United' WHERE airports.City = 'AHD'
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"

eval_err_num:170
medium pred: SELECT COUNT(*) AS NumOfFlights FROM Flights WHERE SourceAirport = 'AHD' AND DestAirport = 'United'
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"

eval_err_num:171
hard pred: SELECT COUNT(*) FROM flights AS f INNER JOIN airports AS a ON a.AirportCode = f.SourceAirport INNER JOIN airports AS d ON d.AirportCode = f.Dest Airport WHERE a.City = 'Aberdeen'
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"

eval_err_num:172
hard pred: SELECT COUNT(*) as num_UA_flights FROM airlines JOIN airports ON airlines.uid = airports.uid JOINFlights ON airports.AirportCode = Flights.AirportCode WHERE airlines.Airline = 'UA' AND airports.City = 'Aberdeen'
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"

eval_err_num:173
extra pred: SELECT City, COUNT(*) FROM Flights GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1

eval_err_num:174
extra pred: SELECT City, AirportCode FROM Flights ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1

eval_err_num:175
extra pred: SELECT City FROMFlights GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1

eval_err_num:176
extra pred: SELECT City, AirportCode FROM Flights ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1

eval_err_num:177
extra pred: SELECT AirportCode FROM Flights WHERE FlightNo > (SELECT FlightNo FROM Flights WHERE AirportCode = 'ABC')
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1

eval_err_num:178
extra pred: SELECT AirportCode FROM flights WHERE FlightNo IN (SELECT FlightNo FROM flights GROUP BY FlightNo HAVING COUNT(*) > 1) AND AirportCode = 'IPE'
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1

eval_err_num:179
extra pred: SELECT AirportCode FROM flight_routes WHERE route_id = ( SELECT COUNT(*) FROM flights WHERE SourceAirport = airports.AirportCode )
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1

eval_err_num:180
extra pred: SELECT AirportCode FROMFlights ORDER BY FlightNo DESC LIMIT 1
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1

extra pred: SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT airline FROM airlines GROUP BY airline ORDER BY count(*) DESC LIMIT 1
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1

eval_err_num:181
extra pred: SELECT airline, country FROM flights GROUP BY airline, country ORDER BY COUNT(DISTINCT flightNo) DESC LIMIT 1
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1

eval_err_num:182
extra pred: SELECT airline, abbreviation, country FROM airports WHERE airportCode IN ( SELECT airportCode FROM flights WHERE flightNo > 1 )
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1

medium pred: SELECT airline FROM flights WHERE flightNo = 1 AND SourceAirport = 'AHD'
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"

eval_err_num:183
medium pred: SELECT airlines FROM Flights WHERE SourceAirport = 'AHD'
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"

medium pred: SELECT airline FROM Flights WHERE DestAirport = 'AHD'
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"

medium pred: SELECT airline FROM Flights WHERE DestAirport = 'AHD'
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"

eval_err_num:184
extra pred: SELECT * FROM airlines JOIN airports ON airlines.uid = airports.uid WHERE airports.AirportCode = 'APG' AND airports.AirportCode = 'CVO'
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"

eval_err_num:185
extra pred: SELECT Airlines.uid, Airlines.Airline, airports.AirportCode FROM Airlines INNER JOIN airports ON Airlines.uid = airports.Airline AND airports.AirportCode = 'APG' INNER JOIN airports ON Airlines.uid = airports.Airline AND airports.AirportCode = 'CVO'
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"

eval_err_num:186
extra pred: SELECT airline FROM flights WHERE sourceAirport = 'CVO' AND DestAirport = 'NOK' AND destinationAirport != 'APG'
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"

eval_err_num:187
extra pred: SELECT airline FROM airports WHERE AirportCode NOT IN ( SELECT AirportCode FROM flights WHERE SourceAirport = 'CVO' AND DestAirport = 'APG' )
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"

medium pred: SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(Airline) >= 10
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10

medium pred: SELECT airline FROM Flights WHERE flightNo >= 10
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10

eval_err_num:188
medium pred: SELECT airlines.uid FROM airlines INNER JOIN airports ON airlines.uid = airports.uid WHERE airports.AirportCode NOT IN ('IAD', 'LAX', 'OAK', 'SFO', 'SNA') GROUP BY airlines.uid HAVING COUNT(*) < 200
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200

medium pred: SELECT airline FROM flights WHERE FlightNo < 200
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200

eval_err_num:189
medium pred: SELECTFlightNo FROMflights WHEREAirline='United Airlines'
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"

eval_err_num:190
medium pred: SELECTFlightNo FROMflights WHEREAirline = 'United'
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"

eval_err_num:191
easy pred: SELECTFlightNo FROMflights WHERESourceAirport = 'APG'
easy gold: SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"

eval_err_num:192
easy pred: SELECT flightNo FROMFlights WHERESourceAirport = 'APG' AND DestAirport = 'APG'
easy gold: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"

eval_err_num:193
easy pred: SELECTFlightNo FROMflights WHERE SourceAirport = 'APG'
easy gold: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"

eval_err_num:194
medium pred: SELECTFlightNo FROMflights WHERESourceAirport = 'Aberdeen'
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"

medium pred: SELECT FlightNo FROM Flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'New York'
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"

eval_err_num:195
medium pred: SELECTFlightNo FROMflights WHERE SourceAirport = 'Aberdeen'
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"

eval_err_num:196
medium pred: SELECTFlightNo FROMFlights WHERESourceAirport = 'Aberdeen' AND DestAirport = 'Aberdeen'
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"

eval_err_num:197
hard pred: SELECT COUNT(*) FROMFlights WHERE SourceAirport = 'Aberdeen' OR DestAirport = 'Aberdeen'
hard gold: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"

eval_err_num:198
hard pred: SELECT COUNT(DISTINCT airline) AS Num flightsLanding in Aberdeen, COUNT(DISTINCT airline) AS NumFlightsLanding in Abilene FROM Flights WHERE SourceAirport = ' Aberdeen' OR DestAirport = ' Abilene'
hard gold: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"

eval_err_num:199
hard pred: SELECT AirportName FROM airports WHERE AirportCode NOT IN ( SELECT AirportCode FROM flights GROUP BY AirportCode HAVING COUNT(DISTINCT FlightNo) = 0 )
hard gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)

eval_err_num:200
hard pred: SELECT AirportCode FROM airports WHERE AirportCode NOT IN ( SELECT AirportCode FROM Flights GROUP BY AirportCode HAVING COUNT(DISTINCT FlightNo) = 0 )
hard gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)

eval_err_num:201
easy pred: CREATE TABLE " Shop " ( "Shop_ID" int PRIMARY KEY )
easy gold: SELECT count(*) FROM employee

eval_err_num:202
easy pred: SELECT COUNT(*) AS num_employees FROM employee
easy gold: SELECT count(*) FROM employee

easy pred: SELECT * FROM employee ORDER BY age ASC
easy gold: SELECT name FROM employee ORDER BY age

easy pred: SELECT name, age FROM employee ORDER BY age DESC
easy gold: SELECT name FROM employee ORDER BY age

eval_err_num:203
medium pred: SELECT city, COUNT(*) as number_of_employees FROM employee GROUP BY city
medium gold: SELECT count(*) ,  city FROM employee GROUP BY city

eval_err_num:204
medium pred: SELECT City, COUNT(*) as Num_Employee FROM employee GROUP BY City ORDER BY City, Num_Employee DESC
medium gold: SELECT count(*) ,  city FROM employee GROUP BY city

medium pred: SELECT City FROM employee GROUP BY City HAVING COUNT(DISTINCT Employee_ID) > 1
medium gold: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1

eval_err_num:205
medium pred: SELECT * FROM `employee` WHERE `Employee_ID` IN (SELECT `Employee_ID` FROM `hiring` WHERE `Shop_ID` IN (SELECT `Shop_ID` FROM `shop` WHERE `Name` = 'my_city')) AND `Age` < 30
medium gold: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1

eval_err_num:206
medium pred: SELECT location, COUNT(*) as num_ shops FROM "shop" GROUP BY location
medium gold: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION

eval_err_num:207
medium pred: SELECT location, COUNT(*) as num_shops FROM "shop" GROUP BY location ORDER BY location
medium gold: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION

eval_err_num:208
medium pred: SELECT Shop.Manager_name, Shop. District FROM Shop INNER JOIN hiring ON Shop.Shop_ID = hiring.Shop_ID INNER JOIN employee ON hiring.Employee_ID = employee.Employee_ID GROUP BY Shop.Manager_name,Shop. District ORDER BY COUNT(*) DESC LIMIT 1
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1

eval_err_num:209
medium pred: SELECT shop.Manager_name, shop. District FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID JOIN employee ON hiring.Employee_ID = employee.Employee_ID GROUP BY shop.Manager_name, shop. District ORDER BY COUNT(*) DESC LIMIT 1
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1

eval_err_num:210
medium pred: SELECT MIN(Number_products), MAX(Number_products) FROM "shop"
medium gold: SELECT min(Number_products) ,  max(Number_products) FROM shop

eval_err_num:211
medium pred: SELECT MIN(Number_products), MAX(Number_products) FROMshop
medium gold: SELECT min(Number_products) ,  max(Number_products) FROM shop

medium pred: SELECT Shop.Name, Shop.Location, Shop.District FROM Shop JOIN Hiring ON Shop.Shop_ID = Hiring.Shop_ID JOIN Employee ON Hiring.Employee_ID = Employee.Employee_ID ORDER BY COUNT(*) DESC LIMIT 0, 3
medium gold: SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC

eval_err_num:212
medium pred: SELECT Shop_ID, Name, Location, District FROM "shop" ORDER BY "Number_products" DESC LIMIT 10
medium gold: SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC

eval_err_num:213
hard pred: SELECT Shop.Name FROM "shop" INNER JOIN ("employee" as Shop_Employee ON Shop.Shop_ID = Shop_Employee.Shop_ID) ON Shop.Number_products > (SELECT AVG(Number_products) FROM "shop") ORDER BY Shop.Name ASC
hard gold: SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)

eval_err_num:214
hard pred: SELECT t1.Name FROM "shop" t1 JOIN "employee" t2 ON t1.Shop_ID = t2.Shop_ID WHERE t2.Number_products > (SELECT AVG(Number_products) FROM "shop" WHERE Shop_ID = t1.Shop_ID)
hard gold: SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)

eval_err_num:215
extra pred: SELECT Employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID JOINshop ON evaluation.Shop_ID =shop.Shop_ID JOIN hiring ONshop.Shop_ID = hiring.Shop_ID GROUP BY employee.Employee_ID ORDER BY count(*) DESC LIMIT 1
extra gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1

eval_err_num:216
extra pred: SELECT Employee.Name FROM employee INNER JOIN evaluating ON employee.Employee_ID = evaluating.Employee_ID INNER JOIN shop ON evaluating.Shop_ID = shop.Shop_ID GROUP BY Employee.Name ORDER BY Bonus DESC LIMIT 1
extra gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1

eval_err_num:217
hard pred: SELECT Employee.Name FROM employee INNER JOIN hiring ON Employee.Employee_ID = hiring.Employee_ID INNER JOIN evaluation ON hiring.Employee_ID = evaluation.Employee_ID GROUP BY Employee.Name ORDER BY MAX(bonus) DESC LIMIT 1
hard gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1

eval_err_num:218
hard pred: SELECT Employee_Name FROM employee JOINuring ( SELECT Employee_ID, MAX(bonus) AS Max_ Bonus FROM evaluation GROUP BY Employee_ID ) AS Max_ Bonus_Table ON employee.Employee_ID = Max_ Bonus_Table.Employee_ID
hard gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1

hard pred: SELECT Name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation WHERE Year_awarded = '2022' )
hard gold: SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)

eval_err_num:219
hard pred: SELECT Name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation WHERE Year_awarded = "2021" ANDbonus = 0 )
hard gold: SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)

eval_err_num:220
extra pred: The name of the shop that is hiring the largest number of employees is "The Great American Novelty Store".
extra gold: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:221
extra pred: SELECT Shop.Name FROM Shop INNER JOIN hiring ON Shop.Shop_ID =iling.Shop_ID INNER JOIN employee ONiling.Employee_ID =employee.Employee_ID GROUP BY Shop.Name ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:222
hard pred: SELECT DISTINCT Shop.Name FROM Shop LEFT JOINhiring ON Shop.Shop_ID =iling.Shop_ID LEFT JOIN employee ONiling.Employee_ID = Employee.Employee_ID WHEREiling.Is_full_time = false GROUP BY Shop.Name HAVING COUNT(*) = 0
hard gold: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)

eval_err_num:223
hard pred: SELECT * FROM "shop" WHERE "Shop_ID" = NULL
hard gold: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)

eval_err_num:224
medium pred: SELECT Shop_ID, COUNT(*) as Num_Employees FROM "hiring" GROUP BY Shop_ID ORDER BY Num_Employees DESC
medium gold: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name

eval_err_num:225
medium pred: SELECT Shop_ID, COUNT(*) as Num_Employees FROM employee GROUP BY Shop_ID ORDER BY Shop_ID
medium gold: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name

easy pred: SELECT SUM( Bonus ) FROM evaluation GROUP BY Employee_ID
easy gold: SELECT sum(bonus) FROM evaluation

eval_err_num:226
easy pred: SELECT SUM( Bonus ) AS total_ Bonus FROM evaluation WHERE Employee_ID in ( SELECT Employee_ID FROM employee WHERE Name = 'John Doe' )
easy gold: SELECT sum(bonus) FROM evaluation

eval_err_num:227
easy pred: CREATE TABLE "hiring" ( "Shop_ID" int, "Employee_ID" int, "Start_from" text, "Is_full_time" bool, PRIMARY KEY ("Shop_ID"), FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`) )
easy gold: SELECT * FROM hiring

eval_err_num:228
hard pred: `SELECT District FROM shop WHERE Number_products > 10000 AND Number_products < 3000 GROUP BY District HAVING COUNT(*) > 1 AND COUNT(*) < 3`
hard gold: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000

hard pred: SELECT District FROM Shop WHERE Number_products < 3000 AND Number_products > 10000
hard gold: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000

eval_err_num:229
easy pred: CREATE TABLE "shop" ( "Shop_ID" int, "Name" text, "Location" text, "District" text, "Number_products" int, "Manager_name" text, PRIMARY KEY ("Shop_ID"), UNIQUE KEY ("Location") )
easy gold: SELECT count(DISTINCT LOCATION) FROM shop

eval_err_num:230
easy pred: SELECT COUNTDISTINCT(Location) as num_distinct_store_location FROM "shop"
easy gold: SELECT count(DISTINCT LOCATION) FROM shop

eval_err_num:231
easy pred: SELECT COUNT(*) as num_documents FROM Documents
easy gold: SELECT count(*) FROM Documents

medium pred: SELECT Document_ID, Document_Name, Document_Description FROM Documents GROUP BY Document_ID, Document_Name, Document_Description
medium gold: SELECT document_id ,  document_name ,  document_description FROM Documents

medium pred: SELECT Document_Name, Templates.Template_ID FROM Documents JOIN Paragraphs ON Documents.Template_ID = Paragraphs.Document_ID WHERE Document_Description like '%w%'
medium gold: SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"

eval_err_num:232
medium pred: SELECT Document_ID,Template_ID,Document_Description FROM Documents WHERE Document_Name=' Robbin CV'
medium gold: SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"

eval_err_num:233
easy pred: SELECT COUNT(DISTINCTTemplate_Type_Code) as Num_Templates FROM Templates GROUP BYTemplate_Type_Code
easy gold: SELECT count(DISTINCT template_id) FROM Documents

eval_err_num:234
easy pred: SELECT COUNT(DISTINCT Template_Type_Code) AS Num_templates FROM Templates INNER JOIN Document ON Templates.Template_ID = Document.Template_ID
easy gold: SELECT count(DISTINCT template_id) FROM Documents

eval_err_num:235
medium pred: SELECT COUNT(*) FROM Documents WHERETemplate_ID = 1
medium gold: SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'

eval_err_num:236
medium pred: `SELECT COUNT(*) FROM Documents WHERETemplate_ID IN (SELECTTemplate_ID FROMRef_Template_Types WHERETemplate_Type_Code='PPT')`
medium gold: SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'

eval_err_num:237
medium pred: SELECT t.Template_ID, COUNT(d.Document_ID) FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID
medium gold: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id

eval_err_num:238
medium pred: SELECT Document_ID, COUNT(*) FROM Documents WHERE Template_ID IN ( SELECT Template_ID FROM Templates GROUP BYTemplate_ID HAVING COUNT(*) > 1 )
medium gold: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id

eval_err_num:239
extra pred: SELECTTemplate_ID,Template_Type_CodeFROMDocumentsORDER BYDocument_Count DESCLIMIT 1
extra gold: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:240
extra pred: SELECT Template_ID, Template_Type_Code FROM Documents GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:241
easy pred: SELECT Template_ID FROM Templates GROUP BYTemplate_ID HAVING COUNT(DISTINCT Document_ID) > 1
easy gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1

eval_err_num:242
easy pred: SELECTTemplate_IDFROMDocumentsWHERETemplate_IDIn(SELECTTemplate_IDFROMDocumentsGROUP BYTemplate_IDHAVINGCount(*)大于1)
easy gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1

hard pred: SELECT Template_ID FROM Templates WHERE Template_ID NOT IN ( SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING COUNT(*) = 0 )
hard gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents

eval_err_num:243
hard pred: SELECTTemplate_IDFROMDocumentsWHERETemplate_IDNOT IN(SELECTTemplate_IDFROMDocuments)
hard gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents

eval_err_num:244
easy pred: SELECT COUNT(*) as Num_Templates FROM Templates
easy gold: SELECT count(*) FROM Templates

eval_err_num:245
medium pred: SELECTTemplate_ID,Version_Number,Template_Type_CodeFROM Templates
medium gold: SELECT template_id ,  version_number ,  template_type_code FROM Templates

eval_err_num:246
medium pred: SELECTTemplate_ID,Version_Number,Template_Type_Code FROM Templates
medium gold: SELECT template_id ,  version_number ,  template_type_code FROM Templates

eval_err_num:247
easy pred: SELECT DISTINCTTemplate_Type_Code FROM Templates
easy gold: SELECT DISTINCT template_type_code FROM Templates

easy pred: SELECT Template_Type_Code FROM Ref_Template_Types ORDER BY Template_Type_Code DESC
easy gold: SELECT DISTINCT template_type_code FROM Templates

eval_err_num:248
medium pred: SELECTTemplate_IDFROMTemplatesWHERETemplate_Type_Code='PP'; SELECTTemplate_IDFROMTemplatesWHERETemplate_Type_Code='PPT'
medium gold: SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"

eval_err_num:249
medium pred: SELECTTemplate_IDFROMDocumentsWHERETemplate_Type_Code='PP'ORTemplate_Type_Code='PPT'
medium gold: SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"

eval_err_num:250
easy pred: SELECT COUNT(DISTINCT Template_Type_Code) AS Num_Templates FROM Templates WHERE Template_Type_Code = 'CV'
easy gold: SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"

eval_err_num:251
easy pred: SELECT COUNT(*) FROM Templates WHERETemplate_Type_Code='CV'
easy gold: SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"

medium pred: SELECT Templates.Version_Number, Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Templates.Version_Number > 5
medium gold: SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5

eval_err_num:252
medium pred: SELECTTemplate_Type_Code, COUNT(DISTINCTTemplate_Type_Code) AS Num_Templates FROM Ref_Template_Types GROUP BYTemplate_Type_Code
medium gold: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code

eval_err_num:253
hard pred: SELECTTemplate_Type_Code FROMRef_Template_Types GROUP BYTemplate_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1

eval_err_num:254
hard pred: SELECT t.Template_Type_Code FROM Templates t JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code GROUP BY t.Template_Type_Code HAVING COUNT(*) > 1
hard gold: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1

eval_err_num:255
easy pred: SELECTTemplate_Type_Code FROMRef_Template_Types WHERETemplate_Type_Code IN ( SELECTTemplate_Type_Code FROMTemplates WHEREVersion_Number < 3 )
easy gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3

eval_err_num:256
easy pred: SELECTTemplate_Type_CodeFROMRef_Template_TypesWHERETemplate_Type_Description='Template types with fewer than 3 templates'
easy gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3

medium pred: SELECT template_type_code, MIN(version_number) FROM Templates GROUP BY template_type_code
medium gold: SELECT min(Version_Number) ,  template_type_code FROM Templates

eval_err_num:257
medium pred: SELECTTemplate_ID,Template_Type_CodeFROM TemplatesORDER BYVersion_Number DESCLIMIT 1
medium gold: SELECT min(Version_Number) ,  template_type_code FROM Templates

eval_err_num:258
medium pred: SELECT Templates.Template_Type_Code FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base'
medium gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"

eval_err_num:259
medium pred: SELECTTemplate_Type_CodeFROMDocumentsWHEREDocument_Name='Data base'
medium gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"

eval_err_num:260
medium pred: SELECT Document_Name FROM Documents WHERETemplate_Type_Code = ' BK'
medium gold: SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"

medium pred: SELECT Document_Name FROM Documents WHERE Template_ID = ' BK'
medium gold: SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"

eval_err_num:261
medium pred: SELECT t.Template_Type_Code, COUNT(*) as Num_Docs FROM Templates t JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code
medium gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code

eval_err_num:262
medium pred: SELECTTemplate_Type_Code, COUNT(*)FROM Templates GROUP BYTemplate_Type_Code
medium gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code

extra pred: SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1

eval_err_num:263
extra pred: SELECT Template_Type_Code as most_common_template_type FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1

eval_err_num:264
hard pred: SELECTTemplate_Type_CodeFROMRef_Template_TypesWHERETemplate_Type_CodeNOT IN(SELECTTemplate_Type_CodeFROMDocuments)
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id

eval_err_num:265
hard pred: SELECTTemplate_Type_CodeFROMRef_Template_TypesWHERETemplate_Type_CodeNOT IN ( SELECTTemplate_Type_CodeFROMTemplates SELECTTemplate_Type_CodeFROMDocuments )
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id

eval_err_num:266
medium pred: SELECTTemplate_Type_Code,Template_Type_DescriptionFROMRef_Template_Types
medium gold: SELECT template_type_code ,  template_type_description FROM Ref_template_types

medium pred: SELECT Template_Type_Code,Template_Type_Description FROM Ref_Template_Types ORDER BY Template_Type_Code,Template_Type_Description
medium gold: SELECT template_type_code ,  template_type_description FROM Ref_template_types

eval_err_num:267
easy pred: SELECT t2.Template_Type_Description FROM Templates t1 INNER JOIN Ref_Template_Types t2 ON t1.Template_Type_Code = t2.Template_Type_Code AND t1.Version_Number = t2.Version_Number AND t1.Date_Effective_From <= t2.Date_Effective_To INNER JOIN Document d1 ON t1.Template_ID = d1.Template_ID INNER JOIN Document d2 ON d1.Document_Name = d2.Document_Name AND d1.Document_Description = d2.Document_Description WHERE t2.Template_Type_Code = "AD"
easy gold: SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"

eval_err_num:268
easy pred: SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types INNER JOIN Templates ONRef_Template_Types.Template_Type_Code=Templates.Template_Type_Code INNER JOIN Documents ON Templates.Template_ID=Documents.Template_ID WHERE Ref_Template_Types.Template_Type_Code='AD'
easy gold: SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"

eval_err_num:269
easy pred: SELECTTemplate_Type_CodeFROMRef_Template_TypesWHERETemplate_Type_Description='Book'
easy gold: SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"

eval_err_num:270
easy pred: SELECT Template_Type_Code FROM Ref_Template_Types WHERETemplate_Type_Description='Book'
easy gold: SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"

eval_err_num:271
medium pred: SELECT DISTINCT t1.Template_Type_Description FROM Templates t1 INNER JOIN Ref_Template_Types t2 ON t1.Template_Type_Code = t2.Template_Type_Code WHERE t2.Template_Type_Description IS NOT NULL
medium gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID

eval_err_num:272
medium pred: SELECT Template_Type_Description, Count(*) as Num_Descriptions FROM Ref_Template_Types WHERE Template_Type_Code IN ( SELECTTemplate_Type_Code FROM Templates GROUP BYTemplate_Type_Code ) GROUP BY Template_Type_Description HAVING Count(*) > 0
medium gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID

medium pred: SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'Presentation'
medium gold: SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"

eval_err_num:273
medium pred: SELECT Templates.Template_ID FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Ref_Template_Types.Template_Type_Description = 'Presentation' GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Ref_Template_Types.Template_Type_Description) = 1
medium gold: SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"

eval_err_num:274
easy pred: SELECT COUNT(*) as total_paragraphs FROM Paragraphs WHERE Document_ID = 1
easy gold: SELECT count(*) FROM Paragraphs

eval_err_num:275
easy pred: SELECT COUNT(*) AS Num_Paragraphs FROM Paragraphs WHERE Document_ID = ( SELECT Document_ID FROM Documents WHERETemplate_ID IN ( SELECTTemplate_IDFROMRef_Template_Types ) )
easy gold: SELECT count(*) FROM Paragraphs

eval_err_num:276
medium pred: SELECT COUNT(*) AS Num_Paragraphs FROM Paragraphs WHERE Document_Name = 'Summer Show'
medium gold: SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'

eval_err_num:277
medium pred: SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID INNER JOIN Ref_Template_Types ON Paragraphs.Template_ID = Ref_Template_Types.Template_ID WHERE Document_Name = 'Summer Show'
medium gold: SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'

medium pred: SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea'
medium gold: select other_details from paragraphs where paragraph_text like 'korea'

medium pred: SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea'
medium gold: select other_details from paragraphs where paragraph_text like 'korea'

eval_err_num:278
medium pred: SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_Name = 'Welcome to NY'
medium gold: SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'

eval_err_num:279
medium pred: SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_Name = 'Welcome toNY'
medium gold: SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'

eval_err_num:280
medium pred: SELECT Paragraphs.Paragraph_Text FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID INNER JOIN Ref_Template_Types ON Paragraphs.Template_ID = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Name = 'Customer reviews' AND Ref_Template_Types.Template_Type_Description = ' reviews'
medium gold: SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"

eval_err_num:281
medium pred: SELECT Paragraph_Text FROM Paragraphs WHERE Document_Name = 'Customer reviews'
medium gold: SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"

eval_err_num:282
medium pred: SELECT Document_ID, COUNT(*) as Num_Paragraphs FROM Documents GROUP BY Document_ID ORDER BY Document_ID
medium gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id

eval_err_num:283
medium pred: SELECT Document_ID, Document_Name, COUNT(Paragraph_ID) FROM Documents GROUP BY Document_ID, Document_Name
medium gold: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id

eval_err_num:284
medium pred: SELECT Document_ID, Document_Name, COUNT(*) as Paragraph_Count FROM Documents GROUP BY Document_ID, Document_Name
medium gold: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id

eval_err_num:285
easy pred: `SELECT Document_ID FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents GROUP BY Document_IDHAVING COUNT(DISTINCT Paragraph_ID) >= 2)`
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2

easy pred: SELECT Document_ID FROM Paragraphs WHERE Paragraph_ID IN (SELECT Paragraph_ID FROM Paragraphs WHERE Paragraph_ID > 1) AND Document_ID IN (SELECT Document_ID FROM Documents)
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2

eval_err_num:286
extra pred: SELECT Document_ID, Document_Name FROM Paragraphs GROUP BY Document_ID, Document_Name ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:287
extra pred: SELECT Document_ID, Document_Name FROM Documents WHERE Template_ID = ( SELECT Template_ID FROM Paragraphs WHERE Paragraph_ID IN ( SELECT Paragraph_ID FROM Paragraphs GROUP BY Paragraph_ID ORDER BY COUNT(*) DESC LIMIT 1 ) )
extra gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1

hard pred: SELECT Document_ID FROM Paragraphs WHERE Document_ID NOT IN (SELECT Document_ID FROM Documents) ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1

eval_err_num:288
hard pred: SELECT Document_ID FROM Documents WHERETemplate_ID IN ( SELECTTemplate_IDFROMParagraphs GROUP BYTemplate_ID ORDER BY COUNT(*) DESC LIMIT 1 )
hard gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1

eval_err_num:289
easy pred: Document_ID INTEGER PRIMARY KEY, Paragraph_ID INTEGER PRIMARY KEY,
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2

eval_err_num:290
easy pred: SELECT Document_ID FROM Paragraphs WHERE Paragraph_ID IN (1, 2)
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2

hard pred: SELECT Document_ID, Paragraph_Text FROM Paragraphs WHERE Paragraph_Text = 'Brazil' AND Paragraph_Text = ' Ireland'
hard gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'

hard pred: SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil' AND Paragraph_Text = 'Ireland'
hard gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'

eval_err_num:291
easy pred: SELECT COUNT(*) AS num_teachers FROM "teacher"
easy gold: SELECT count(*) FROM teacher

eval_err_num:292
easy pred: SELECT COUNT(*) as total_count FROM teacher
easy gold: SELECT count(*) FROM teacher

easy pred: SELECT Name FROM teacher ORDER BY Age DESC
easy gold: SELECT Name FROM teacher ORDER BY Age ASC

easy pred: SELECT Name FROM teacher ORDER BY Age DESC
easy gold: SELECT Name FROM teacher ORDER BY Age ASC

eval_err_num:293
medium pred: SELECT * FROM "teacher" WHERE "Teacher_ID" IN ( SELECT "Teacher_ID" FROM "course_arrange" WHERE "Course_ID" = ( SELECT "Course_ID" FROM "course" WHERE "Staring_Date" = ?" ) )
medium gold: SELECT Age ,  Hometown FROM teacher

eval_err_num:294
medium pred: SELECT Teacher_ID, Age, Hometown FROM `teacher` GROUP BY Teacher_ID ORDER BY Age DESC, Hometown ASC
medium gold: SELECT Age ,  Hometown FROM teacher

eval_err_num:295
easy pred: The names of the teachers whose hometown is not \"Little Lever Urban District\" are: - \"Alice\" - \"Bob\" - \"Charlie\" - \"David\" - \"Eric\" - \"Freya\" - \"Helen\" - \"John\" - \"Jane\" - \"Mike\" - \"Paul\" - \"Peter\" - \"Robert\" Note: This is a sample query, and the answer may vary depending on the database management system (DBMS) being used.
easy gold: select name from teacher where hometown != "little lever urban district"

medium pred: SELECT Name FROM teacher WHERE Age >= 32 AND Age <= 33
medium gold: SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33

eval_err_num:296
medium pred: SELECT * FROM "teacher" WHERE "Age" = 32 OR "Age" = 33
medium gold: SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33

eval_err_num:297
medium pred: SELECT * FROM `teacher` WHERE `Teacher_ID` = ( SELECT MIN(Teacher_ID) FROM `teacher` )
medium gold: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1

eval_err_num:298
medium pred: SELECT * FROM "teacher" WHERE Age = ( SELECT min(Age) FROM "teacher" GROUP BY "Teacher_ID" )
medium gold: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1

eval_err_num:299
medium pred: SELECT hometown, COUNT(*) FROM `teacher` GROUP BY hometown ORDER BY COUNT(*) DESC
medium gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown

eval_err_num:300
medium pred: SELECT hometown, COUNT(*) as total_teachers FROM course_arrange GROUP BY hometown
medium gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown

eval_err_num:301
hard pred: SELECT * FROM ( SELECT *, COUNT(*) as count FROM "teacher" GROUP BY "teacher"."Hometown" ) t ORDER BY count DESC LIMIT 1
hard gold: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:302
hard pred: SELECT hometown FROM `teacher` GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:303
easy pred: SELECT hometown FROM "teacher" GROUP BY hometown HAVING COUNT(DISTINCT "teacher"."Hometown") >= 2
easy gold: SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2

eval_err_num:304
easy pred: SELECT t1.Hometown FROM "teacher" t1 INNER JOIN "course_arrange" t2 ON t1.Teacher_ID = t2.Teacher_ID GROUP BY t1.Hometown HAVING COUNT(DISTINCT t2.Hometown) >= 2
easy gold: SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2

eval_err_num:305
medium pred: SELECT t.Name, c.Course FROM teacher t JOIN course_arrange c ON t.Teacher_ID = c.Teacher_ID
medium gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID

eval_err_num:306
medium pred: SELECT name, course FROM teacher
medium gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID

eval_err_num:307
hard pred: SELECT t.Name, c.Course FROM teacher t JOIN course c ON t.Teacher_ID = c.Teacher_ID JOIN course_arrange a ON c.Course_ID = a.Course_ID ORDER BY t.Name ASC
hard gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name

eval_err_num:308
hard pred: SELECT t.Name, c.Course FROM "teacher" t JOIN "course" c ON t.Teacher_ID = c.Course_ID ORDER BY t.Name ASC
hard gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name

eval_err_num:309
hard pred: SELECT * FROM teacher WHERETeacher_ID = ( SELECT Course_ID FROM course WHERE Staring_Date = '2022-01-01' )
hard gold: SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"

eval_err_num:310
hard pred: CREATE TABLE "teacher" ( "Teacher_ID" int, "Name" text, "Age" text, "Hometown" text, PRIMARY KEY ("Teacher_ID") )
hard gold: SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"

eval_err_num:311
medium pred: SELECT t.Name, count(c.Course_ID) AS Course_Count FROM teacher t JOIN course_arrange c ON t.Teacher_ID = c.Teacher_ID GROUP BY t.Name
medium gold: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name

eval_err_num:312
medium pred: SELECT name, COUNT(*) as courses FROM teacher GROUP BY name
medium gold: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name

eval_err_num:313
medium pred: SELECT * FROM `teacher` WHERE `Teacher_ID` IN ( SELECT `Teacher_ID` FROM `course_arrange` GROUP BY `Teacher_ID` HAVING COUNT(*) >= 2 )
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2

eval_err_num:314
medium pred: SELECT name FROM "teacher" WHERETeacher_ID IN ( SELECT Teacher_ID FROM "course_arrange" WHERE Course_ID IN ( SELECT Course_ID FROM "course" ) GROUP BYTeacher_ID HAVING COUNT(DISTINCT Course_ID) >= 2 )
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2

eval_err_num:315
hard pred: SELECT * FROM `teacher` WHERE `Teacher_ID` NOT IN (SELECT `Teacher_ID` FROM `course_arrange`)
hard gold: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)

eval_err_num:316
hard pred: SELECT Name FROM teacher WHERE Course_ID NOT IN (SELECT Course_ID FROM course_arrange)
hard gold: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)

eval_err_num:317
easy pred: SELECT COUNT(DISTINCT visitor_ID) WHERE Age < 30
easy gold: SELECT count(*) FROM visitor WHERE age  <  30

eval_err_num:318
medium pred: SELECT name FROM "visitor" AS v WHERE level_of_ Membership > 4 ORDER BY level_of_ Membership DESC
medium gold: SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC

eval_err_num:319
easy pred: SELECT AVG(Age) FROM "visitor" WHERE Level_of_membership < 4
easy gold: SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4

eval_err_num:320
medium pred: SELECT visitor.Name, visitor.Level_of_ Membership FROM visit, museum WHERE visit. Museum_ID = museum. Museum_ID AND visitor.Level_of_ Membership > 4 ORDER BY visitor.Age
medium gold: SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC

medium pred: SELECT Museum.museum_ID, Museum.Name FROM museum JOIN Visit ON museum.museum_ID = Visit.museum_ID JOIN Visitor ON Visit.museum_ID = Visitor.ID GROUP BY Museum.museum_ID ORDER BY COUNT(*) DESC LIMIT 1
medium gold: SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1

eval_err_num:321
easy pred: SELECT AVG(Num_of_Staff) FROM "museum" WHERE Open_Year < 2009
easy gold: SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009

medium pred: SELECT Museum_ID, Open_Year FROM museum
medium gold: SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'

eval_err_num:322
hard pred: SELECT Museum.Name FROM museum JOIN Visit ON Museum.Museum_ID = Visit. Museum_ID WHERE Visit.Num_of_ Staff > (SELECT MIN(Num_of_ Staff) FROM museum WHERE Open_Year > 2010)
hard gold: SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)

eval_err_num:323
medium pred: SELECT m.ID, v.Name, v.Age FROM Museum m JOIN Visit v ON v. Museum_ID = m. Museum_ID JOIN Visit v ON v.visitor_ID = v.ID GROUP BY m.ID, v.Name, v.Age HAVING COUNT(DISTINCT v. Museum_ID) > 1
medium gold: SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1

eval_err_num:324
extra pred: SELECT Museum.ID, Museum.Name, visitors.ID, visitors.Name, visitors.Level_of_ Membership, sum(visits.Total_Spent) astotal_spent FROM Museum JOIN visitors ON Museum.ID = visitors. Museum_ID JOIN visit ON visitors.ID = visit.visitor_ID GROUP BY Museum.ID, Museum.Name, visitors.ID, visitors.Name, visitors.Level_of_ Membership ORDER BY total_spent DESC LIMIT 1
extra gold: SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1

eval_err_num:325
extra pred: SELECT Museum_ID, Name FROM `visit` GROUP BY Museum_ID ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1

eval_err_num:326
hard pred: SELECT \" Museum\" AS name FROM \"museum\" WHERE \" Museum\".\"Num_of_Staff\" = 0
hard gold: SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)

eval_err_num:327
hard pred: SELECT Museum.Name, visitors.Age, visitors.Level_of_ membership, museum.Num_of_staff, museum.Open_Year, SUM(visits.Num_of_Ticket) AS Num_of_Ticket_ Sales FROM Museum JOIN visitors ON museums.ID = visitors. Museum_ID JOIN visit ON museum.ID = visit. Museum_ID JOIN visit.访客_ID ON visitors.ID = visit.访客_ID GROUP BY Museum.Name, visitors.Age, visitors.Level_of_ membership, museum.Num_of_staff, museum.Open_Year ORDER BY Num_of_Ticket_Sales DESC LIMIT 1
hard gold: SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1

eval_err_num:328
medium pred: SELECT AVG(Num_of_Ticket) AS avg_num_ticket, MAX(Num_of_Ticket) AS max_num_ticket FROM visit GROUP BY Museum_ID, visitor_ID
medium gold: SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit

eval_err_num:329
medium pred: SELECT SUM(Total_spent) FROM "visit" WHERE visitor_ID IN (SELECT ID FROM "visitor" WHERE Level_of_ Membership = 1)
medium gold: SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1

eval_err_num:330
extra pred: SQL NOT GET: may be TIMEOUT
extra gold: SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011

eval_err_num:331
extra pred: SELECT COUNT(DISTINCT visitor) FROM "visit" WHERE Museum_ID NOT IN ( SELECT Museum_ID FROM "museum" WHERE Open_Year >= 2010 )
extra gold: SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)

medium pred: SELECT COUNT( Museum_ID ) FROM Museum WHERE Open_Year > 2013 OR Open_Year < 2008
medium gold: SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008

eval_err_num:332
easy pred: SELECT COUNT(*) as total_player_count FROM players
easy gold: SELECT count(*) FROM players

eval_err_num:333
easy pred: The number of players in the players table is 50, with 40 players being born on DATE and the other 10 players being born on DATE.
easy gold: SELECT count(*) FROM players

easy pred: select count(distinct match_num) from matches
easy gold: SELECT count(*) FROM matches

eval_err_num:334
medium pred: SELECT p.first_name, p.birth_date FROM players p WHERE p.country_code = 'USA'
medium gold: SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'

eval_err_num:335
medium pred: SELECT AVG(loser_age) AS avg_age, player_id FROM matches GROUP BY player_id; SELECT AVG(winner_age) AS avg_age, player_id FROM matches GROUP BY player_id
medium gold: SELECT avg(loser_age) ,  avg(winner_age) FROM matches

eval_err_num:336
medium pred: SELECT AVG(LOSER_AGE) as avg_losser_age, AVG(winner_AGE) as avg_winner_age FROM matches GROUP BY loser_id, winner_id
medium gold: SELECT avg(loser_age) ,  avg(winner_age) FROM matches

eval_err_num:337
easy pred: SELECT AVG(winner_rank) AS avg_winner_rank FROM matches GROUP BY winner_id
easy gold: SELECT avg(winner_rank) FROM matches

eval_err_num:338
easy pred: SELECT AVG(winner_rank) FROM ( SELECTwinner_rank, COUNT(*) as total_matches FROM matches GROUP BY winner_rank ORDER BY total_matches DESC ) match_results
easy gold: SELECT avg(winner_rank) FROM matches

eval_err_num:339
easy pred: SELECT MAX(loser_rank) AS highest_rank FROM matches; ```
easy gold: SELECT min(loser_rank) FROM matches

eval_err_num:340
easy pred: SELECT MAX(loser_rank) AS best_rank FROM matches
easy gold: SELECT min(loser_rank) FROM matches

eval_err_num:341
easy pred: select count(DISTINCT `country_code`) as `num_DISTINCT_country_ codes` from `players`
easy gold: SELECT count(DISTINCT country_code) FROM players

eval_err_num:342
easy pred: SELECT COUNTDISTINCT(player_id) as count_distinct_country FROM rankings
easy gold: SELECT count(DISTINCT country_code) FROM players

eval_err_num:343
easy pred: SELECT COUNT(DISTINCT name) AS num_distinct_losses FROM matches
easy gold: SELECT count(DISTINCT loser_name) FROM matches

eval_err_num:344
easy pred: SELECT COUNT(DISTINCT winner_name) AS total_ Different_Loser_Names FROM match_list
easy gold: SELECT count(DISTINCT loser_name) FROM matches

eval_err_num:345
easy pred: SELECT t1.tourney_name FROM matches t1 INNER JOIN rankings t2 ON t1.match_num = t2.ranking_num WHERE t2.ranking_points > 10
easy gold: SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10

eval_err_num:346
easy pred: SELECT name FROM tournaments WHERE best_of = 15
easy gold: SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10

eval_err_num:347
hard pred: SELECT winner_name FROM matches WHERE match_num IN (2013, 2016) AND round = 'Best of 5'
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016

eval_err_num:348
hard pred: SELECT p1.first_name, p1.last_name, p1.hand, p1.birth_date, p1.country_code FROM players p1 INNER JOIN matches m1 ON p1.player_id = m1.loser_id INNER JOIN matches m2 ON p1.player_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016

eval_err_num:349
medium pred: `SELECT COUNT(*) FROM matches WHERE year = 2013 or year = 2016;`
medium gold: SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016

eval_err_num:350
extra pred: SELECT country_code, first_name FROM players WHERE player_id IN ( SELECT player_id FROM matches WHERE match_num = ( SELECT match_num FROM matches WHERE round = ( SELECT round FROM matches WHERE surface = ( SELECT surface FROM matches WHERE tourney_date = ( SELECT tourney_date FROM rankings WHERE ranking_point_sum > 0 ) ) ) ) )
extra gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'

eval_err_num:351
extra pred: The first names and country codes for players who won both the WTA championships and the Australian Open are: - **Emilyarina Timofte** - country code: **NZ** - **Bora Beatrizriz锌西** - country code: **MX** - **Anettett Wuerl** - country code: **NL** - **Zarina Diyas** - country code: **CA** - **Alicja Plonka** - country code: **PL** - **Novak Djokovic** - country code: **Ser** - **Nova莎拉·罗南** - country code: **SW** Note: The information about the players' names and country codes is not exhaustive, and there may be other players who have won both the WTA championships and the Australian Open.
extra gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'

eval_err_num:352
medium pred: SELECT first_name, country_code FROM players WHERE player_id = ( SELECT player_id FROM matches WHERE match_num = ( SELECT MAX(match_num) FROM matches ORDER BY year DESC LIMIT 1 ) )
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1

medium pred: SELECT first_name, country_code FROM players WHERE player_id = ( SELECT player_id FROM rankings ORDER BY ranking_date DESC LIMIT 1 )
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1

eval_err_num:353
medium pred: `SELECT first_name, last_name FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players) ORDER BY birth_date DESC;`
medium gold: SELECT first_name ,  last_name FROM players ORDER BY birth_date

eval_err_num:354
medium pred: SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.player_id JOIN ranked r ON m.player_id = r.player_id WHERE r.ranking_date >= p.birth_date AND r.ranking_date < p.birth_date + INTERVAL 1 DAY AND m.match_num = r.match_num AND m.round = r.round AND m.score = r.score AND m.surface = r.surface AND r.hand = 'L' ORDER BY p.birth_date
medium gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date

medium pred: SELECT first_name, last_name FROM players WHERE hand = 'L'; ORDER BY birth_date; ```
medium gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date

eval_err_num:355
hard pred: SELECT player_id, country_code FROM rankings WHERE ranking_points = ( SELECT COUNT(*) FROM matches WHERE match_num = ( SELECT COUNT(*) FROM rankings WHERE player_id = ranking.player_id ) )
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1

eval_err_num:356
hard pred: SELECT p.first_name, p.last_name, p.country_code FROM players p INNER JOIN rankings r ON p.player_id = r.player_id ORDER BY r.ranking_points DESC LIMIT 1
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1

hard pred: SELECT year FROM matches GROUP BY year ORDER BY count(DISTINCT winner_id) DESC LIMIT 1
hard gold: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1

hard pred: SELECT year FROM matches WHERE match_num = (SELECT MAX(match_num) FROM matches)
hard gold: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1

eval_err_num:357
hard pred: SELECT winner.name, winner.rank_points FROM matches INNER JOIN rankings ON matches.tours = ranking.tours INNER JOIN players ON ranking.player_id = players.player_id GROUP BY winner.name, winner.rank_points ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1

eval_err_num:358
hard pred: SELECT winner_name, winner_rank_points, COUNT(*) as match_wins FROM matches GROUP BY winner_name, winner_rank_points ORDER BY match_wins DESC LIMIT 1
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1

eval_err_num:359
hard pred: SELECT winner_name, winner_rank, winner_rank_points, COUNT(*) FROM rankings WHERE ranking_date = ( SELECT ranking_date FROM matches WHERE tourney_id = '2021-09-15' AND match_num = 1 GROUP BY ranking_date ORDER BY ranking_points DESC LIMIT 1 ) GROUP BY winner_name, winner_rank, winner_rank_points ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1

eval_err_num:360
hard pred: The name of the winner with the most rank points who participated in the Australian Open tournament is " Federer ".
hard gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1

eval_err_num:361
medium pred: SELECT losers.name, winner.name FROM players INNER JOIN matches ON players.player_id = matches.loser_id INNER JOIN rankings ON matches.id = ranking_date GROUP BY losers.name, winner.name HAVING COUNT(*) = (SELECT COUNT(*) FROM ranking WHERE ranking_date = ranking_date AND player_id = ranking.player_id)
medium gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1

eval_err_num:362
medium pred: The names of the winner and loser who played in the longest match are: - winner: \"Michael Jordan\" - Loser: \"CSN Michael Jordan\"
medium gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1

eval_err_num:363
medium pred: SELECT player_id, AVG(ranking_points) AS average_ranking FROM rankings GROUP BY player_id ORDER BY player_id
medium gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

eval_err_num:364
medium pred: SELECT first_name, 平均值(`ranking_points`) FROM players GROUP BY first_name ORDER BY 平均值 DESC
medium gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

eval_err_num:365
medium pred: SELECT player_id, SUM(ranking_points) AS total_ranking_points FROM rankings GROUP BY player_id ORDER BY total_ranking_points DESC
medium gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

eval_err_num:366
medium pred: SELECT first_name, SUM(ranking_points) FROM players GROUP BY first_name ORDER BY SUM(ranking_points) DESC
medium gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

eval_err_num:367
medium pred: SELECT country_code, COUNT(*) as player_count FROM players GROUP BY country_code ORDER BY player_count DESC
medium gold: SELECT count(*) ,  country_code FROM players GROUP BY country_code

eval_err_num:368
medium pred: SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code ORDER BY num_players DESC
medium gold: SELECT count(*) ,  country_code FROM players GROUP BY country_code

hard pred: select country_code from players group by country_code order by count(player_id) DESC limit 1
hard gold: SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1

eval_err_num:369
easy pred: select country_code from players where player_id in (select player_id from rankings group by country_code having count(player_id) > 50)
easy gold: SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50

eval_err_num:370
easy pred: SELECT country_code FROM players WHERE player_id IN ( SELECT player_id FROM matches WHERE match_num >= 50 )
easy gold: SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50

eval_err_num:371
medium pred: SELECT ranking_date, COUNT(*) as total_tours FROM rankings GROUP BY ranking_date ORDER BY ranking_date
medium gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date

eval_err_num:372
medium pred: SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date
medium gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date

eval_err_num:373
medium pred: SELECT years.year, COUNT(DISTINCT match_num) AS match_count FROM matches INNER JOIN years ON match_num = years.year GROUP BY years.year ORDER BY match_count DESC
medium gold: SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR

eval_err_num:374
medium pred: SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year
medium gold: SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR

eval_err_num:375
medium pred: SELECT name, rank FROM matches ORDER BY match_num LIMIT 3
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3

eval_err_num:376
medium pred: SELECT winner_name, winner_rank FROM matches WHERE match_num IN ( SELECT match_num FROM rankings WHERE ranking_date = ( SELECT ranking_date FROM rankings WHERE ranking_level = 'tournament' AND ranking_name = ' matches' AND year = 2022 ) ANDwinner_id = ranking_points + ranking_seed)
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3

eval_err_num:377
medium pred: SELECT COUNT(DISTINCT winner_id) AS num_winners FROM matches WHERE round = 1 AND surface = 'A' AND winner_hand = 'L' AND player_id IN (SELECT player_id FROM players)
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'

eval_err_num:378
medium pred: SELECT COUNT(*) AS num_left_handed_winners FROM matches WHERE loss_entry = '2022-01-01' AND winner_hand = 'LEFT' AND match_num >= 1
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'

eval_err_num:379
hard pred: SELECT player_id, Country_Code, birth_date FROM matches WHERE winner_id = ( SELECT player_id FROM rankings ORDER BY ranking_points DESC LIMIT 1 )
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1

eval_err_num:380
hard pred: SELECT player_id, player_name, birth_date FROM rankings WHERE ranking_points = ( SELECT COUNT(*) FROM matches WHERE winner_id = ranking.player_id ) ORDER BY ranking_points DESC
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1

medium pred: SELECT player_id, COUNT(*) FROM players GROUP BY hand ORDER BY COUNT(*) DESC
medium gold: SELECT count(*) ,  hand FROM players GROUP BY hand

eval_err_num:381
medium pred: SELECT COUNT(*) FROM players WHERE hand = 'A' AND player_id = ( SELECT player_id FROM matches WHERE round = 1 AND match_num > 1 ) AND player_id = ( SELECT player_id FROM matches WHERE round = 2 AND match_num > 1 ) AND player_id = ( SELECT player_id FROM matches WHERE round = 3 AND match_num > 1 ) AND player_id = ( SELECT player_id FROM matches WHERE round = 4 AND match_num > 1 ) )
medium gold: SELECT count(*) ,  hand FROM players GROUP BY hand

eval_err_num:382
easy pred: SELECT COUNT(*) as num_ships_ Captured FROM "ship" WHERE "loss_in_ battle" = 1
easy gold: SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'

eval_err_num:383
medium pred: SELECT name, tonnage FROM "battle" ORDER BY name DESC
medium gold: SELECT name ,  tonnage FROM ship ORDER BY name DESC

eval_err_num:384
medium pred: SELECT battle.name, battle.date, battle.result FROM "battle" battle JOIN "ship" lost_in_battle ON battle.id = lost_in_battle.id JOIN "Death" caused_by_ship ON lost_in_battle.id = caused_by_ship.id
medium gold: SELECT name ,  date FROM battle

eval_err_num:385
medium pred: SELECT MAX( Death.killed ) as maximum_Death, MIN( Death.injured ) as minimum_Death FROM "battle" as b JOIN "ship" as s ON s.id = b. Lost_in_battle JOIN "Death" as d ON d.caused_by_ship_id = s.id GROUP BY b.Name, s.Name, d.Name
medium gold: SELECT max(killed) ,  min(killed) FROM death

eval_err_num:386
easy pred: SELECT SUM( injured) / NUM_battleS AS average_Injuries_ caused_each_time FROM ("battle" AND "ship") t1 GROUP BY date
easy gold: SELECT avg(injured) FROM death

eval_err_num:387
medium pred: SELECT * FROM "Death" WHERE "caused_by_ship_id" = 't'
medium gold: SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'

eval_err_num:388
medium pred: - id: 1 - name: battle of the Black Sea - date: 26th of March, 1453 -bulgarian_commander: Istvan IV -latin_commander: Radoslav沙列尼科夫 -result: victory for the Christian side -ship: brig ship of the same name
medium gold: SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'

eval_err_num:389
hard pred: SELECT battle.id, battle.name FROM battle INNER JOINship ON battle.id =ship. Lost_in_battle INNER JOIN death ONship.id = death.Causes_by_ship_id GROUP BY battle.id, battle.name HAVING COUNT(DISTINCT death.killed) > 10
hard gold: SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10

eval_err_num:390
extra pred: SELECT s.id, s.name FROM "ship" s JOIN "Death" d ON s.id = d.Causes_by_ship_id GROUP BY s.id, s.name ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1

eval_err_num:391
medium pred: SELECT DISTINCT `Battle`.`name` AS `BattleName` FROM `Battle` INNER JOIN `ship` ON `Battle`.`id` = `ship`.` Lost_in_battle` INNER JOIN `Death` ON `ship`.`id` = `Death`.`Causes_by_ship_id` WHERE `Battle`.`bulgarian_commander` = 'Kaloyan' AND `Death`.`latin_commander` = 'Baldwin I'
medium gold: SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'

eval_err_num:392
easy pred: The number of different results for the battles can be determined by looking up the value of the "result" column in each of the "battle" and "ship" tables. Each value in the "result" column represents a different result for a given battle orship. Therefore, the number of different results for the battles is the number of different values in the "result" column for each of the tables.
easy gold: SELECT count(DISTINCT RESULT) FROM battle

eval_err_num:393
extra pred: SELECT COUNT(DISTINCT battle.id) FROM battle WHERE battle.result = '胜利' AND (ship.lost_in_battle = 0 AND ship.tonnage = '225')
extra gold: SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );

eval_err_num:394
extra pred: SELECT battle.name, battle.date, ship.Lost_in_battle, ship.name, ship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship FROM battle INNER JOINship ON battle.id =ship. Lost_in_battle INNER JOIN death ON ship.id = death.Causes_by_ship_id ORDER BY battle.name, Battle.date LIMIT 1
extra gold: SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'

eval_err_num:395
extra pred: SELECT * FROM "battle" WHERE id NOT IN (SELECT lost_in_battle FROM "ship")
extra gold: SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'

eval_err_num:396
medium pred: SELECT * FROM "Death" WHERE "note" LIKE '%east%'
medium gold: SELECT note FROM death WHERE note LIKE '%East%'

eval_err_num:397
medium pred: SELECT * FROM `Addresses` WHERE `address_id` IN ( SELECT `address_id` FROM `Courses` WHERE `course_id` = 1234 ) AND `address_id` IN ( SELECT `address_id` FROM `Departments` WHERE `department_id` = 5678 ) AND `address_id` IN ( SELECT `address_id` FROM `Students` WHERE `student_id` = 1234 ) AND `address_id` IN ( SELECT `address_id` FROM `Student_Enrolment` WHERE `student_enrolment_id` = 1234 ) AND `address_id` IN ( SELECT `address_id` FROM `Student_Enrolment_Courses` WHERE `student_enrolment_id` = 1234 )
medium gold: SELECT line_1 ,  line_2 FROM addresses

eval_err_num:398
easy pred: SELECT COUNT(*) as total_courses FROM Course
easy gold: SELECT count(*) FROM Courses

eval_err_num:399
easy pred: CREATE TABLE courses ( course_id INTEGER PRIMARY KEY, course_name VARCHAR(255), course_description VARCHAR(255), other_details VARCHAR(255) )
easy gold: SELECT count(*) FROM Courses

eval_err_num:400
easy pred: `SELECT course_description FROM courses WHERE course_id = 1;`
easy gold: SELECT course_description FROM Courses WHERE course_name  =  'math'

eval_err_num:401
easy pred: SELECT course_description FROM courses WHERE course_name IN ('Mathematics', 'English')
easy gold: SELECT course_description FROM Courses WHERE course_name  =  'math'

eval_err_num:402
easy pred: The zip code of the address in the city Port Chelsea is: `514-1234`
easy gold: SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'

eval_err_num:403
easy pred: The zip code for Port Chelsea is 12345.
easy gold: SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'

eval_err_num:404
extra pred: SELECT department_id, department_name FROM Departments WHERE department_id IN (SELECT degree_program_id FROMDegree_Programs GROUP BY degree_program_id HAVING COUNT(DISTINCT course_id) > (SELECT COUNT(DISTINCT course_id) FROMCourses)) AND department_id IS NOT NULL
extra gold: SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT department_id, department_name FROM departments GROUP BY department_id, department_name ORDER BY COUNT(*) DESC LIMIT 1
extra gold: select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1

eval_err_num:405
easy pred: SELECT COUNT(DISTINCT `department_id`) FROM `Degree_Programs`
easy gold: SELECT count(DISTINCT department_id) FROM Degree_Programs

eval_err_num:406
easy pred: SELECT COUNT(DISTINCT department_id) AS total_departments FROM Degree_Programs
easy gold: SELECT count(DISTINCT department_id) FROM Degree_Programs

eval_err_num:407
easy pred: SELECT COUNT(*) AS num_of_names FROMDegree_Programs
easy gold: SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs

eval_err_num:408
easy pred: SELECT COUNT(DISTINCT degree_program_id) AS total_Degrees FROM Degree_Programs GROUP BY degree_program_id
easy gold: SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs

eval_err_num:409
medium pred: SELECT COUNT(*) AS num_Degrees FROM Engineering_Departments; ```
medium gold: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'

eval_err_num:410
medium pred: SELECT COUNT(*) FROM "Degree_Programs" WHERE "department_id" = '1'
medium gold: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'

medium pred: SELECT section_name, section_description FROM Sections GROUP BY section_id
medium gold: SELECT section_name ,  section_description FROM Sections

eval_err_num:411
medium pred: SELECT section_name, section_description FROM `Sections` GROUP BY section_id
medium gold: SELECT section_name ,  section_description FROM Sections

eval_err_num:412
medium pred: SELECT course.course_name, section.section_id FROM courses JOIN sections ON course.course_id = section.course_id JOIN students ON section.course_id = students.student_id WHERE course.course_id IN ( SELECT course_id FROM courses GROUP BY course_id HAVING COUNT(DISTINCT section_id) <= 2 )
medium gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2

eval_err_num:413
medium pred: SELECT course.name, section.id FROM Course JOINSection ON course.id = section.course_id WHERE section.id < 2
medium gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2

eval_err_num:414
easy pred: SELECT lexicoographical_reverse(section_name) AS reverse_section_name FROM `students`; ```
easy gold: SELECT section_name FROM Sections ORDER BY section_name DESC

eval_err_num:415
easy pred: select t1.section_name in (select t2.section_name from courses t2 where t1.course_id = t2.course_id order by t2.section_name reverse)
easy gold: SELECT section_name FROM Sections ORDER BY section_name DESC

eval_err_num:416
extra pred: select semester_name, student_enrolment_id from Student_Enrolment where student_enrolment_id in (select semester_id from Student_Enrolment_Courses group by semester_id order by count(*) DESC limit 1)
extra gold: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:417
extra pred: SELECT s.name, s.id FROM ( SELECT course_name, COUNT(*) AS num_students FROM courses GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1 ) s JOIN students ON s.student_id = students.student_id JOIN addresses ON students.current_address_id = addresses.address_id JOIN courses ON addresses.address_id = courses.address_id JOIN departments ON courses.department_id = departments.department_id JOINDegree_Programs ON departments.department_id = degree_program_id JOIN sections ON courses.course_id = sections.course_id JOIN students ON students.current_address_id = addresses.address_id JOIN departments ON departments.department_id = degree_program_id JOIN sections ON courses.course_id = sections.course_id JOIN students ON students.student_id = students.current_address_id JOIN Student_Enrolment ON student_enrolment_id = students.student_id WHERE s.semester_id = ( SELECT semester_id FROM Semesters GROUP BY semester_id ORDER BY COUNT(*) DESC LIMIT 1 )
extra gold: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:418
medium pred: The description of the department with the substring "computer" is \"Computer Science Department\".
medium gold: SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'

eval_err_num:419
medium pred: The department description for the one whose name has the word computer is \"Computer Science Department\".
medium gold: SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'

eval_err_num:420
medium pred: SELECT students.student_id, students.first_name, students.middle_name, students.last_name FROM students JOIN Student_Enrolment_Courses ON students.student_id = student_enrolment_courses.student_id JOINDegree_Programs ON student_enrolment_courses.degree_program_id = degree_program.degree_program_id JOIN Departments ON degree_program.department_id = department.department_id WHERE student_enrolment_courses.semester_id = 1 AND degree_program.department_id = 2
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2

eval_err_num:421
medium pred: SQL NOT GET: may be TIMEOUT
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2

eval_err_num:422
hard pred: SQL NOT GET: may be TIMEOUT
hard gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'

eval_err_num:423
hard pred: SQL NOT GET: may be TIMEOUT
hard gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'

eval_err_num:424
extra pred: SELECT degree_program_name FROM Degree_Programs WHERE degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1)
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT Degree_Summary_Name FROM Degree_Programs GROUP BY Degree_Summary_Name ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1

eval_err_num:425
extra pred: SELECT degree_program_id, degree_summary_name FROM degree_ Programs GROUP BY degree_program_id ORDER BY count(*) DESC LIMIT 1
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:426
extra pred: SELECT degree_program_id, MAX(degree_summary_name) AS degree_summary FROMDegree_Programs GROUP BY degree_program_id
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:427
extra pred: Please provide the input question and theSQL code will be provided in response.
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:428
extra pred: SELECT s.student_id, s.student_name, s.middle_name, s.last_name, COUNT(*) AS enrollments FROM students s INNER JOIN Student_Enrolment s1 ON s.student_id = s1.student_id INNER JOIN Student_Enrolment_Courses s2 ON s1.student_enrolment_id = s2.student_enrolment_id WHERE s2.student_enrolment_id IS NOT NULL GROUP BY s.student_id, s.student_name, s.middle_name, s.last_name ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:429
hard pred: select semester_name from Student_Enrolment where student_enrolment_id is NULL
hard gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )

eval_err_num:430
hard pred: The name of the semester with no students enrolled would be \"Zero Studentsemester\".
hard gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )

eval_err_num:431
easy pred: CREATE TABLE `Student_Enrolment_Courses` ( `student_course_id` INTEGER NOT NULL, `course_id` INTEGER NOT NULL, `student_enrolment_id` INTEGER NOT NULL, FOREIGN KEY (`student_course_id`) REFERENCES `Student_Enrolment`(`student_enrolment_id`), FOREIGN KEY (`course_id`) REFERENCES `Courses`(`course_id`), PRIMARY KEY (`student_course_id`, `course_id`) ); -- Access the course names SELECT course_name FROM Student_Enrolment_Courses
easy gold: SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id

eval_err_num:432
easy pred: SELECT course_name FROM courses JOIN student_enrolment ON courses.course_id = student_enrolment.course_id
easy gold: SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id

eval_err_num:433
extra pred: SELECT Course_Name FROM Course_Enrollments GROUP BY Course_Name ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1

eval_err_num:434
extra pred: SELECT course_name FROM courses GROUP BY course_name ORDER BY count(DISTINCT student_id) DESC LIMIT 1
extra gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1

eval_err_num:435
extra pred: SELECT last_name FROMstudents WHERE current_address_id IN (SELECT address_id FROM addresses WHERE city = ' North Carolina') AND 永久_address_id IS NULL
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id

eval_err_num:436
extra pred: SELECT last_name FROM Students WHERE current_address_id = 1 AND 永久_address_id = 1
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id

eval_err_num:437
medium pred: SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id IN ( SELECT transcript_id FROM ( SELECT transcript_id, COUNT(*) AS num_results FROM Transcripts GROUP BY transcript_id HAVING COUNT(*) >= 2 ) AS subquery )
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2

eval_err_num:438
medium pred: SELECT transcript_date, transcript_id FROM ( SELECT transcript_date, COUNT(*) as courses FROM `Transcripts` GROUP BY transcript_date ) subquery JOIN `Transcript_Contents` ON subquery.course_id = `Transcripts`.transcript_id AND subquery.transcript_date >= `Transcripts`.transcript_date AND subquery.transcript_date <= `Transcripts`.transcript_date + INTERVAL 1 DAY GROUP BY transcript_date, transcript_id HAVING COUNT(*) >= 2
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2

eval_err_num:439
medium pred: The phone number for Timmothy Ward is: 555-1234
medium gold: SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'

eval_err_num:440
medium pred: The mobile phone number of the student named Timmothy Ward is: `123-456-7890`
medium gold: select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'

eval_err_num:441
medium pred: SELECT students.first_name, students.middle_name, students.last_name FROM students INNER JOIN Student_Enrolment ON students.student_id = student_enrolment.student_id INNER JOIN Address ON student_enrolment.address_id = address.address_id WHERE date_first_registered = ( SELECT MAX(date_first_ unregistered) FROM addresses WHERE address.address_id = address.address_id )
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1

eval_err_num:442
medium pred: SELECT s.student_id, s.current_address_id AS current_address, s. permanent_address_id AS permanent_address, a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, s.cell_Mobile_number, s.email_address, s.ssn, e.date_first_registered, e.date_left FROM students s INNER JOIN students_address a ON s.student_id = a.student_id INNER JOIN Addresses e ON a.address_id = e.address_id WHERE e.date_first_registered >= '2022-01-01' AND e.date_left <= '2022-01-01' AND s.current_address_id = e.address_id AND e.city = 'New York' AND e.zip_postcode = '10001'
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1

eval_err_num:443
medium pred: SELECT first_name, middle_name, last_name FROM students WHERE student_id = ( SELECT student_id FROM transcripts WHEREtranscript_date = ( SELECT MAX(transcript_date) FROM transcripts WHERE students.student_id = transcripts.student_id ) )
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1

eval_err_num:444
medium pred: SELECT first, middle, last FROM Students WHERE student_id = (SELECT student_id FROM Graduates ORDER BY date_first_registered DESC LIMIT 1)
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1

eval_err_num:445
easy pred: For each student who has a permanent address that is different from their current address,SELECT his_or_her_first_name FROM Students WHERE permanent_address_id != current_address_id
easy gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id

eval_err_num:446
easy pred: The first name of the student whose permanent address is different from his or her current one would be different.
easy gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id

eval_err_num:447
extra pred: SELECT address_id, SELECT * FROM addresses ORDER BY num_students DESC LIMIT 1
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:448
extra pred: SELECT a.id, a.line_1, a.line_2 FROM addresses a JOIN学生表 b ON a.address_id = b.current_address_id JOIN永久地址表 c ON a.address_id = c. permanent_address_id GROUP BY a.id, a.line_1, a.line_2 ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:449
easy pred: SELECT AVG(transcript_date) FROM ( SELECT transcript_date FROM transcripts GROUP BY transcript_id ) average_transcript_date_query
easy gold: SELECT avg(transcript_date) FROM Transcripts

eval_err_num:450
easy pred: SELECT AVG(transcript_date) AS avg_transcript_date FROM `Transcripts`
easy gold: SELECT avg(transcript_date) FROM Transcripts

eval_err_num:451
medium pred: SELECT transcript_date, other_details FROMTranscripts WHERE transcript_id = ( SELECT transcript_id FROMTranscript_Contents WHERE release_date = ( SELECT MAX(release_date) FROM transcripts WHERE transcript_id = my_transcript_id ) )
medium gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1

medium pred: SELECT transcript_date FROM Transcripts WHERE transcript_date < '2022-01-01'
medium gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1

eval_err_num:452
easy pred: SELECT COUNT(*) AS num_Transcripts FROMTranscript_Contents
easy gold: SELECT count(*) FROM Transcripts

eval_err_num:453
easy pred: SELECT COUNT(*) AS num_transcripts FROM transcripts
easy gold: SELECT count(*) FROM Transcripts

eval_err_num:454
medium pred: SELECT transcript_date FROMTranscripts
medium gold: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1

eval_err_num:455
medium pred: The last transcript released was on [[transcript_date]].
medium gold: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1

eval_err_num:456
hard pred: SELECT sum(case when t1.student_enrolment_id != t2.student_enrolment_id then 1 else 0 end) as max_times, t1.student_enrolment_id FROM transcripts t1 LEFT JOIN transcripts t2 ON t1.transcript_id = t2.transcript_id AND t1.student_enrolment_id != t2.student_enrolment_id GROUP BY t1.student_enrolment_id
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:457
hard pred: SELECT COUNT(DISTINCT student_enrollment_id) as max_num_times, course_id FROM transcripts JOIN Student_Enrolment_Courses ON transcripts.transcript_id = student_enrolment_courses.transcript_id GROUP BY course_id
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:458
extra pred: SELECT transcript_date, transcript_id FROM `Transcripts` ORDER BY transcript_id DESC LIMIT 1
extra gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1

eval_err_num:459
extra pred: SELECT transcript_date, transcript_id FROM `Transcripts` WHERE transcript_date = (SELECT transcript_date FROM (SELECT t1.transcript_date AS date, COUNT(*) AS results FROM `Transcripts` t1 join `Transcript_Contents` t2 ON t1.transcript_id = t2.transcript_id GROUP BY t1.transcript_date) c ON t1.date = c.date AND t1.transcript_id = c.transcript_id Group BY t1.transcript_date) A
extra gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1

eval_err_num:460
extra pred: SELECT semester_id FROM Student_Enrolment WHERE student_id IN ( SELECT student_id FROM Student_Enrolment_Courses WHERE degree_program_id IN ( SELECT degree_program_id FROMDegree_Programs WHERE department_id IN ( SELECT department_id FROM Departments WHERE name = 'Microsoft' ) ) ) )
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'

eval_err_num:461
extra pred: SELECTSEMester_ID() ```
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'

easy pred: SELECT COUNT(*) FROM addresses WHERE address_id NOT IN ( SELECT permanent_address_id FROM students WHERE student_id = 1 )
easy gold: SELECT count(DISTINCT current_address_id) FROM Students

eval_err_num:462
easy pred: `SELECT distinct address_id FROM addresses;`
easy gold: SELECT count(DISTINCT current_address_id) FROM Students

eval_err_num:463
easy pred: SELECT * FROM addresses ORDER BY lexicographical_reverse(address_id)
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC

eval_err_num:464
easy pred: SELECT other_student_details FROM students ORDER BY id DESC
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC

eval_err_num:465
easy pred: CREATE TABLE `students` ( `student_id` INTEGER PRIMARY KEY, `current_address_id` INTEGER NOT NULL, `permanent_address_id` INTEGER NOT NULL, `name` VARCHAR(50), `age` INT, `gender` CHAR(1), `address_type` CHAR(1), `other_student_details` VARCHAR(255), FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`Permanent_address_id` ) REFERENCES `Addresses`(`address_id` ) )
easy gold: SELECT section_description FROM Sections WHERE section_name  =  'h'

eval_err_num:466
easy pred: SELECT Sections.section_description FROM Sections INNER JOIN Courses ONSections.course_id =Courses.course_id INNER JOIN Departments ONCourses.department_id =Departments.department_id WHERE Sections.section_name = 'h'
easy gold: SELECT section_description FROM Sections WHERE section_name  =  'h'

eval_err_num:467
hard pred: SELECT s.first_name FROM students s JOIN addresses a ON s.current_address_id = a.address_id JOIN departments d ON a.department_id = d.department_id JOINDegree_Programs p ON d.department_id = p.department_id JOIN sections s ON p.course_id = s.course_id JOIN Student_Enrolment s ON s.student_id = s.student_id WHERE s.permanent_address_id = 1 AND s.cell_Mobile_number = '09700166582'
hard gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'

hard pred: SELECT first_name FROM Students WHERE permanent_address_id = 1
hard gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'

eval_err_num:468
easy pred: SELECT Title FROM "Cartoon" ORDER BY Title ASC
easy gold: SELECT Title FROM Cartoon ORDER BY title

eval_err_num:469
easy pred: SELECT Title FROM "Cartoon" WHERE Title LIKE '%卡通%'
easy gold: SELECT Title FROM Cartoon ORDER BY title

eval_err_num:470
easy pred: SELECT * FROM "Cartoon" WHERE "Directed_by" = 'Ben Jones'
easy gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";

eval_err_num:471
easy pred: SELECT Title FROM "Cartoon" WHEREdirected_by = 'Ben Jones'
easy gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";

eval_err_num:472
easy pred: SELECT COUNT(*) FROM "Cartoon" WHERE "Written_by" = 'Joseph Kuhr'
easy gold: SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";

eval_err_num:473
easy pred: SELECT COUNT(*) FROM "Cartoon" WHERE "Written_by" = "Joseph Kuhr"
easy gold: SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";

eval_err_num:474
medium pred: SELECT Title, Directed_by FROM "Cartoon" ORDER BY Original_air_date DESC
medium gold: SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date

eval_err_num:475
medium pred: SELECT Title, Directed_by FROM "Cartoon" ORDER BY Original_air_date
medium gold: SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date

eval_err_num:476
medium pred: SELECT Title FROMCartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
medium gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";

eval_err_num:477
medium pred: SELECT Title FROM "Cartoon" WHERE Directed_by = 'Ben Jones' OR Directed_by = ' Brandon Vietti'
medium gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";

eval_err_num:478
hard pred: SELECT country, COUNT(*) as num_TV_channels FROM "TV_Channel" GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;

eval_err_num:479
hard pred: SELECT country, COUNT(*) as total_channels FROM TV_Channel GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;

eval_err_num:480
medium pred: SELECT COUNT(DISTINCT series_name) AS different_series_name, COUNT(DISTINCT content) AS different_content FROM TV_Channel
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;

eval_err_num:481
medium pred: In the TV Channel table, there are 12 different series and 8 different contents.
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;

eval_err_num:482
easy pred: SELECT `Content` FROM `TV_Channel` WHERE `series_name` = 'Sky Radio'
easy gold: SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";

eval_err_num:483
easy pred: SELECT "Content" FROM "TV_Series" WHERE "Channel" = 'Sky Radio'
easy gold: SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";

eval_err_num:484
easy pred: SELECT * FROM "TV_Channel" WHERE "series_name" = 'Sky Radio'
easy gold: SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";

eval_err_num:485
easy pred: SELECT * FROM "TV_Channel" WHERE "series_name" = 'Sky Radio'
easy gold: SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";

eval_err_num:486
easy pred: SELECT COUNT(*) FROM "TV_Channel" WHERE "Language" = 'English'
easy gold: SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";

eval_err_num:487
easy pred: SELECT COUNT(*) FROM "TV_Channel" WHERE "Language" = 'en'
easy gold: SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";

eval_err_num:488
hard pred: SELECT language, COUNT(*) FROM "TV_Channel" GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;

hard pred: SELECT Language FROM TV_Channel WHERE COUNT(*) = (SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English')
hard gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;

eval_err_num:489
medium pred: SELECT Language, COUNT(*) FROM "TV_Channel" GROUP BY Language
medium gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE

eval_err_num:490
medium pred: SELECT * FROM "Cartoon" WHERE "Channel" = 'TV_Channel' AND "Title" = 'The Rise of the Blue Beetle!'
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";

eval_err_num:491
medium pred: The series name of the TV Channel that shows the cartoon "The Rise of the Blue Beetle" is "The channel which shows the cartoon "The Rise of the Blue Beetle" is " channel 10".
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";

eval_err_num:492
medium pred: SELECT Title FROMCartoon WHEREChannel = 'Sky Radio'
medium gold: SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";

eval_err_num:493
medium pred: SELECT cartoon.Title FROM TV_Series JOIN TV_Channel ON TV_Series.Channel = TV_Channel.id WHERE TV_Series.series_name = "Sky Radio"
medium gold: SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";

eval_err_num:494
easy pred: SELECT Episode FROM "TV_Series" ORDER BYrating DESC LIMIT 0, 10
easy gold: SELECT Episode FROM TV_series ORDER BY rating

eval_err_num:495
easy pred: SELECT episode, rating, share, 18_49_rating_Share,Viewers_m，每周Viewership FROM "TV_Series" ORDER BY rating DESC, share DESC, Viewers_m DESC，每周Viewership DESC
easy gold: SELECT Episode FROM TV_series ORDER BY rating

eval_err_num:496
medium pred: SELECT TV_Series.id, TV_Series.Episode, rating.rating FROM TV_Series INNER JOIN rating ON TV_Series.id = rating.series_id INNER JOIN TV_Channel ON rating.channel = TV_Channel.id WHERE rating.rating >= 4.9 AND rating.rating <= 5.9 ORDER BY rating.rating DESC LIMIT 3
medium gold: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;

eval_err_num:497
medium pred: SELECT Channel, rating, Share, 18_49_rating_Share, 每周Viewers, Weekly_Rank FROM TV_series WHERE rating > ( SELECTrating FROM ( SELECTrating, COUNT(*) as COUNT FROM TV_series GROUP BYrating HAVING COUNT(*) > 1 ) ratings ) ORDER BY 每周Viewers DESC, rating DESC LIMIT 3
medium gold: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;

eval_err_num:498
medium pred: --Minimum share of TV series SELECT MIN(share) FROM "TV_Series" WHERE "Series_name" = 'The X-Files'; --Maximum share of TV series SELECT MAX(share) FROM "TV_Series" WHERE "Series_name" = 'The X-Files'
medium gold: SELECT max(SHARE) , min(SHARE) FROM TV_series;

eval_err_num:499
medium pred: The maximum share for a TV series is `MAX("Share")` and the minimum share is `MIN("Share")`.
medium gold: SELECT max(SHARE) , min(SHARE) FROM TV_series;

eval_err_num:500
easy pred: The air date of the TV series with Episode "A Love of a Lifetime" is \'\'1月1日\'\'.
easy gold: SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";

eval_err_num:501
easy pred: NO SQL FOUND
easy gold: SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";

eval_err_num:502
easy pred: Weekly_Rank = 1
easy gold: SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";

eval_err_num:503
easy pred: SELECT 每周Rank FROM "TV_Series" WHERE Episode = 'A Love of a Lifetime'
easy gold: SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";

eval_err_num:504
medium pred: The TV Channel of the TV series with Episode "A Love of a Lifetime" is "ABC". The TV Series' channel name is "ABC".
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";

eval_err_num:505
medium pred: The name of the series that has the episode "A Love of a Lifetime" is "The Sopranos."
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";

eval_err_num:506
medium pred: SELECT t1.Episode FROM "TV_Series" t1 INNER JOIN "TV_Channel" t2 ON t1.Channel = t2.id AND t1.Series_name = "Sky Radio"
medium gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";

eval_err_num:507
medium pred: SELECT Episode FROM "TV_Series" WHERE Episode = 'Sky Radio'
medium gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";

eval_err_num:508
medium pred: SELECT d.Directed_by, COUNT(*) as num_cartoons FROM "Cartoon" as c JOIN "TV_Series" as t ON c.Channel = t.Channel JOIN "TV_Channel" as tc ON t.id = tc.id JOIN "Directed_by" as d ON tc.id = d.高度集中 GROUP BY d.Directed_by ORDER BY COUNT(*) DESC
medium gold: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by

eval_err_num:509
medium pred: SELECT d.Directed_by, COUNT(*) as Num_Cartoons FROM "Cartoon" as c JOIN "TV_Series" as s ON c.Channel = s.Channel JOIN "TV_Channel" as T ON s.Channel = T.id JOIN "Directed_by" as d ON T.id = d.Directed_by GROUP BY d.Directed_by ORDER BY Num_Cartoons DESC
medium gold: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by

eval_err_num:510
medium pred: SELECT production_code, channel FROMCartoon WHERE original_air_date = ( SELECT MAX(original_air_date) FROMCartoon )
medium gold: select production_code ,  channel from cartoon order by original_air_date desc limit 1

eval_err_num:511
medium pred: SELECT production_code, channel FROMCartoon ORDER BY original_air_date DESC LIMIT 1
medium gold: select production_code ,  channel from cartoon order by original_air_date desc limit 1

eval_err_num:512
medium pred: SELECT t1.package_option, t2.series_name FROM "TV_Channel" t1 INNER JOIN "TV_Series" t2 ON t1.id = t2.Channel WHERE t1.Hight_definition_TV = 'True'
medium gold: SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"

eval_err_num:513
medium pred: SELECT * FROM "TV_Channel" WHERE "Hight_Definition_TV" = 1
medium gold: SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"

eval_err_num:514
medium pred: SELECT t1.Channel FROM TV_Series t1 INNER JOIN TV_Channel t2 ON t1.Channel = t2.id WHERE t2.Written_by = 'Todd Casey' AND t2.Original_air_date >= '2021-01-01' AND t2.Original_air_date <= '2021-03-15'
medium gold: SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'

eval_err_num:515
medium pred: The countries that have cartoons on TV that were written by Todd Casey are: - China - Mexico - Russia - Brazil - Turkey - United States - Canada Note: This information is based on theTV_series table, which has a foreign key reference to the TV_Channel table, allowing you to access information about cartoons that are on television in specific countries.
medium gold: SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'

eval_err_num:516
hard pred: SELECT * FROM "TV_Channel" WHERE "Series_name" = 'Todd Casey' AND "Channel" NOT IN (SELECT "Channel" FROM "Cartoon")
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'

eval_err_num:517
hard pred: SELECT * FROM "Cartoon" WHERE "Channel" NOT IN (SELECT "Channel" FROM "TV_Series" WHERE "ID" = (SELECT "ID" FROM "TV_Channel" WHERE "series_name" = ' Todd Casey' ))
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'

eval_err_num:518
extra pred: SELECT t2.series_name, t2.Country FROM "TV_Series" t1 JOIN "Cartoon" t2 ON t1.Channel = t2.Channel AND t1.Directed_by = 'Ben Jones' AND t1.Written_by = 'Michael Chang'
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'

eval_err_num:519
extra pred: SELECT t1.series_name, t2.Country FROM "TV_Channel" t1 INNER JOIN "TV_Series" t2 ON t1.id = t2.Channel WHERE t2.Directed_by = 'Ben Jones' AND t2.Written_by = 'Michael Chang'
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'

eval_err_num:520
medium pred: SELECT t1.Pixel_aspect_ratio_PAR, t1.Country FROM "TV_Channel" t1 JOIN "TV_Series" t2 ON t1.id = t2.Channel WHERE t2.Country NOT LIKE '%English%'
medium gold: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'

eval_err_num:521
medium pred: SELECT `Pixel_aspect_ratio_PAR` AS Pixel_aspect_ratio, `Country` AS Country FROM `TV_Channel` WHERE `Language` NOT IN ('English', 'French', 'German') GROUP BY `Pixel_aspect_ratio_PAR` HAVING COUNT(*) > 0
medium gold: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'

eval_err_num:522
easy pred: SELECT id FROM "TV_Channel" WHERE "Country" = 'US' AND "Pixel_aspect_ratio_PAR" = '16:9'
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2

eval_err_num:523
easy pred: SELECT id FROM "TV_Channel" WHERE series_name IN (SELECT series_name FROM "TV_Series" WHERE Channel = 'TV-1') AND (Channel = 'TV-2' OR Channel = 'TV-3') AND (Channel = 'TV-4' OR Channel = 'TV-5') AND (Channel = 'TV-6' OR Channel = 'TV-7') AND (Channel = 'TV-8' ORChannel = 'TV-9') AND (Channel = 'PPV-1' ORChannel = 'PPV-2') AND (Channel = 'PPV-3' ORChannel = 'PPV-4') AND (Channel >= 'Hight_Definition_TV-1' ANDChannel <= 'Hight_Definition_TV-9') AND (Channel != 'Pay_per_view_PPV-1') AND (Channel != 'Pay_per_view_PPV-2') AND (Channel != 'Pay_per_view_PPV-3') AND (Channel != 'Pay_per_view_PPV-4')
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2

eval_err_num:524
hard pred: SELECT * FROM "TV_Channel" WHERE id NOT IN (SELECT id FROM "Cartoon" WHERE directed_by = 'Ben Jones')
hard gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'

eval_err_num:525
hard pred: SELECT `id` FROM `TV_Channel` WHERE `id` NOT IN ( SELECT `id` FROM `Cartoon` WHERE `Directed_by` = 'Ben Jones' )
hard gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'

eval_err_num:526
hard pred: SELECT Package_Option FROM TV_Channel WHERE Channel NOT IN ( SELECT Channel FROM TV_Series WHERE Title = 'Ben Jones cartoon' )
hard gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')

eval_err_num:527
hard pred: SELECT package_option FROM TV_Channel WHERE id NOT IN ( SELECT id FROM TV_series WHERE title = 'Ben Jones' )
hard gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')

eval_err_num:528
easy pred: SELECT COUNT(*) FROM \"poker_player\" WHERE \"Poker_Player_ID\" IN (SELECT \" People_ID\" FROM \"people\" WHERE \"Nationality\" = \" 中国人\" AND \"Name\" = \" 张敏\" )
easy gold: SELECT count(*) FROM poker_player

eval_err_num:529
easy pred: SELECT COUNT(*) FROM "poker_player"
easy gold: SELECT count(*) FROM poker_player

eval_err_num:530
easy pred: SELECT Earnings FROM "poker_player" ORDER BY Earnings DESC LIMIT 10
easy gold: SELECT Earnings FROM poker_player ORDER BY Earnings DESC

eval_err_num:531
easy pred: SELECT Earnings FROM "poker_player" ORDER BY Earnings DESC
easy gold: SELECT Earnings FROM poker_player ORDER BY Earnings DESC

eval_err_num:532
medium pred: SELECT * FROM "poker_player" WHERE "Final_Table_Made" = 1; SELECT * FROM "poker_player" ORDER BY "Best_Finish" DESC LIMIT 1
medium gold: SELECT Final_Table_Made ,  Best_Finish FROM poker_player

eval_err_num:533
medium pred: SELECT final_table_made, best_finish FROM "poker_player" GROUP BY "Poker_Player_ID" ORDER BY "Best_Finish" DESC LIMIT 1
medium gold: SELECT Final_Table_Made ,  Best_Finish FROM poker_player

eval_err_num:534
easy pred: SELECT AVG(Earnings) FROM "poker_player" WHERE "Poker_Player_ID" IN ( SELECT "Poker_Player_ID" FROM "people" GROUP BY "Poker_Player_ID" HAVING COUNT(DISTINCT "Final_Table_Made") = ( SELECT COUNT(DISTINCT "Final_Table_Made") FROM "poker_player" GROUP BY "Poker_Player_ID" ) )
easy gold: SELECT avg(Earnings) FROM poker_player

eval_err_num:535
easy pred: SELECT AVG(Earnings) ASaverage_Earnings FROM "poker_player" JOIN "people" ON "poker_player"."People_ID" = "people"."People_ID"
easy gold: SELECT avg(Earnings) FROM poker_player

eval_err_num:536
medium pred: SELECT Poker_Player_ID, CASE WHEN Final_Table_Made = 'Final Table of the Year' AND Earnings > 100.000 THEN 'Max' WHEN Final_Table_Made = 'High Five' THEN 'High' WHEN Final_Table_Made = 'Last Five' THEN 'Low' WHEN Final_Table_Made = 'First Five' THEN 'Middle' WHEN Final_Table_Made = 'First Three' THEN 'First' WHEN Final_Table_Made = 'Last Three' THEN 'Second' WHEN Final_Table_Made = 'All-Star' THEN 'Third' ELSE 'Not Qualified' END AS money_rank FROM "poker_player" ORDER BY money_rank DESC
medium gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1

eval_err_num:537
medium pred: SELECT * FROM "poker_player" ORDER BY "Earnings" DESC LIMIT 1
medium gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1

eval_err_num:538
easy pred: SELECT MAX(Final_Table_Made) AS Max_Final_Table_Made FROM "poker_player" WHERE "Poker_Player_ID" IN (SELECT People_ID FROM "people") AND "Earnings" < 200000
easy gold: SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000

eval_err_num:539
easy pred: SELECT MAX(Final_Table_Made) AS Max_Final_Table_Made FROM poker_player WHERE People_ID < 20000
easy gold: SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000

eval_err_num:540
easy pred: SELECT * FROM poker_player WHERE Name = 'John Doe'
easy gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID

eval_err_num:541
easy pred: SELECT * FROM "poker_player" WHERE "Poker_Player_ID" = ( SELECT "Poker_Player_ID" FROM "people" WHERE "Nationality" = 'American' AND "Name" = 'Bob Johnson' )
easy gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID

eval_err_num:542
medium pred: SELECT * FROM "poker_player" WHERE "Poker_Player_ID" IN ( SELECT "Poker_Player_ID" FROM "people" WHERE "people_ID" >= 300000 )
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000

eval_err_num:543
medium pred: SELECT * FROM "poker_player" WHERE "Poker_Player_ID" IN (SELECT "Poker_Player_ID" FROM "people" WHERE "Nationality" = "中国人的" AND "Final_Table_Made" > 300000)
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000

eval_err_num:544
medium pred: `SELECT Name FROM poker_player WHERE Final_Table_Made >= 1 ORDER BY Final_Table_Made ASC;`
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made

eval_err_num:545
medium pred: SELECT name FROM "poker_player" ORDER BY Final_Table_Made DESC
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made

eval_err_num:546
hard pred: The birth date of the poker player with the lowest earnings is likely to be that of a player who has just started playing poker, as their earning power is likely to be very low. To find the birth date of the poker player with the lowest earnings, you would need to check the `Earnings` column of the `poker_player` table, and find the minimum value in that column. Then, you would need to check the `Birth_Date` column of the `people` table, and find the birth date that has a value in that column greater than or equal to the minimum value in the `Earnings` column.
hard gold: SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1

eval_err_num:547
hard pred: SELECT birth_date FROM "poker_player" WHERE Poker_Player_ID = (SELECT MIN(Poker_Player_ID) FROM "poker_player") AND Earnings = (SELECT MIN(Earnings) FROM "poker_player")
hard gold: SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1

eval_err_num:548
hard pred: SELECT t1. Money_Rank, t2.Height FROM "poker_player" t1 INNER JOIN "people" t2 ON t1.People_ID = t2.People_ID ORDER BY t2.Height DESC LIMIT 1
hard gold: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1

eval_err_num:549
hard pred: SELECT * FROM "poker_player" ORDER BY height DESC LIMIT 1
hard gold: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1

eval_err_num:550
medium pred: SELECT AVG(Earnings) FROM "poker_player" WHERE "Poker_Player_ID" IN ( SELECT "Poker_Player_ID" FROM "people" WHERE "Height" > 200 )
medium gold: SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200

eval_err_num:551
medium pred: SELECT AVG(Earnings) FROM "poker_player" WHERE "Poker_Player_ID" IN ( SELECT "Poker_Player_ID" FROM "people" WHERE "Height" > 200 )
medium gold: SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200

eval_err_num:552
medium pred: SELECT Name FROM "poker_player" WHERE Final_Table_Made = '2022_01_01' ORDER BY Earnings DESC
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC

eval_err_num:553
medium pred: SELECT * FROM "poker_player" ORDER BY "Earnings" DESC
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC

eval_err_num:554
medium pred: SELECT nationality, COUNT(*) AS num_people FROM "people" GROUP BY nationality
medium gold: SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality

eval_err_num:555
medium pred: SELECT COUNT(*) as people_count FROM "people" GROUP BY "Nationality"
medium gold: SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality

eval_err_num:556
hard pred: SELECT * FROM `people` WHERE `Nationality` = (SELECT COUNT(*) FROM `poker_player` WHERE `Poker_Player_ID` = `people`.\"People_ID\" AND \"Nationality\" = \" 中国人\")
hard gold: SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:557
hard pred: SELECT nationality FROM "people" GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:558
easy pred: SELECT nationality FROM "poker_player" GROUP BY nationality HAVING COUNT(DISTINCT "People_ID") >= 2
easy gold: SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2

eval_err_num:559
easy pred: SELECT * FROM "poker_player" WHERE "Poker_Player_ID" IN ( SELECT "People_ID" FROM "people" GROUP BY "Nationality" HAVING COUNT(DISTINCT " People_ID") > 1 )
easy gold: SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2

eval_err_num:560
medium pred: SELECT Name,Birth_Date from "people" order by Name asc
medium gold: SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC

eval_err_num:561
medium pred: SELECT name, birth_date FROM "people" ORDER BY name LIMIT 10
medium gold: SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC

eval_err_num:562
easy pred: SELECT Name FROM "people" WHERENationality不等于" Russia"
easy gold: SELECT Name FROM people WHERE Nationality != "Russia"

hard pred: SELECT Name FROM people WHERE Nationality != 'PokerPlayer'
hard gold: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)

eval_err_num:563
hard pred: SELECT * FROM "people" WHERE "Nationality" != 'Poker'
hard gold: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)

eval_err_num:564
easy pred: SELECT COUNT(DISTINCT "Nationality") AS number_of_distinct_nationalities FROM "people"
easy gold: SELECT count(DISTINCT Nationality) FROM people

eval_err_num:565
easy pred: SELECT COUNT(DISTINCT "Nationality") AS num_Nationalities FROM "people"
easy gold: SELECT count(DISTINCT Nationality) FROM people

eval_err_num:566
easy pred: SELECT COUNT(*) FROM `AREA_CODE_STATE`
easy gold: SELECT count(*) FROM area_code_state

eval_err_num:567
medium pred: SELECT contestants. Contestant_number, contestants. Contestant_name FROM `AREA_CODE_STATE` AS state INNER JOIN `CONTESTANTS` AS contestants ON state.`state` = contestants.` Contestant_number` ORDER BY contestants. Contestant_name DESC
medium gold: SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC

eval_err_num:568
medium pred: SELECT `vote_id`, `phone_number`, `state` FROM `votes` WHERE `created` = CURRENT_TIMESTAMP
medium gold: SELECT vote_id ,  phone_number ,  state FROM votes

eval_err_num:569
medium pred: SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE GROUP BY area_code
medium gold: SELECT max(area_code) ,  min(area_code) FROM area_code_state

eval_err_num:570
easy pred: `SELECT UNIX_TIMESTAMP(CURRENT_TIMESTAMP()) AS last_date_created FROMVOTES WHERE state='CA';`
easy gold: SELECT max(created) FROM votes WHERE state  =  'CA'

eval_err_num:571
easy pred: SELECT Contestant_name FROM `CONTESTANTS` WHERE Contestant_name NOT IN ('Jessie Alloway')
easy gold: SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'

eval_err_num:572
medium pred: SELECT distinct state, CURRENT_TIMESTAMP as created FROMvotes
medium gold: SELECT DISTINCT state ,  created FROM votes

eval_err_num:573
medium pred: SELECT Contestant_number, Contestant_name FROM `voteS` WHERE `created` >= UNIX_TIMESTAMP(绑架日期) AND `contestant_number` IN ( SELECT Contestant_number FROM `CONTESTANTS` WHERE 选举结果大于2 )
medium gold: SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2

eval_err_num:574
extra pred: SELECT Contestant_number, Contestant_name FROM `VOTES` WHERE `vote_id` = ( SELECT MIN( Contestant_number) FROM ` Contestants` )
extra gold: SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1

eval_err_num:575
medium pred: SELECT COUNT(*) FROM `VOTES` WHERE `state` = (SELECT `state` FROM `Area_CODE_STATE` WHERE `area_code` = `vote_id`) OR `state` = (SELECT `state` FROM `Area_CODE_STATE` WHERE `area_code` = `phone_number`)
medium gold: SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'

eval_err_num:576
extra pred: SELECT COUNT(*) FROM `VoteS` WHERE ` Contestant_number` NOT IN (SELECT ` Contestant_number` FROM `CONTESTANTS`)
extra gold: SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )

eval_err_num:577
extra pred: SELECT `Area_CODE_STATE`.`state` FROM `votes` JOIN `Area_CODE_STATE` ON `Area_CODE_STATE`.`area_code` = `votes`.` Contestant_number` JOIN `CONTESTANTS` ON `CONTESTANTS`.` Contestant_number` = `votes`.` Contestant_number` GROUP BY `Area_CODE_STATE`.`state` ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1

eval_err_num:578
medium pred: SELECT `create_date`, `state`, `phone_number` FROM `votes` WHERE ` Contestant_number` = 'Tabatha Gehling'
medium gold: SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'

eval_err_num:579
extra pred: SELECT Area_CODE_STATE.state as area_code_state, ConTESTANTS. Contestant_number as Contestant_number, VOTES.vote_id as vote_id, voteS.state as state, voteS.contestant_number as Contestant_number, voteS.created as created, ConTESTANTS. Contestant_name as Contestant_name FROM Area_CODE_STATE INNER JOIN VOTES ON Area_CODE_STATE.state = VOTES. Contestant_number INNER JOIN Contestants ON VOTES. Contestant_number = Contestants. Contestant_number WHERE voteS.state = 'NY' AND Contestants. Contestant_name = ' Kelly Clauss' AND Contestants. Contestant_number = 1
extra gold: SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'

eval_err_num:580
medium pred: SELECT Contestant_name FROM `CONTESTANTS` WHERE Contestant_name LIKE '%al%'
medium gold: select contestant_name from contestants where contestant_name like "%al%"

eval_err_num:581
easy pred: SELECT * FROM `country` WHERE `IndepYear` > 1950
easy gold: SELECT Name FROM country WHERE IndepYear  >  1950

eval_err_num:582
easy pred: SELECT Name FROM country WHERE DateOf foundation > 1950
easy gold: SELECT Name FROM country WHERE IndepYear  >  1950

eval_err_num:583
easy pred: SELECT COUNT(*) FROM `city` WHERE `CountryCode` = '共和国'
easy gold: SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"

eval_err_num:584
easy pred: One can see that only 1 country, Republic of China (ROC), has a government形式 of a republic.
easy gold: SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"

eval_err_num:585
easy pred: select sum(t2.SurfaceArea) from country as t1 join countrylanguage as t2 on t1.Code = t2.CountryCode where t2.Language = 'C' and t2.IsOfficial = 'F'
easy gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"

eval_err_num:586
easy pred: SELECT SUM(c.SurfaceArea) AS total_surface_area FROM `city` c INNER JOIN `country` c1 ON c.CountryCode = c1.Code AND c1.Continent = 'Caribean' INNER JOIN `countrylanguage` c2 ON c1.Language = c2.Language AND c2.CountryCode = c1.Code GROUP BY c.Code ORDER BY total_surface_area DESC
easy gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"

eval_err_num:587
easy pred: SELECT DISTINCTContinent FROM country
easy gold: SELECT Continent FROM country WHERE Name  =  "Anguilla"

eval_err_num:588
easy pred: SELECT t1.Continent FROM country t1 join table_of_city t2 ON t1.Code = t2.CountryCode WHERE t2.Name = 'Anguilla'
easy gold: SELECT Continent FROM country WHERE Name  =  "Anguilla"

eval_err_num:589
medium pred: The city of Kabul is located in the Asia region.
medium gold: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"

eval_err_num:590
medium pred: The region of Kabul is Asia.
medium gold: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"

eval_err_num:591
extra pred: SELECT language FROM `countrylanguage` WHERE `CountryCode` = 'Aruba' ORDER BY `Percentage` DESC LIMIT 1
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1

eval_err_num:592
extra pred: The language spoken in Aruba is English.
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1

eval_err_num:593
medium pred: SELECT city.Name, city.District, city.Population, sqlite_sequence.seq, Country.Name, Country.Continent, Country.Region, Country.SurfaceArea, Country.IndepYear, Country.Population, Country.LifeExpectancy, Country.GNP, Country.GNP Old, LocalName.LocalName, GovernmentForm.HeadOfState, Capital.Capital, Code2.Code2 FROM city INNER JOIN country ON city.CountryCode = country.Code INNER JOIN sqlite_sequence ON country.Code = sqlite_sequence.name INNER JOIN countryLanguage ON country.Code = countryLanguage.CountryCode WHERE city.Name = ' Brazil' AND country.Name = ' Brazil' AND sqlite_sequence.seq = 1; SELECT LifeExpectancy, Population FROM Brazil
medium gold: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"

eval_err_num:594
medium pred: SELECT `city`.population, `city`.lifeExpectancy FROM `city` JOIN `country` ON `city`.CountryCode = `country`.Code WHERE `Country`.Name = 'Brazil'
medium gold: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"

eval_err_num:595
medium pred: SELECT Country.Region, Country.Population FROM country INNER JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Angola'
medium gold: SELECT Population ,  Region FROM country WHERE Name  =  "Angola"

eval_err_num:596
medium pred: SELECT `Region`, `Population` FROM `country` WHERE `Code` = 'Angola'
medium gold: SELECT Population ,  Region FROM country WHERE Name  =  "Angola"

eval_err_num:597
easy pred: SELECT `LifeExpectancy` FROM `country` WHERE `Continent` = 'Central Africa' AND `Region` = 'LifeExpectancy'
easy gold: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"

eval_err_num:598
easy pred: SQLSELECT LifeExpectancy FROM city JOIN country ON city.CountryCode = country.Code JOIN countryLanguage ON country.Code = countryLanguage.Code JOIN ite_sequence ON sqlite_sequence.name = name GROUP BY city.Name, country.Name, countryLanguage.Language, sqlite_sequence.seq HAVING sum(sqlite_sequence.seq) > 0
easy gold: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"

eval_err_num:599
hard pred: SELECT name FROM country WHERE LifeExpectancy = (SELECT min(LifeExpectancy) FROM country WHEREContinent = 'Asia')
hard gold: SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1

hard pred: SELECT name FROM country WHERE LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country)
hard gold: SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1

eval_err_num:600
medium pred: SELECT SUM(population) as total_population, MAX(GNP) as max_gnp FROM city JOIN country ON city.CountryCode = country.Code JOIN sqlite_sequence ON sqlite_sequence.name = city.ID GROUP BY country.Code, sqlite_sequence.name
medium gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"

eval_err_num:601
medium pred: SELECT COUNT(*) AS population, MAX(CASE WHENContinent = 'Asia' THEN GNP END) AS GNP_Asia, MAX(CASE WHENContinent = 'Oceania' THEN GNP END) AS GNP_Oceania, MAX(CASE WHENContinent = '南亚' THEN GNP END) AS GNP_南亚， MAX(CASE WHENContinent = '东南亚' THEN GNP END) AS GNP_东南亚， MAX(CASE WHENContinent = '澳大利亚和新西兰' THEN GNP END) AS GNP_澳大利亚和新西兰 FROM country GROUP BYContinent
medium gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"

eval_err_num:602
medium pred: SELECT LifeExpectancy = (SELECT MAX(LifeExpectancy) FROM country WHERE Code = ' African countries that are republics') FROM city FROM country
medium gold: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"

eval_err_num:603
medium pred: SELECT AVG(LifeExpectancy) FROM `city`,`country`,`countrylanguage` WHERE `CountryCode` IN (SELECT `Code` FROM `country` WHERE `Continent`=' Africa') AND `CountryLanguage`='共和国'
medium gold: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"

eval_err_num:604
medium pred: SELECT SUM(t.SurfaceArea) AS total_surface_area FROM `country` t JOIN `city` c ON t.Code = c.CountryCode JOIN sqlite_sequence o ON o.name = c. sqlite_sequence_name WHERE t.Continent = 'Asia' AND o.seq = t.seq
medium gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"

eval_err_num:605
medium pred: SELECT SUM(CASE WHENContinent = 'Asia' THEN SurfaceArea END) AS AsiaSurfaceArea, SUM(CASE WHENContinent = ' Europe' THEN SurfaceArea END) AS EuropeSurfaceArea FROM country GROUP BY Code
medium gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"

easy pred: SELECT population FROM city WHERE name = ' Gelderland'
easy gold: SELECT sum(Population) FROM city WHERE District  =  "Gelderland"

eval_err_num:606
easy pred: SELECT SUM(population) AS total_population FROM city WHERE District = ' Gelderland'
easy gold: SELECT sum(Population) FROM city WHERE District  =  "Gelderland"

eval_err_num:607
medium pred: select avg(t1.GNP), t1.population from city t1 join country t2 on t1.CountryCode = t2.Code join sqlite_sequence t3 on t1.ID = t3.name order by t2.Population DESC
medium gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"

eval_err_num:608
medium pred: SELECT c.Code, c.Name, c.Continent, sum(c.SurfaceArea) as SurfaceArea, sum(c.IndepYear) as IndepYear, sum(c.Population) as Population, sum(CASE WHEN t.Code = c.Code THEN t.LifeExpectancy ELSE 0 END) as LifeExpectancy, sum(CASE WHEN t.Code = c.Code2 THEN t.LocalName ELSE 'Unknown' END) as LocalName, sum(CASE WHEN t.Code2 = c.Code THEN t. GovernmentForm ELSE 'Unknown' END) as GovernmentForm, sum(CASE WHEN t.Code = c.HeadOfState THEN t.HeadOfState ELSE 'Unknown' END) as HeadOfState, sum(CASE WHEN t.Code = c.Capital THEN t.Capital ELSE 'Unknown' END) as Capital, sum(CASE WHEN t.Code2 = c.Code THEN t.GNP Old ELSE 0 END) as GNP Old, sum(CASE WHEN t.Code2 = c.Code THEN t.GNP THEN t.GNP Old ELSE 0 END) as GNP FROM country c INNER JOIN countryLanguage t ON c.Code = t.CountryCode INNER JOIN sqlite_sequence s ON t.CountryCode = s.Name GROUP BY c.Code, c.Name, c.Continent, c.SurfaceArea, c.IndepYear, c.Population, c.LifeExpectancy, c.LocalName, c. GovernmentForm, c.HeadOfState, c.Capital, c.GNP Old, c.GNP HAVING mean(t.GNP) > 0
medium gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"

eval_err_num:609
easy pred: SELECT COUNT(DISTINCT language) AS num_ languages FROM countryLanguage
easy gold: SELECT count(DISTINCT LANGUAGE) FROM countrylanguage

eval_err_num:610
easy pred: SELECT COUNT(DISTINCT Language) FROM country
easy gold: SELECT count(DISTINCT LANGUAGE) FROM countrylanguage

eval_err_num:611
easy pred: There are many types of governments in Africa. Some of the common types of governments in Africa include: - National governments: These are the governments that are responsible for the management of the different regions and countries in Africa. - Local governments: These are governments that are responsible for the management of the cities and towns in Africa. - Federal governments: These are governments that are responsible for the management of the different countries in Africa, with a focus on creating a single authority for all of their affairs. - Republics: These are governments that are responsible for the management of the different states in Africa. - Dictatorship: This is a government that is led by a person or group of people who have absolute power and control over the country. It is important to note that there may be other types of governments in Africa that are not as common or well-known, and that the specific types of governments that are found in different regions of Africa may vary.
easy gold: SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"

eval_err_num:612
easy pred: SELECT COUNT(DISTINCT ` GovernmentForm` ) AS `Number of Different forms of governments` FROM `city` JOIN `country` ON `city`.\"CountryCode\" = `Country`.\"Code\" JOIN `countrylanguage` ON `city`.\"CountryCode\" = `CountryLanguage\".\"Code\" WHERE `CountryLanguage.\"IsOfficial\" = 'F'`
easy gold: SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"

medium pred: SELECT COUNT(DISTINCT Language) FROM countrylanguage
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"

eval_err_num:613
medium pred: SELECT COUNT(DISTINCT `Language`) AS languages_ spoken FROM `countrylanguage` WHERE `CountryCode` = 'Aruba'
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"

eval_err_num:614
medium pred: SELECT COUNT(*) FROM `countrylanguage` WHERE `CountryCode` = 'AF'
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"

eval_err_num:615
medium pred: SELECT COUNT(DISTINCT Language) AS num_ Official_Languages FROM countryLanguage WHERE countryLanguage.CountryCode = 'AF'
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"

extra pred: SELECT COUNT(DISTINCT language) FROM countryLanguage WHERE Language = 'English'
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:616
extra pred: SELECT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = ( SELECT Language FROM countryLanguage WHERE CountryLanguage.CountryCode = country.Code ) GROUP BY country.Name ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1

                     easy                 medium               hard                 extra                all                 
count                197                  322                  117                  106                  742                 
=====================   EXECUTION ACCURACY     =====================
execution            0.112                0.068                0.043                0.019                0.069               

====================== EXACT MATCHING ACCURACY =====================
exact match          0.127                0.053                0.017                0.000                0.059               

---------------------PARTIAL MATCHING ACCURACY----------------------
select               0.810                0.745                0.842                0.700                0.778               
select(no AGG)       0.857                0.745                0.842                0.700                0.794               
where                0.750                0.472                0.000                0.000                0.458               
where(no OP)         0.786                0.556                0.067                0.250                0.530               
group(no Having)     0.000                0.583                1.000                0.571                0.625               
group                0.000                0.417                1.000                0.429                0.500               
order                0.200                0.286                0.400                1.000                0.478               
and/or               1.000                0.912                0.895                0.915                0.933               
IUEN                 0.000                0.000                0.000                0.000                0.000               
keywords             0.794                0.627                0.368                0.800                0.649               
---------------------- PARTIAL MATCHING RECALL ----------------------
select               0.173                0.127                0.137                0.066                0.132               
select(no AGG)       0.183                0.127                0.137                0.066                0.135               
where                0.228                0.117                0.000                0.000                0.109               
where(no OP)         0.239                0.138                0.017                0.019                0.126               
group(no Having)     0.000                0.080                0.148                0.073                0.080               
group                0.000                0.057                0.148                0.055                0.064               
order                0.071                0.035                0.044                0.105                0.064               
and/or               0.990                0.990                0.971                1.000                0.988               
IUEN                 0.000                0.000                0.000                0.000                0.000               
keywords             0.218                0.113                0.060                0.075                0.118               
---------------------- PARTIAL MATCHING F1 --------------------------
select               0.285                0.218                0.235                0.121                0.226               
select(no AGG)       0.301                0.218                0.235                0.121                0.230               
where                0.350                0.188                1.000                1.000                0.176               
where(no OP)         0.367                0.221                0.027                0.034                0.203               
group(no Having)     1.000                0.140                0.258                0.129                0.142               
group                1.000                0.100                0.258                0.097                0.113               
order                0.105                0.062                0.080                0.190                0.112               
and/or               0.995                0.950                0.932                0.956                0.960               
IUEN                 1.000                1.000                1.000                1.000                1.000               
keywords             0.342                0.192                0.103                0.138                0.199               
