eval_err_num:1
medium pred: SELECT CAR_MAKERS.FULLNAME, COUNT(MODEL_LIST.MODEL) AS MODELCOUNT FROM CAR_MAKERS JOIN MODEL_LIST ON CAR_MAKERS.ID = MODEL_LIST.MAKER GROUP BY CAR_MAKERS.ID
medium gold: SELECT COUNT ( * )  ,  T2.FULLNAME  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.MAKER   =   T2.ID GROUP BY T2.ID

eval_err_num:2
extra pred: SELECT CAR_NAMES.MODEL, COUNT(CARS_DATA.ID) AS SALESCOUNT FROM CAR_NAMES JOIN CARS_DATA ON CAR_NAMES.MAKEID = CARS_DATA.ID GROUP BY CAR_NAMES.MODEL ORDER BY SALESCOUNT DESC
extra gold: SELECT T1.MODEL FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.MAKER   =   T2.ID GROUP BY T2.ID ORDER BY COUNT ( * )  DESC LIMIT 1

eval_err_num:3
medium pred: SELECT CAR_MAKERS.FULLNAME, COUNT(MODEL_LIST.MODEL) AS MODELCOUNT FROM CAR_MAKERS JOIN MODEL_LIST ON CAR_MAKERS.ID = MODEL_LIST.MAKER GROUP BY CAR_MAKERS.ID HAVING MODELCOUNT >= 3
medium gold: SELECT COUNT ( * )  ,  T2.FULLNAME ,  T2.ID FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.MAKER   =   T2.ID GROUP BY T2.ID HAVING COUNT ( * )   >=  3

eval_err_num:4
easy pred: SELECT "NAME" FROM "SINGER"
easy gold: SELECT NAME FROM SINGER

eval_err_num:5
medium pred: SELECT S."NAME", COUNT(C."CONCERT_ID") AS "NUMBER OF CONCERTS" FROM "SINGER" S LEFT JOIN "SINGER_IN_CONCERT" SIC ON S."SINGER_ID" = SIC."SINGER_ID" LEFT JOIN "CONCERT" C ON SIC."CONCERT_ID" = C."CONCERT_ID" GROUP BY S."NAME"
medium gold: SELECT T2.NAME ,  COUNT ( * )  FROM SINGER_IN_CONCERT AS T1 JOIN SINGER AS T2 ON T1.SINGER_ID   =   T2.SINGER_ID GROUP BY T2.SINGER_ID

eval_err_num:6
easy pred: SELECT COUNT(DISTINCT TEMPLATE_ID) AS UNIQUE_TEMPLATE_IDS FROM TEMPLATES
easy gold: SELECT COUNT ( DISTINCT TEMPLATE_ID )  FROM DOCUMENTS

eval_err_num:7
easy pred: SELECT COUNT(DISTINCT TEMPLATE_ID) AS TEMPLATE_IDS_USED_MULTIPLE_TIMES FROM DOCUMENTS GROUP BY TEMPLATE_ID HAVING COUNT(DISTINCT DOCUMENT_ID) > 1
easy gold: SELECT COUNT ( TEMPLATE_ID )  FROM DOCUMENTS GROUP BY TEMPLATE_ID HAVING COUNT ( * )   >  1

eval_err_num:8
easy pred: SELECT TEMPLATE_ID, GROUP_CONCAT(DISTINCT DOCUMENT_ID ORDER BY DOCUMENT_ID) AS DOCUMENT_IDS FROM DOCUMENTS WHERE TEMPLATE_ID IN ( SELECT DISTINCT TEMPLATE_ID FROM DOCUMENTS GROUP BY TEMPLATE_ID HAVING COUNT(DISTINCT DOCUMENT_ID) > 1 ) GROUP BY TEMPLATE_ID
easy gold: SELECT DOCUMENT_ID FROM DOCUMENTS GROUP BY TEMPLATE_ID HAVING COUNT ( * )   >  1

eval_err_num:9
medium pred: SELECT FIRST_NAME FROM STUDENTS INNER JOIN ADDRESSES ON STUDENTS.PERMANENT_ADDRESS_ID = ADDRESSES.ADDRESS_ID WHERE COUNTRY = 'HAITI'
medium gold: SELECT T1.FIRST_NAME FROM STUDENTS AS T1 JOIN ADDRESSES AS T2 ON T1.PERMANENT_ADDRESS_ID   =   T2.ADDRESS_ID WHERE T2.COUNTRY   =   'HAITI'

eval_err_num:10
medium pred: SELECT LAST_NAME, LINE_1, LINE_2, LINE_3, CITY, ZIP_POSTCODE, STATE_PROVINCE_COUNTY, COUNTRY, OTHER_ADDRESS_DETAILS FROM STUDENTS INNER JOIN ADDRESSES ON STUDENTS.CURRENT_ADDRESS_ID = ADDRESSES.ADDRESS_ID WHERE CELL_MOBILE_NUMBER = '09700166582'
medium gold: SELECT T1.LAST_NAME, * FROM STUDENTS AS T1 JOIN ADDRESSES AS T2 ON T1.CURRENT_ADDRESS_ID  =  T2.ADDRESS_ID WHERE T1.CELL_MOBILE_NUMBER  =  '09700166582'

eval_err_num:11
hard pred: SELECT S."NAME" FROM "STADIUM" S LEFT JOIN "CONCERT" C ON S."STADIUM_ID" = C."STADIUM_ID" AND C."YEAR" = '2014' WHERE C."CONCERT_ID" IS NULL
hard gold: SELECT NAME FROM STADIUM EXCEPT SELECT T2.NAME FROM CONCERT AS T1 JOIN STADIUM AS T2 ON T1.STADIUM_ID   =   T2.STADIUM_ID WHERE T1.YEAR   =   2014

eval_err_num:12
easy pred: SELECT "CAPACITY" FROM "STADIUM" WHERE "NAME" = 'BALMOOR'
easy gold: SELECT CAPACITY FROM STADIUM WHERE NAME  =  'BALMOOR'

eval_err_num:13
medium pred: SELECT C."THEME" FROM "CONCERT" C JOIN "STADIUM" S ON C."STADIUM_ID" = S."STADIUM_ID" WHERE S."NAME" = 'BALMOOR'
medium gold: SELECT T2.THEME FROM STADIUM AS T1 JOIN CONCERT AS T2 ON T1.STADIUM_ID  =  T2.STADIUM_ID WHERE T1.NAME  =  'BALMOOR'

eval_err_num:14
hard pred: SELECT COUNT(*) FROM DOGS D JOIN TREATMENTS T ON D.DOG_ID = T.DOG_ID WHERE D.GENDER = 'F'
hard gold: SELECT COUNT ( * )  FROM DOGS WHERE DOG_ID IN  (  SELECT DOG_ID FROM TREATMENTS  ) 

eval_err_num:15
hard pred: SELECT D.AGE FROM DOGS D JOIN TREATMENTS T ON D.DOG_ID = T.DOG_ID WHERE D.GENDER = 'F'
hard gold: SELECT AGE FROM DOGS WHERE DOG_ID IN  (  SELECT DOG_ID FROM TREATMENTS  ) 

eval_err_num:16
hard pred: SELECT MAX(D.WEIGHT) FROM DOGS D WHERE D.AGE = '2'
hard gold: SELECT WEIGHT FROM DOGS WHERE AGE = 2 ORDER BY WEIGHT DESC LIMIT 1

easy pred: SELECT COUNT(*) FROM COURSE
easy gold: SELECT COUNT ( * )  FROM COURSE_ARRANGE

eval_err_num:17
medium pred: SELECT TEACHER.NAME, COUNT(COURSE_ARRANGE.COURSE_ID) AS NUM_COURSES_TAUGHT FROM TEACHER LEFT JOIN COURSE_ARRANGE ON TEACHER.TEACHER_ID = COURSE_ARRANGE.TEACHER_ID GROUP BY TEACHER.TEACHER_ID
medium gold: SELECT T2.NAME , COUNT ( * )  FROM COURSE_ARRANGE AS T1 JOIN TEACHER AS T2 ON T1.TEACHER_ID  =  T2.TEACHER_ID GROUP BY T2.NAME

medium pred: SELECT MAX(HORSEPOWER) FROM CARS_DATA
medium gold: SELECT HORSEPOWER FROM CARS_DATA ORDER BY HORSEPOWER DESC LIMIT 1

medium pred: SELECT DISTRICT FROM SHOP WHERE NUMBER_PRODUCTS = (SELECT MAX(NUMBER_PRODUCTS) FROM SHOP)
medium gold: SELECT DISTRICT FROM SHOP ORDER BY NUMBER_PRODUCTS DESC LIMIT 1

medium pred: SELECT MANAGER_NAME FROM SHOP WHERE NUMBER_PRODUCTS = (SELECT MAX(NUMBER_PRODUCTS) FROM SHOP)
medium gold: SELECT MANAGER_NAME FROM SHOP ORDER BY NUMBER_PRODUCTS DESC LIMIT 1

medium pred: SELECT NUMBER_PRODUCTS FROM SHOP WHERE MANAGER_NAME = (SELECT MANAGER_NAME FROM SHOP WHERE NUMBER_PRODUCTS = (SELECT MAX(NUMBER_PRODUCTS) FROM SHOP))
medium gold: SELECT NUMBER_PRODUCTS FROM SHOP ORDER BY NUMBER_PRODUCTS DESC LIMIT 1

medium pred: SELECT LOCATION FROM SHOP WHERE DISTRICT = (SELECT DISTRICT FROM SHOP WHERE NUMBER_PRODUCTS = (SELECT MAX(NUMBER_PRODUCTS) FROM SHOP))
medium gold: SELECT LOCATION FROM SHOP ORDER BY NUMBER_PRODUCTS DESC LIMIT 1

medium pred: SELECT SHOP_ID FROM SHOP WHERE NUMBER_PRODUCTS = (SELECT MAX(NUMBER_PRODUCTS) FROM SHOP)
medium gold: SELECT SHOP_ID FROM SHOP ORDER BY NUMBER_PRODUCTS DESC LIMIT 1

eval_err_num:18
easy pred: SELECT AVG(POPULATION) AS AVERAGEPOPULATION FROM CITY
easy gold: SELECT AVG ( POPULATION )  FROM CITY

hard pred: SELECT DISTRICT FROM CITY WHERE POPULATION > (SELECT AVG(POPULATION) FROM CITY) GROUP BY DISTRICT
hard gold: SELECT DISTRICT FROM CITY WHERE POPULATION  >   ( SELECT AVG ( POPULATION )  FROM CITY ) 

eval_err_num:19
extra pred: SELECT DISTRICT, COUNT(*) AS NUMCITIESABOVEAVGPOP FROM CITY WHERE POPULATION > (SELECT AVG(POPULATION) FROM CITY) GROUP BY DISTRICT
extra gold: SELECT COUNT ( * )  ,  DISTRICT FROM CITY WHERE POPULATION  >   ( SELECT AVG ( POPULATION )  FROM CITY )  GROUP BY DISTRICT

easy pred: SELECT NAME FROM COUNTRY WHERE GOVERNMENTFORM LIKE '%US TERRITORY%'
easy gold: SELECT NAME FROM COUNTRY WHERE GOVERNMENTFORM   =   "US TERRITORY"

medium pred: SELECT NAME, GNP, POPULATION FROM COUNTRY WHERE GOVERNMENTFORM LIKE '%US TERRITORY%'
medium gold: SELECT GNP, POPULATION FROM COUNTRY WHERE GOVERNMENTFORM   =   "US TERRITORY"

medium pred: SELECT AVG(GNP), SUM(POPULATION) FROM COUNTRY WHERE GOVERNMENTFORM LIKE '%US TERRITORY%'
medium gold: SELECT AVG ( GNP )  ,  SUM ( POPULATION )  FROM COUNTRY WHERE GOVERNMENTFORM   =   "US TERRITORY"

eval_err_num:20
easy pred: SELECT SUM(SURFACEAREA) AS TOTALSURFACEAREA FROM COUNTRY WHERE CONTINENT = 'ASIA'
easy gold: SELECT SUM ( SURFACEAREA )  FROM COUNTRY WHERE CONTINENT  =  "ASIA"

easy pred: SELECT NAME FROM SHOP
easy gold: SELECT * FROM SHOP

eval_err_num:21
medium pred: SELECT SHOP_ID, COUNT(EMPLOYEE_ID) AS "NUMBER_OF_EMPLOYEES_HIRED" FROM HIRING GROUP BY SHOP_ID
medium gold: SELECT COUNT ( * )  FROM HIRING AS T1 JOIN SHOP AS T2 ON T1.SHOP_ID   =   T2.SHOP_ID GROUP BY T2.NAME

eval_err_num:22
easy pred: SELECT "NAME" FROM "SINGER"
easy gold: SELECT NAME FROM SINGER

eval_err_num:23
medium pred: SELECT "SONG_RELEASE_YEAR" FROM "SINGER" WHERE "NAME" = 'JOE SHARP' AND "SONG_NAME" = 'YOU'
medium gold: SELECT SONG_RELEASE_YEAR FROM SINGER WHERE NAME  =  "JOE SHARP" AND SONG_NAME  =  "YOU"

eval_err_num:24
hard pred: SELECT COUNT(DISTINCT "CONCERT_ID") AS "NUMBER_OF_CONCERTS" FROM "SINGER_IN_CONCERT" WHERE "SINGER_ID" = (SELECT "SINGER_ID" FROM "SINGER" WHERE "NAME" = 'JOE SHARP')
hard gold: SELECT COUNT ( * )  FROM SINGER_IN_CONCERT AS T1 JOIN SINGER AS T2 ON T1.SINGER_ID   =   T2.SINGER_ID WHERE T2.NAME  =  "JOE SHARP" GROUP BY T2.SINGER_ID

eval_err_num:25
easy pred: SELECT "COUNTRY" FROM "SINGER" WHERE "NAME" = 'JOE SHARP'
easy gold: SELECT COUNTRY FROM SINGER WHERE NAME  =  "JOE SHARP"

eval_err_num:26
medium pred: SELECT C.CONTID, C.CONTINENT, COUNT(*) AS NUMOFCOUNTRIES FROM CONTINENTS C JOIN COUNTRIES CN ON C.CONTID = CN.CONTINENT GROUP BY C.CONTID
medium gold: SELECT T1.CONTID ,  T1.CONTINENT ,  COUNT ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.CONTID   =   T2.CONTINENT GROUP BY T1.CONTID

extra pred: SELECT MODEL_LIST.MODEL FROM MODEL_LIST JOIN CAR_NAMES ON MODEL_LIST.MODELID = CAR_NAMES.MODEL JOIN CARS_DATA ON CAR_NAMES.MAKEID = CARS_DATA.ID WHERE CARS_DATA.WEIGHT < 3500
extra gold: SELECT DISTINCT T1.MODEL FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.MODEL   =   T2.MODEL JOIN CARS_DATA AS T3 ON T2.MAKEID   =   T3.ID JOIN CAR_MAKERS AS T4 ON T1.MAKER   =   T4.ID WHERE T3.WEIGHT  <  3500

eval_err_num:27
extra pred: I'M SORRY, I NEED MORE INFORMATION TO ANSWER YOUR QUESTION. WHICH BMW MODEL ARE YOU REFERRING TO?
extra gold: SELECT DISTINCT T3.WEIGHT FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.MODEL   =   T2.MODEL JOIN CARS_DATA AS T3 ON T2.MAKEID   =   T3.ID JOIN CAR_MAKERS AS T4 ON T1.MAKER   =   T4.ID WHERE T1.MODEL = "BMW"

easy pred: SELECT MAKER FROM CAR_MAKERS WHERE ID = 2
easy gold: SELECT MODEL FROM CAR_NAMES WHERE MAKEID = 2

easy pred: SELECT DISTINCT GOVERNMENTFORM FROM COUNTRY LIMIT 35
easy gold: SELECT DISTINCT GOVERNMENTFORM FROM COUNTRY

medium pred: SELECT LANGUAGE FROM COUNTRYLANGUAGE WHERE COUNTRYCODE = 'LVA' AND ISOFFICIAL = 'T'
medium gold: SELECT T2.LANGUAGE FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE  =  T2.COUNTRYCODE WHERE  T1.NAME  =  "LATVIA"

easy pred: SELECT AIRLINE FROM AIRLINES WHERE COUNTRY = 'UNITED STATES OF AMERICA'
easy gold: SELECT AIRLINE FROM AIRLINES WHERE AIRLINE = "UNITED AIRLINES"

eval_err_num:28
extra pred: SELECT AIRLINE, COUNT(*) AS NUM_FLIGHTS FROM FLIGHTS GROUP BY AIRLINE ORDER BY NUM_FLIGHTS DESC LIMIT 1
extra gold: SELECT T1.AIRLINE FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.UID   =   T2.AIRLINE GROUP BY T1.AIRLINE ORDER BY COUNT ( * )  DESC LIMIT 1

eval_err_num:29
easy pred: SELECT COUNT(DISTINCT COURSE_ID) AS NUMBER_OF_COURSES FROM COURSES
easy gold: SELECT  COUNT ( DISTINCT COURSE_ID )  FROM COURSES

eval_err_num:30
extra pred: SELECT C.COURSE_NAME FROM COURSES C JOIN SECTIONS S ON C.COURSE_ID = S.COURSE_ID JOIN STUDENT_ENROLMENT_COURSES SEC ON S.SECTION_ID = SEC.COURSE_ID GROUP BY C.COURSE_NAME ORDER BY COUNT(SEC.STUDENT_ENROLMENT_ID) ASC LIMIT 1
extra gold: SELECT  T1.COURSE_NAME FROM COURSES AS T1 JOIN STUDENT_ENROLMENT_COURSES AS T2 ON T1.COURSE_ID   =   T2.COURSE_ID GROUP BY T1.COURSE_NAME ORDER BY COUNT ( * )  LIMIT 1

eval_err_num:31
medium pred: SELECT S.NAME, COUNT(C.CONCERT_ID) AS NUM_CONCERTS FROM STADIUM S LEFT JOIN CONCERT C ON S.STADIUM_ID = C.STADIUM_ID GROUP BY S.NAME
medium gold: SELECT T2.NAME , COUNT ( * )  FROM CONCERT AS T1 JOIN STADIUM AS T2 ON T1.STADIUM_ID  =  T2.STADIUM_ID GROUP BY T1.STADIUM_ID

eval_err_num:32
easy pred: SELECT CAPACITY FROM STADIUM WHERE NAME = 'STARK\'S PARK'
easy gold: SELECT CAPACITY FROM STADIUM WHERE NAME  =  "STARK S PARK"

eval_err_num:33
easy pred: SELECT COUNT(DISTINCT TREATMENT_TYPE_CODE) AS NUM_TREATMENTS FROM TREATMENT_TYPES
easy gold: SELECT COUNT ( * )  FROM  ( SELECT DISTINCT TREATMENT_TYPE_CODE FROM TREATMENTS ) 

eval_err_num:34
medium pred: SELECT TREATMENT_TYPE_CODE, MAX(COST_OF_TREATMENT) AS MAX_COST FROM TREATMENTS GROUP BY TREATMENT_TYPE_CODE ORDER BY MAX_COST DESC LIMIT 1
medium gold: SELECT * FROM TREATMENTS ORDER BY COST_OF_TREATMENT DESC LIMIT 1

eval_err_num:35
medium pred: SELECT MAX(COST_OF_TREATMENT) AS MAX_COST_RECENT_TREATMENTS FROM TREATMENTS WHERE DATE_OF_TREATMENT = (SELECT MAX(DATE_OF_TREATMENT) FROM TREATMENTS)
medium gold: SELECT COST_OF_TREATMENT FROM TREATMENTS ORDER BY DATE_OF_TREATMENT DESC LIMIT 1

medium pred: SELECT AIRLINE FROM AIRLINES WHERE UID IN ( SELECT AIRLINE FROM FLIGHTS GROUP BY AIRLINE HAVING COUNT(*) < 200 )
medium gold: SELECT T1.AIRLINE FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.UID   =   T2.AIRLINE GROUP BY T1.AIRLINE HAVING COUNT ( * )   <  200

eval_err_num:36
hard pred: I'M SORRY, BUT I NEED MORE INFORMATION ABOUT THE FIRST THREE FLIGHTS. WHICH FLIGHTS ARE YOU REFERRING TO? PLEASE PROVIDE MORE CONTEXT OR CRITERIA TO IDENTIFY THE FLIGHTS.
hard gold: SELECT T1.AIRLINE, T2.DESTAIRPORT FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.UID   =   T2.AIRLINE GROUP BY T1.AIRLINE HAVING COUNT ( * )   <  200 LIMIT 3

extra pred: SELECT COUNT(*) FROM FLIGHTS WHERE DESTAIRPORT IN ( SELECT AIRPORTCODE FROM AIRPORTS WHERE CITY = 'ABERDEEN' OR CITY = 'ABILENE' )
extra gold: SELECT COUNT ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DESTAIRPORT   =   T2.AIRPORTCODE WHERE T2.CITY  LIKE  "%ABERDEEN%" OR T2.CITY  LIKE  "%ABILENE%"

medium pred: SELECT DOCUMENTS.DOCUMENT_NAME, TEMPLATES.TEMPLATE_ID FROM DOCUMENTS JOIN TEMPLATES ON DOCUMENTS.TEMPLATE_ID = TEMPLATES.TEMPLATE_ID WHERE DOCUMENTS.DOCUMENT_DESCRIPTION LIKE '%W%'
medium gold: SELECT DOCUMENT_NAME , TEMPLATE_ID FROM DOCUMENTS WHERE DOCUMENT_DESCRIPTION LIKE "%W%"

eval_err_num:37
easy pred: SELECT AVG(LOSER_AGE) AS AVERAGE_AGE_OF_LOSERS FROM MATCHES
easy gold: SELECT AVG ( LOSER_AGE )   FROM MATCHES

eval_err_num:38
easy pred: SELECT AVG(WINNER_AGE) AS AVERAGE_AGE_OF_WINNERS FROM MATCHES
easy gold: SELECT AVG ( WINNER_AGE )   FROM MATCHES

eval_err_num:39
easy pred: SELECT COUNT(*) AS NUMBER_OF_LEFT_HANDED_WINNERS FROM PLAYERS WHERE HAND = 'L' AND PLAYER_ID IN (SELECT WINNER_ID FROM MATCHES)
easy gold: SELECT COUNT ( * )  FROM MATCHES WHERE WINNER_HAND  =  "L"

eval_err_num:40
hard pred: I'M SORRY, BUT THE TABLE STRUCTURE YOU PROVIDED DOES NOT HAVE ANY INFORMATION ON THE RARITY OF THE DOG BREEDS. CAN YOU PLEASE PROVIDE MORE INFORMATION OR CONTEXT ON HOW TO DETERMINE THE RAREST BREED?
hard gold: SELECT NAME FROM DOGS WHERE BREED_CODE   =    (  SELECT BREED_CODE FROM DOGS GROUP BY BREED_CODE ORDER BY COUNT ( * )  ASC LIMIT 1  ) 

extra pred: SELECT GENDER FROM DOGS
extra gold: SELECT NAME, GENDER FROM DOGS WHERE BREED_CODE   =    (  SELECT BREED_CODE FROM DOGS GROUP BY BREED_CODE ORDER BY COUNT ( * )  ASC LIMIT 1  ) 

extra pred: SELECT DATE_OF_TREATMENT FROM TREATMENTS
extra gold: SELECT T1.NAME ,  T2.DATE_OF_TREATMENT FROM DOGS AS T1 JOIN TREATMENTS AS T2 ON T1.DOG_ID   =   T2.DOG_ID WHERE T1.BREED_CODE   =    (  SELECT BREED_CODE FROM DOGS GROUP BY BREED_CODE ORDER BY COUNT ( * )  ASC LIMIT 1  ) 

hard pred: SELECT COUNT(DISTINCT STUID) FROM HAS_PET JOIN PETS ON HAS_PET.PETID = PETS.PETID WHERE PETTYPE = 'CAT'
hard gold: SELECT COUNT ( * )  FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID  =  T2.STUID JOIN PETS AS T3 ON T3.PETID  =  T2.PETID WHERE T3.PETTYPE  =  'CAT'

easy pred: SELECT COUNT(DISTINCT STUID) FROM STUDENT WHERE STUID NOT IN ( SELECT STUID FROM HAS_PET JOIN PETS ON HAS_PET.PETID = PETS.PETID WHERE PETTYPE = 'CAT' )
easy gold: SELECT COUNT ( * )  FROM  ( SELECT STUID FROM STUDENT EXCEPT SELECT T1.STUID FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID   =   T2.STUID JOIN PETS AS T3 ON T3.PETID   =   T2.PETID WHERE T3.PETTYPE   =   'CAT' ) 

hard pred: SELECT DISTINCT STUID FROM STUDENT WHERE STUID NOT IN ( SELECT STUID FROM HAS_PET JOIN PETS ON HAS_PET.PETID = PETS.PETID WHERE PETTYPE = 'CAT' )
hard gold: SELECT STUID FROM STUDENT EXCEPT SELECT T1.STUID FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID   =   T2.STUID JOIN PETS AS T3 ON T3.PETID   =   T2.PETID WHERE T3.PETTYPE   =   'CAT'

eval_err_num:41
extra pred: SELECT V.NAME FROM VISITOR V JOIN VISIT VI ON V.ID = VI.VISITOR_ID JOIN MUSEUM M ON VI.MUSEUM_ID = M.MUSEUM_ID WHERE M.OPEN_YEAR < '2009' AND EXISTS ( SELECT 1 FROM VISIT VI2 JOIN MUSEUM M2 ON VI2.MUSEUM_ID = M2.MUSEUM_ID WHERE M2.OPEN_YEAR > '2011' AND VI2.VISITOR_ID = VI.VISITOR_ID )
extra gold: SELECT T1.NAME FROM VISITOR AS T1 JOIN VISIT AS T2 ON T1.ID   =   T2.VISITOR_ID JOIN MUSEUM AS T3 ON T3.MUSEUM_ID   =   T2.MUSEUM_ID WHERE T3.OPEN_YEAR  <  2009 INTERSECT SELECT T1.NAME FROM VISITOR AS T1 JOIN VISIT AS T2 ON T1.ID   =   T2.VISITOR_ID JOIN MUSEUM AS T3 ON T3.MUSEUM_ID   =   T2.MUSEUM_ID WHERE T3.OPEN_YEAR  >  2011

eval_err_num:42
extra pred: SELECT M.NAME FROM MUSEUM M JOIN VISIT VI ON M.MUSEUM_ID = VI.MUSEUM_ID JOIN VISITOR V ON VI.VISITOR_ID = V.ID WHERE M.OPEN_YEAR < '2009' AND V.NAME = 'VISITOR_NAME'
extra gold: SELECT T3.NAME FROM VISITOR AS T1 JOIN VISIT AS T2 ON T1.ID   =   T2.VISITOR_ID JOIN MUSEUM AS T3 ON T3.MUSEUM_ID   =   T2.MUSEUM_ID WHERE T3.OPEN_YEAR  <  2009 AND T1.NAME  =   ( SELECT T1.NAME FROM VISITOR AS T1 JOIN VISIT AS T2 ON T1.ID   =   T2.VISITOR_ID JOIN MUSEUM AS T3 ON T3.MUSEUM_ID   =   T2.MUSEUM_ID WHERE T3.OPEN_YEAR  <  2009 INTERSECT SELECT T1.NAME FROM VISITOR AS T1 JOIN VISIT AS T2 ON T1.ID   =   T2.VISITOR_ID JOIN MUSEUM AS T3 ON T3.MUSEUM_ID   =   T2.MUSEUM_ID WHERE T3.OPEN_YEAR  >  2011 ) 

easy pred: SELECT AIRPORTS.CITY, AIRPORTS.COUNTRY FROM FLIGHTS JOIN AIRPORTS ON AIRPORTS.AIRPORTCODE = FLIGHTS.DESTAIRPORT WHERE FLIGHTS.FLIGHTNO = 28
easy gold: SELECT DESTAIRPORT FROM FLIGHTS WHERE FLIGHTNO  =  28

easy pred: SELECT AIRPORTS.CITY, AIRPORTS.COUNTRY FROM FLIGHTS JOIN AIRPORTS ON AIRPORTS.AIRPORTCODE = FLIGHTS.DESTAIRPORT WHERE FLIGHTS.FLIGHTNO = 29
easy gold: SELECT DESTAIRPORT FROM FLIGHTS WHERE FLIGHTNO  =  29

eval_err_num:43
medium pred: IF YOU HAVE ANY FURTHER QUESTIONS, FEEL FREE TO ASK!
medium gold: SELECT FIRST_NAME ,  LAST_NAME FROM PLAYERS WHERE HAND   =   'L'

eval_err_num:44
hard pred: SELECT COUNT(*) FROM FLIGHTS INNER JOIN AIRLINES ON FLIGHTS.AIRLINE = AIRLINES.UID INNER JOIN AIRPORTS ON FLIGHTS.DESTAIRPORT = AIRPORTS.AIRPORTCODE WHERE AIRLINES.AIRLINE = 'UNITED AIRLINES' AND AIRPORTS.CITY = 'ABERDEEN'
hard gold: SELECT COUNT ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DESTAIRPORT   =   T2.AIRPORTCODE JOIN AIRLINES AS T3 ON T3.UID   =   T1.AIRLINE WHERE T2.CITY   =   "ABERDEEN" AND T3.AIRLINE   =   "UNITED AIRLINES"

eval_err_num:45
hard pred: SELECT DISTINCT AIRPORTS.CITY FROM FLIGHTS INNER JOIN AIRLINES ON FLIGHTS.AIRLINE = AIRLINES.UID INNER JOIN AIRPORTS ON FLIGHTS.DESTAIRPORT = AIRPORTS.AIRPORTCODE WHERE AIRLINES.AIRLINE = 'UNITED AIRLINES' AND AIRPORTS.CITY <> 'ABERDEEN'
hard gold: SELECT T2.CITY FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DESTAIRPORT   =   T2.AIRPORTCODE JOIN AIRLINES AS T3 ON T3.UID   =   T1.AIRLINE WHERE T2.CITY !=   'ABERDEEN' AND T3.AIRLINE  =  "UNITED AIRLINES"

eval_err_num:46
medium pred: SELECT COURSE.STARING_DATE FROM COURSE JOIN COURSE_ARRANGE ON COURSE.COURSE_ID = COURSE_ARRANGE.COURSE_ID JOIN TEACHER ON COURSE_ARRANGE.TEACHER_ID = TEACHER.TEACHER_ID WHERE TEACHER.NAME IN ( SELECT TEACHER.NAME FROM TEACHER JOIN COURSE_ARRANGE ON TEACHER.TEACHER_ID = COURSE_ARRANGE.TEACHER_ID JOIN COURSE ON COURSE_ARRANGE.COURSE_ID = COURSE.COURSE_ID WHERE COURSE.COURSE = 'MATH' AND COURSE_ARRANGE.GRADE IN (1,3) )
medium gold: SELECT T2.STARING_DATE  FROM COURSE_ARRANGE AS T1 JOIN COURSE AS T2 ON T1.COURSE_ID   =   T2.COURSE_ID WHERE T2.COURSE  =  "MATH"

eval_err_num:47
hard pred: SELECT P.BIRTH_DATE FROM POKER_PLAYER PP JOIN PEOPLE P ON PP.PEOPLE_ID = P.PEOPLE_ID WHERE PP.EARNINGS = (SELECT MIN(EARNINGS) FROM POKER_PLAYER)
hard gold: SELECT T1.BIRTH_DATE FROM PEOPLE AS T1 JOIN POKER_PLAYER AS T2 ON T1.PEOPLE_ID   =   T2.PEOPLE_ID ORDER BY T2.EARNINGS ASC LIMIT 1

eval_err_num:48
hard pred: SELECT P.NAME FROM POKER_PLAYER PP JOIN PEOPLE P ON PP.PEOPLE_ID = P.PEOPLE_ID WHERE PP.EARNINGS = (SELECT MIN(EARNINGS) FROM POKER_PLAYER)
hard gold: SELECT NAME FROM PEOPLE AS T1 JOIN POKER_PLAYER AS T2 ON T1.PEOPLE_ID   =   T2.PEOPLE_ID ORDER BY T2.EARNINGS ASC LIMIT 1

eval_err_num:49
hard pred: SELECT P.NATIONALITY FROM POKER_PLAYER PP JOIN PEOPLE P ON PP.PEOPLE_ID = P.PEOPLE_ID WHERE PP.EARNINGS = (SELECT MIN(EARNINGS) FROM POKER_PLAYER)
hard gold: SELECT NATIONALITY FROM PEOPLE AS T1 JOIN POKER_PLAYER AS T2 ON T1.PEOPLE_ID   =   T2.PEOPLE_ID ORDER BY T2.EARNINGS ASC LIMIT 1

eval_err_num:50
easy pred: SELECT COUNT(*) AS "NUMBER OF POKER PLAYERS" FROM "POKER_PLAYER"
easy gold: SELECT COUNT ( * )  FROM POKER_PLAYER

eval_err_num:51
medium pred: SELECT COUNT(*) AS "NUMBER OF POKER PLAYERS WITH HEIGHT > 200" FROM "PEOPLE" WHERE "HEIGHT" > 200
medium gold: SELECT COUNT ( * )  FROM PEOPLE AS T1 JOIN POKER_PLAYER AS T2 ON T1.PEOPLE_ID   =   T2.PEOPLE_ID WHERE T1.HEIGHT  >  200

eval_err_num:52
medium pred: SELECT AVG("EARNINGS") AS "AVERAGE EARNINGS OF POKER PLAYERS WITH HEIGHT > 200" FROM "POKER_PLAYER" PP JOIN "PEOPLE" P ON PP."PEOPLE_ID" = P."PEOPLE_ID" WHERE P."HEIGHT" > 200
medium gold: SELECT AVG ( T2.EARNINGS )  FROM PEOPLE AS T1 JOIN POKER_PLAYER AS T2 ON T1.PEOPLE_ID   =   T2.PEOPLE_ID WHERE T1.HEIGHT  >  200

eval_err_num:53
hard pred: SELECT STUDENT.STUID FROM STUDENT INNER JOIN HAS_PET ON STUDENT.STUID = HAS_PET.STUID INNER JOIN PETS ON HAS_PET.PETID = PETS.PETID WHERE PETS.PETTYPE = 'DOG'
hard gold: SELECT T1.STUID FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID  =  T2.STUID JOIN PETS AS T3 ON T3.PETID  =  T2.PETID WHERE T3.PETTYPE  =  'DOG'

eval_err_num:54
extra pred: SELECT COUNT(*) AS NUM_CATS FROM HAS_PET WHERE PETID IN ( SELECT PETID FROM PETS WHERE PETTYPE = 'CAT' ) AND STUID IN ( SELECT STUID FROM HAS_PET WHERE PETID IN ( SELECT PETID FROM PETS WHERE PETTYPE = 'DOG' ) AND STUID IN (100, 200) ) HAVING NUM_CATS > 0
extra gold: SELECT T1.STUID FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID  =  T2.STUID JOIN PETS AS T3 ON T3.PETID  =  T2.PETID WHERE T3.PETTYPE  =  'DOG' INTERSECT SELECT T1.STUID FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID  =  T2.STUID JOIN PETS AS T3 ON T3.PETID  =  T2.PETID WHERE T3.PETTYPE  =  'CAT'

eval_err_num:55
hard pred: SELECT STUDENT.FNAME, STUDENT.AGE FROM STUDENT INNER JOIN HAS_PET ON STUDENT.STUID = HAS_PET.STUID INNER JOIN PETS ON HAS_PET.PETID = PETS.PETID WHERE PETS.PETTYPE = 'DOG'
hard gold: SELECT T1.FNAME, T1.AGE FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID  =  T2.STUID JOIN PETS AS T3 ON T3.PETID  =  T2.PETID WHERE T3.PETTYPE  =  'DOG'

eval_err_num:56
hard pred: SELECT "ID" FROM "TV_CHANNEL" WHERE "COUNTRY" IN ( SELECT "COUNTRY" FROM "TV_CHANNEL" GROUP BY "COUNTRY" HAVING COUNT("ID") > 2 )
hard gold: SELECT ID FROM TV_CHANNEL WHERE COUNTRY IN  ( SELECT COUNTRY FROM TV_CHANNEL GROUP BY COUNTRY HAVING COUNT ( * )   >  2 ) 

eval_err_num:57
hard pred: I'M SORRY, I NEED MORE INFORMATION TO ANSWER YOUR QUESTION. WHICH CHANNEL ARE YOU REFERRING TO?
hard gold: SELECT PACKAGE_OPTION FROM TV_CHANNEL WHERE COUNTRY IN  ( SELECT COUNTRY FROM TV_CHANNEL GROUP BY COUNTRY HAVING COUNT ( * )   >  2 ) 

eval_err_num:58
easy pred: SELECT "SERIES_NAME" FROM "TV_CHANNEL" ORDER BY "SERIES_NAME" ASC
easy gold: SELECT SERIES_NAME FROM TV_CHANNEL ORDER BY SERIES_NAME ASC

eval_err_num:59
hard pred: SELECT COUNT(DISTINCT DOG_ID) AS NUMBER_OF_DOGS_TREATED FROM TREATMENTS
hard gold: SELECT COUNT ( * )  FROM DOGS WHERE DOG_ID IN  (  SELECT DOG_ID FROM TREATMENTS  ) 

eval_err_num:60
hard pred: SELECT MIN(AGE) AS YOUNGEST_DOG_AGE_TREATED FROM DOGS JOIN TREATMENTS ON DOGS.DOG_ID = TREATMENTS.DOG_ID
hard gold: SELECT MIN ( AGE )  FROM DOGS WHERE DOG_ID IN  (  SELECT DOG_ID FROM TREATMENTS  ) 

eval_err_num:61
hard pred: SELECT MAX(AGE) AS OLDEST_DOG_AGE_TREATED FROM DOGS JOIN TREATMENTS ON DOGS.DOG_ID = TREATMENTS.DOG_ID
hard gold: SELECT MAX ( AGE )  FROM DOGS WHERE DOG_ID IN  (  SELECT DOG_ID FROM TREATMENTS  ) 

eval_err_num:62
hard pred: SELECT AVG(AGE) AS AVERAGE_DOG_AGE_TREATED FROM DOGS JOIN TREATMENTS ON DOGS.DOG_ID = TREATMENTS.DOG_ID
hard gold: SELECT AVG ( AGE )  FROM DOGS WHERE DOG_ID IN  (  SELECT DOG_ID FROM TREATMENTS  ) 

eval_err_num:63
hard pred: SELECT DISTINCT C.NAME FROM COUNTRY C JOIN COUNTRYLANGUAGE CL ON C.CODE = CL.COUNTRYCODE WHERE CL.LANGUAGE <> 'ENGLISH'
hard gold: SELECT NAME FROM COUNTRY WHERE NAME NOT IN  ( SELECT T1.NAME FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE T2.LANGUAGE   =   "ENGLISH" ) 

eval_err_num:64
extra pred: SELECT SUM(C.POPULATION) FROM COUNTRY C JOIN COUNTRYLANGUAGE CL ON C.CODE = CL.COUNTRYCODE WHERE CL.LANGUAGE <> 'ENGLISH'
extra gold: SELECT NAME,SUM ( POPULATION )  FROM COUNTRY WHERE NAME NOT IN  ( SELECT T1.NAME FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE T2.LANGUAGE   =   "ENGLISH" )  GROUP BY NAME

medium pred: SELECT WEIGHT FROM CARS_DATA WHERE ID = 1
medium gold: SELECT T2.WEIGHT FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MAKEID   =   T2.ID WHERE T1.MAKEID  =  1

eval_err_num:65
medium pred: SELECT YEAR FROM CARS_DATA INNER JOIN CAR_NAMES ON CARS_DATA.ID = CAR_NAMES.MAKEID INNER JOIN MODEL_LIST ON CAR_NAMES.MODEL = MODEL_LIST.MODEL WHERE MODEL_LIST.MODEL = 'BUICK'
medium gold: SELECT T2.YEAR FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MAKEID   =   T2.ID WHERE T1.MODEL  =  "BUICK"

eval_err_num:66
medium pred: SELECT HORSEPOWER FROM CARS_DATA INNER JOIN CAR_NAMES ON CARS_DATA.ID = CAR_NAMES.MAKEID INNER JOIN MODEL_LIST ON CAR_NAMES.MODEL = MODEL_LIST.MODEL WHERE MODEL_LIST.MODEL = 'PLYMOUTH'
medium gold: SELECT T2.HORSEPOWER FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MAKEID   =   T2.ID WHERE T1.MODEL  =  "PLYMOUTH"

eval_err_num:67
extra pred: SELECT MODEL_LIST.MODEL, MAX(CARS_DATA.HORSEPOWER) AS MAXHORSEPOWER FROM CARS_DATA INNER JOIN CAR_NAMES ON CARS_DATA.ID = CAR_NAMES.MAKEID INNER JOIN MODEL_LIST ON CAR_NAMES.MODEL = MODEL_LIST.MODEL WHERE CARS_DATA.CYLINDERS = 4 GROUP BY MODEL_LIST.MODEL ORDER BY MAXHORSEPOWER DESC LIMIT 1
extra gold: SELECT T1.MODEL FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MAKEID  =  T2.ID WHERE T2.CYLINDERS  =  4 ORDER BY T2.HORSEPOWER DESC LIMIT 1

easy pred: SELECT COUNT(*) FROM CARS_DATA JOIN CAR_NAMES ON CARS_DATA.ID = CAR_NAMES.MAKEID JOIN MODEL_LIST ON CAR_NAMES.MODEL = MODEL_LIST.MODEL WHERE CARS_DATA.YEAR = 1974
easy gold: SELECT COUNT ( * )  FROM CARS_DATA WHERE YEAR = '1974'

medium pred: SELECT CARS_DATA.ID FROM CARS_DATA JOIN CAR_NAMES ON CARS_DATA.ID = CAR_NAMES.MAKEID JOIN MODEL_LIST ON CAR_NAMES.MODEL = MODEL_LIST.MODEL WHERE CARS_DATA.YEAR = 1974 AND CARS_DATA.CYLINDERS = 8
medium gold: SELECT ID  FROM CARS_DATA WHERE YEAR = '1974' AND CYLINDERS  =  '8'

medium pred: SELECT EMPLOYEE_ID FROM HIRING
medium gold: SELECT T2.NAME FROM HIRING AS T1 JOIN SHOP AS T2 ON T1.SHOP_ID   =   T2.SHOP_ID GROUP BY T1.SHOP_ID

eval_err_num:68
extra pred: SELECT SHOP.NAME, COUNT(HIRING.EMPLOYEE_ID) AS NUM_HIRING FROM SHOP INNER JOIN HIRING ON SHOP.SHOP_ID = HIRING.SHOP_ID GROUP BY SHOP.SHOP_ID ORDER BY NUM_HIRING DESC LIMIT 1
extra gold: SELECT T2.NAME FROM HIRING AS T1 JOIN SHOP AS T2 ON T1.SHOP_ID   =   T2.SHOP_ID GROUP BY T1.SHOP_ID ORDER BY COUNT ( * )  DESC LIMIT 1

easy pred: SELECT COUNT(*) FROM SINGER
easy gold: SELECT COUNT ( DISTINCT SINGER_ID )  FROM SINGER

medium pred: SELECT COUNT(DISTINCT SINGER_ID) FROM SONG WHERE SALES > 300000
medium gold: SELECT COUNT ( DISTINCT T1.NAME )  FROM SINGER AS T1 JOIN SONG AS T2 ON T1.SINGER_ID  =  T2.SINGER_ID WHERE T2.SALES > 300000

eval_err_num:69
medium pred: SELECT DISTINCT NAME FROM SINGER INNER JOIN SONG ON SINGER.SINGER_ID = SONG.SINGER_ID WHERE SALES > 300000
medium gold: SELECT DISTINCT T1.NAME FROM SINGER AS T1 JOIN SONG AS T2 ON T1.SINGER_ID  =  T2.SINGER_ID WHERE T2.SALES > 300000

eval_err_num:70
easy pred: SELECT COUNT(*) AS TOTAL_CONTESTANTS FROM CONTESTANTS
easy gold: SELECT COUNT ( CONTESTANT_NAME )  FROM CONTESTANTS

easy pred: SELECT COUNT(*) FROM FLIGHTS
easy gold: SELECT COUNT ( DISTINCT FLIGHTNO )  FROM FLIGHTS

eval_err_num:71
easy pred: SELECT COUNT(*) AS TOTAL_BREEDS FROM BREEDS
easy gold: SELECT COUNT ( * )  FROM BREEDS

eval_err_num:72
extra pred: I'M SORRY, BUT THE TABLE `BREEDS` ONLY CONTAINS THE CODE AND NAME OF EACH BREED, NOT INFORMATION ABOUT THEIR SIZE. TO ANSWER THIS QUESTION, I WOULD NEED ACCESS TO ADDITIONAL DATA.
extra gold: SELECT T1.BREED_NAME FROM BREEDS AS T1 JOIN DOGS AS T2 ON T1.BREED_CODE   =   T2.BREED_CODE GROUP BY T1.BREED_NAME ORDER BY COUNT ( * )  DESC LIMIT 1

eval_err_num:73
medium pred: I'M SORRY, BUT THE TABLE `BREEDS` ONLY CONTAINS THE CODE AND NAME OF EACH BREED, NOT INFORMATION ABOUT THEIR SIZE OR WEIGHT. TO ANSWER THIS QUESTION, I WOULD NEED ACCESS TO ADDITIONAL DATA.
medium gold: SELECT T2.SIZE_CODE FROM BREEDS AS T1 JOIN DOGS AS T2 ON T1.BREED_CODE   =   T2.BREED_CODE WHERE T1.BREED_NAME = "BULLDOG"

eval_err_num:74
extra pred: SELECT B.BREED_NAME, COUNT(*) AS TOTAL_DOGS FROM DOGS D JOIN BREEDS B ON D.BREED_CODE = B.BREED_CODE GROUP BY D.BREED_CODE ORDER BY TOTAL_DOGS DESC LIMIT 1
extra gold: SELECT T1.BREED_NAME FROM BREEDS AS T1 JOIN DOGS AS T2 ON T1.BREED_CODE   =   T2.BREED_CODE GROUP BY T1.BREED_NAME ORDER BY COUNT ( * )  DESC LIMIT 1

eval_err_num:75
medium pred: SELECT `NAME` FROM `CONDUCTOR` WHERE `YEAR_OF_WORK` = ( SELECT MAX(`YEAR_OF_WORK`) FROM `CONDUCTOR` )
medium gold: SELECT NAME FROM CONDUCTOR ORDER BY YEAR_OF_WORK DESC LIMIT 1

eval_err_num:76
easy pred: SELECT `YEAR_OF_WORK` FROM `CONDUCTOR` WHERE `NAME` = 'ROBERT CRAFT'
easy gold: SELECT YEAR_OF_WORK FROM CONDUCTOR WHERE NAME = 'ROBERT CRAFT'

eval_err_num:77
medium pred: SELECT `NAME` FROM `CONDUCTOR` WHERE `YEAR_OF_WORK` = ( SELECT MIN(`YEAR_OF_WORK`) FROM `CONDUCTOR` )
medium gold: SELECT NAME FROM CONDUCTOR ORDER BY YEAR_OF_WORK ASC LIMIT 1

eval_err_num:78
extra pred: SELECT PROFESSIONAL_ID, COUNT(*) AS NUM_TREATMENTS FROM TREATMENTS GROUP BY PROFESSIONAL_ID ORDER BY NUM_TREATMENTS DESC LIMIT 1
extra gold: SELECT * FROM PROFESSIONALS AS T1 JOIN TREATMENTS AS T2 ON T1.PROFESSIONAL_ID   =   T2.PROFESSIONAL_ID GROUP BY T1.PROFESSIONAL_ID ORDER BY COUNT ( * )   DESC LIMIT 1

eval_err_num:79
extra pred: SELECT PROFESSIONAL_ID, COUNT(*) AS NUM_TREATMENTS FROM TREATMENTS GROUP BY PROFESSIONAL_ID ORDER BY NUM_TREATMENTS ASC LIMIT 1
extra gold: SELECT * FROM PROFESSIONALS AS T1 JOIN TREATMENTS AS T2 ON T1.PROFESSIONAL_ID   =   T2.PROFESSIONAL_ID GROUP BY T1.PROFESSIONAL_ID ORDER BY COUNT ( * )   LIMIT 1

eval_err_num:80
easy pred: SELECT COUNT(*) AS NUM_PROFESSIONALS FROM ( SELECT PROFESSIONAL_ID, COUNT(*) AS NUM_TREATMENTS FROM TREATMENTS GROUP BY PROFESSIONAL_ID HAVING NUM_TREATMENTS <= 3 ) AS SUBQUERY
easy gold: SELECT COUNT ( * )  FROM  ( SELECT * FROM PROFESSIONALS AS T1 JOIN TREATMENTS AS T2 GROUP BY T2.PROFESSIONAL_ID HAVING COUNT ( * )  <=  3 ) 

hard pred: SELECT NAME FROM COUNTRY WHERE CODE NOT IN ( SELECT COUNTRYCODE FROM COUNTRYLANGUAGE WHERE ISOFFICIAL = 'T' AND LANGUAGE = 'ENGLISH' )
hard gold: SELECT NAME FROM COUNTRY WHERE CODE NOT IN  ( SELECT COUNTRYCODE FROM COUNTRYLANGUAGE WHERE LANGUAGE   =   "ENGLISH" ) 

eval_err_num:81
hard pred: SELECT NAME FROM COUNTRY WHERE CODE NOT IN ( SELECT COUNTRYCODE FROM COUNTRYLANGUAGE WHERE ISOFFICIAL = 'T' AND LANGUAGE = 'ENGLISH' ) AND GOVERNMENTFORM <> 'REPUBLIC'
hard gold: SELECT NAME FROM COUNTRY WHERE CODE IN  ( SELECT CODE FROM COUNTRY WHERE GOVERNMENTFORM !=  "REPUBLIC" EXCEPT SELECT COUNTRYCODE FROM COUNTRYLANGUAGE WHERE LANGUAGE   =   "ENGLISH" ) 

eval_err_num:82
medium pred: SELECT COUNT(*) AS TOTAL_VOTES FROM VOTES WHERE STATE IN ('NY', 'CA')
medium gold: SELECT COUNT ( * )  FROM VOTES WHERE STATE   =   'NY' OR  STATE   =   'CA'

easy pred: SELECT DISTINCT CONTESTANT_NUMBER FROM CONTESTANTS
easy gold: SELECT DISTINCT CONTESTANT_NUMBER FROM VOTES

eval_err_num:83
easy pred: SELECT COUNT(*) AS NUM_VOTES FROM VOTES WHERE CONTESTANT_NUMBER = 5
easy gold: SELECT COUNT ( * )  FROM VOTES WHERE CONTESTANT_NUMBER  =  '5'

eval_err_num:84
medium pred: SELECT CAR_MAKERS.MAKER, COUNT(MODEL_LIST.MODELID) AS NUM_MODELS FROM CAR_MAKERS JOIN MODEL_LIST ON CAR_MAKERS.ID = MODEL_LIST.MAKER GROUP BY CAR_MAKERS.MAKER HAVING NUM_MODELS > 3
medium gold: SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.ID   =   T2.MAKER GROUP BY T1.ID HAVING COUNT ( * )   >  3

eval_err_num:85
medium pred: SELECT CAR_MAKERS.ID, CAR_MAKERS.MAKER, COUNT(MODEL_LIST.MODELID) AS NUM_MODELS FROM CAR_MAKERS JOIN MODEL_LIST ON CAR_MAKERS.ID = MODEL_LIST.MAKER GROUP BY CAR_MAKERS.ID, CAR_MAKERS.MAKER HAVING NUM_MODELS > 3
medium gold: SELECT T1.ID FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.ID   =   T2.MAKER GROUP BY T1.ID HAVING COUNT ( * )   >  3

eval_err_num:86
medium pred: SELECT CAR_MAKERS.ID, CAR_MAKERS.FULLNAME, COUNT(MODEL_LIST.MODELID) AS NUM_MODELS FROM CAR_MAKERS JOIN MODEL_LIST ON CAR_MAKERS.ID = MODEL_LIST.MAKER GROUP BY CAR_MAKERS.ID, CAR_MAKERS.FULLNAME HAVING NUM_MODELS > 3
medium gold: SELECT T1.FULLNAME ,  T1.ID FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.ID   =   T2.MAKER GROUP BY T1.ID HAVING COUNT ( * )   >  3

eval_err_num:87
medium pred: SELECT MAKE, MODEL, HORSEPOWER FROM CAR_NAMES INNER JOIN CARS_DATA ON CAR_NAMES.MAKEID = CARS_DATA.ID ORDER BY HORSEPOWER DESC LIMIT 1
medium gold: SELECT ID FROM CARS_DATA ORDER BY HORSEPOWER DESC LIMIT 1

eval_err_num:88
medium pred: SELECT ACCELERATE FROM CARS_DATA WHERE ID=39
medium gold: SELECT ACCELERATE FROM CARS_DATA ORDER BY HORSEPOWER DESC LIMIT 1

eval_err_num:89
easy pred: SELECT CAR_NAMES.MAKE, CAR_NAMES.MODEL, CARS_DATA.ACCELERATE FROM CAR_NAMES INNER JOIN CARS_DATA ON CAR_NAMES.MAKEID = CARS_DATA.ID WHERE CARS_DATA.ACCELERATE > 19.0
easy gold: SELECT COUNT ( * )  FROM CARS_DATA WHERE ACCELERATE  >  19.0

eval_err_num:90
easy pred: I'M SORRY, I CANNOT ANSWER THAT QUESTION AS THERE IS NO INFORMATION IN THE PROVIDED TABLE STRUCTURES ABOUT AN "AUDITIONS" CONCERT.
easy gold: SELECT YEAR FROM CONCERT WHERE CONCERT_NAME  =  "AUDITIONS"

eval_err_num:91
easy pred: I'M SORRY, I CANNOT ANSWER THAT QUESTION AS THERE IS NO INFORMATION IN THE PROVIDED TABLE STRUCTURES ABOUT A "SUPER BOOTCAMP" CONCERT.
easy gold: SELECT YEAR FROM CONCERT WHERE CONCERT_NAME  =  "SUPER BOOTCAMP"

eval_err_num:92
easy pred: I'M SORRY, I CANNOT ANSWER THAT QUESTION AS THERE IS NO INFORMATION IN THE PROVIDED TABLE STRUCTURES ABOUT A "HOME VISITS" CONCERT.
easy gold: SELECT YEAR FROM CONCERT WHERE CONCERT_NAME  =  "HOME VISITS"

eval_err_num:93
medium pred: SELECT COUNT(*) AS "TOTAL CONCERTS" FROM "CONCERT" WHERE "YEAR" = '2014' OR "YEAR" = '2015'
medium gold: SELECT COUNT ( * )  FROM CONCERT WHERE YEAR   =   2014 OR YEAR   =   2015

eval_err_num:94
easy pred: SELECT COUNT(*) AS "TOTAL CONCERTS IN 2014" FROM "CONCERT" WHERE "YEAR" = '2014'
easy gold: SELECT COUNT ( * )  FROM CONCERT WHERE YEAR   =   2014

eval_err_num:95
easy pred: SELECT COUNT(*) AS "TOTAL CONCERTS IN 2015" FROM "CONCERT" WHERE "YEAR" = '2015'
easy gold: SELECT COUNT ( * )  FROM CONCERT WHERE YEAR   =   2015

eval_err_num:96
easy pred: SELECT COUNT(*) FROM STUDENT_ENROLMENT WHERE DATE_LEFT IS NOT NULL
easy gold: SELECT COUNT ( * )   FROM STUDENTS

eval_err_num:97
medium pred: SELECT FIRST_NAME, MIDDLE_NAME, LAST_NAME FROM STUDENTS WHERE DATE_LEFT = (SELECT MIN(DATE_LEFT) FROM STUDENT_ENROLMENT WHERE DATE_LEFT IS NOT NULL)
medium gold: SELECT FIRST_NAME ,  MIDDLE_NAME ,  LAST_NAME FROM STUDENTS ORDER BY DATE_LEFT ASC LIMIT 1

eval_err_num:98
easy pred: SELECT * FROM FLIGHTS WHERE FLIGHTNO = 28 AND SOURCEAIRPORT IS NOT NULL
easy gold: SELECT SOURCEAIRPORT FROM FLIGHTS WHERE FLIGHTNO = '28'

hard pred: SELECT AIRPORTNAME FROM AIRPORTS WHERE AIRPORTCODE NOT IN (SELECT DISTINCT SOURCEAIRPORT FROM FLIGHTS UNION SELECT DISTINCT DESTAIRPORT FROM FLIGHTS)
hard gold: SELECT AIRPORTNAME FROM AIRPORTS WHERE AIRPORTCODE NOT IN  ( SELECT SOURCEAIRPORT FROM FLIGHTS UNION SELECT DESTAIRPORT FROM FLIGHTS ) 

eval_err_num:99
medium pred: SELECT MIN(TRANSCRIPT_DATE) AS FIRST_TRANSCRIPT_RELEASE_DATE FROM TRANSCRIPTS
medium gold: SELECT * FROM TRANSCRIPTS ORDER BY TRANSCRIPT_DATE ASC LIMIT 1

medium pred: SELECT WINNER_RANK_POINTS FROM MATCHES ORDER BY WINNER_AGE ASC LIMIT 3
medium gold: SELECT LOSER_RANK_POINTS FROM MATCHES ORDER BY WINNER_AGE LIMIT 3

eval_err_num:100
easy pred: SELECT COUNT(*) AS NUMBER_OF_FRIENDS FROM FRIEND
easy gold: SELECT COUNT ( * )  FROM FRIEND

eval_err_num:101
easy pred: SELECT AVG(GRADE) AS AVERAGE_GRADE FROM HIGHSCHOOLER
easy gold: SELECT AVG ( GRADE )  FROM HIGHSCHOOLER

eval_err_num:102
easy pred: SELECT COUNT(*) AS "TOTAL POKER PLAYERS" FROM POKER_PLAYER
easy gold: SELECT COUNT ( * )  FROM POKER_PLAYER

eval_err_num:103
medium pred: SELECT COUNT(*) AS "PLAYERS EARNING MORE THAN 300000" FROM POKER_PLAYER WHERE EARNINGS > 300000
medium gold: SELECT COUNT ( * )  FROM PEOPLE AS T1 JOIN POKER_PLAYER AS T2 ON T1.PEOPLE_ID   =   T2.PEOPLE_ID WHERE T2.EARNINGS  >  300000

eval_err_num:104
medium pred: SELECT P.NAME FROM POKER_PLAYER PP JOIN PEOPLE P ON PP.PEOPLE_ID = P.PEOPLE_ID WHERE PP.EARNINGS > 300000
medium gold: SELECT T1.NAME FROM PEOPLE AS T1 JOIN POKER_PLAYER AS T2 ON T1.PEOPLE_ID   =   T2.PEOPLE_ID WHERE T2.EARNINGS  >  300000

eval_err_num:105
easy pred: SELECT COUNT(*) AS "NUMBER OF MUSEUMS" FROM MUSEUM
easy gold: SELECT COUNT ( * )  FROM MUSEUM

easy pred: SELECT MUSEUM_ID, NAME, NUM_OF_STAFF FROM MUSEUM
easy gold: SELECT NUM_OF_STAFF FROM MUSEUM

medium pred: SELECT MUSEUM_ID, NAME FROM MUSEUM WHERE NUM_OF_STAFF = (SELECT MAX(NUM_OF_STAFF) FROM MUSEUM)
medium gold: SELECT MUSEUM_ID, NAME FROM MUSEUM ORDER BY NUM_OF_STAFF DESC LIMIT 1

eval_err_num:106
easy pred: SELECT COUNT(*) AS TOTAL_STUDENTS FROM STUDENTS
easy gold: SELECT COUNT ( * )  FROM STUDENTS

medium pred: SELECT FIRST_NAME, MIDDLE_NAME, LAST_NAME FROM STUDENTS LIMIT 15
medium gold: SELECT FIRST_NAME,MIDDLE_NAME,LAST_NAME  FROM STUDENTS

easy pred: SELECT FIRST_NAME, MIDDLE_NAME, LAST_NAME, DATE_FIRST_REGISTERED FROM STUDENTS LIMIT 15
easy gold: SELECT DATE_FIRST_REGISTERED  FROM STUDENTS

easy pred: SELECT COUNT(*) FROM STUDENT
easy gold: SELECT COUNT ( STUID )  FROM STUDENT

eval_err_num:107
medium pred: SELECT S.AGE, P.PETID FROM STUDENT S JOIN HAS_PET HP ON S.STUID = HP.STUID JOIN PETS P ON HP.PETID = P.PETID WHERE S.LNAME = 'SMITH'
medium gold: SELECT T2.PETID ,AGE FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID   =   T2.STUID WHERE T1.LNAME   =   'SMITH'

easy pred: SELECT DISTINCT STUID FROM HAS_PET
easy gold: SELECT DISTINCT T1.STUID FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID   =   T2.STUID

eval_err_num:108
medium pred: SELECT S.FNAME, S.LNAME, S.MAJOR, S.AGE FROM STUDENT S INNER JOIN HAS_PET HP ON S.STUID = HP.STUID
medium gold: SELECT DISTINCT T1.FNAME, T1.LNAME, T1.MAJOR, T1.AGE FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID   =   T2.STUID

eval_err_num:109
extra pred: SELECT S.FNAME, S.LNAME, S.MAJOR, S.AGE FROM STUDENT S INNER JOIN HAS_PET HP ON S.STUID = HP.STUID INNER JOIN PETS P ON HP.PETID = P.PETID WHERE P.PETTYPE != 'CAT'
extra gold: SELECT FNAME, LNAME, MAJOR, AGE FROM STUDENT WHERE STUID NOT IN  ( SELECT T1.STUID FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID  =  T2.STUID JOIN PETS AS T3 ON T3.PETID  =  T2.PETID WHERE T3.PETTYPE  =  'CAT' ) 

eval_err_num:110
easy pred: SELECT COUNT(*) AS NUM_DOGS FROM DOGS
easy gold: SELECT COUNT ( * )  FROM DOGS

eval_err_num:111
easy pred: ASSUMING KACEY IS A DOG NAME, THIS QUESTION CANNOT BE ANSWERED AS THERE IS NO SPECIFIC RECORD OR INFORMATION ABOUT A DOG NAMED KACEY IN THE GIVEN TABLES.
easy gold: SELECT AGE FROM DOGS WHERE NAME  =  "KACEY"

medium pred: SELECT NAME, WEIGHT FROM DOGS WHERE WEIGHT = (SELECT MAX(WEIGHT) FROM DOGS)
medium gold: SELECT NAME FROM DOGS ORDER BY WEIGHT DESC LIMIT 1

easy pred: SELECT SUM(POPULATION) FROM COUNTRY WHERE NAME = 'ANTARCTICA'
easy gold: SELECT POPULATION FROM COUNTRY WHERE NAME  =  "ANTARCTICA"

eval_err_num:112
hard pred: SELECT COUNT(*) FROM STUDENT_ENROLMENT SE JOIN DEGREE_PROGRAMS DP ON SE.DEGREE_PROGRAM_ID = DP.DEGREE_PROGRAM_ID WHERE DP.DEGREE_SUMMARY_NAME LIKE '%BACHELOR%'
hard gold: SELECT COUNT ( * )  FROM STUDENTS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.STUDENT_ID   =   T2.STUDENT_ID JOIN DEGREE_PROGRAMS AS T3 ON T2.DEGREE_PROGRAM_ID   =   T3.DEGREE_PROGRAM_ID WHERE T3.DEGREE_SUMMARY_NAME   =   'BACHELOR'

eval_err_num:113
hard pred: SELECT SE.STUDENT_ID FROM STUDENT_ENROLMENT SE JOIN DEGREE_PROGRAMS DP ON SE.DEGREE_PROGRAM_ID = DP.DEGREE_PROGRAM_ID WHERE DP.DEGREE_SUMMARY_NAME LIKE '%BACHELOR%'
hard gold: SELECT T1.STUDENT_ID FROM STUDENTS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.STUDENT_ID   =   T2.STUDENT_ID JOIN DEGREE_PROGRAMS AS T3 ON T2.DEGREE_PROGRAM_ID   =   T3.DEGREE_PROGRAM_ID WHERE T3.DEGREE_SUMMARY_NAME   =   'BACHELOR'

hard pred: SELECT * FROM STUDENTS WHERE STUDENT_ID = 9
hard gold: SELECT DISTINCT T1.FIRST_NAME, T1.MIDDLE_NAME, T1.LAST_NAME FROM STUDENTS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.STUDENT_ID   =   T2.STUDENT_ID JOIN DEGREE_PROGRAMS AS T3 ON T2.DEGREE_PROGRAM_ID   =   T3.DEGREE_PROGRAM_ID WHERE T1.STUDENT_ID  =  9

hard pred: SELECT * FROM STUDENTS WHERE STUDENT_ID = 7
hard gold: SELECT DISTINCT T1.FIRST_NAME, T1.MIDDLE_NAME, T1.LAST_NAME FROM STUDENTS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.STUDENT_ID   =   T2.STUDENT_ID JOIN DEGREE_PROGRAMS AS T3 ON T2.DEGREE_PROGRAM_ID   =   T3.DEGREE_PROGRAM_ID WHERE T1.STUDENT_ID  =  7

eval_err_num:114
hard pred: SELECT SE.STUDENT_ID, DP.DEGREE_SUMMARY_NAME FROM STUDENT_ENROLMENT SE JOIN DEGREE_PROGRAMS DP ON SE.DEGREE_PROGRAM_ID = DP.DEGREE_PROGRAM_ID WHERE DP.DEGREE_SUMMARY_NAME LIKE '%BACHELOR%'
hard gold: SELECT DISTINCT T1.FIRST_NAME ,  T1.MIDDLE_NAME ,  T1.LAST_NAME, T3.DEGREE_SUMMARY_NAME FROM STUDENTS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.STUDENT_ID   =   T2.STUDENT_ID JOIN DEGREE_PROGRAMS AS T3 ON T2.DEGREE_PROGRAM_ID   =   T3.DEGREE_PROGRAM_ID WHERE T3.DEGREE_SUMMARY_NAME   =   'BACHELOR'

medium pred: SELECT DISTINCT DEGREE_SUMMARY_DESCRIPTION FROM DEGREE_PROGRAMS
medium gold: SELECT DISTINCT T3.DEGREE_SUMMARY_DESCRIPTION FROM STUDENTS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.STUDENT_ID   =   T2.STUDENT_ID JOIN DEGREE_PROGRAMS AS T3 ON T2.DEGREE_PROGRAM_ID   =   T3.DEGREE_PROGRAM_ID

eval_err_num:115
hard pred: SELECT SE.STUDENT_ID FROM STUDENT_ENROLMENT SE JOIN DEGREE_PROGRAMS DP ON SE.DEGREE_PROGRAM_ID = DP.DEGREE_PROGRAM_ID WHERE DP.DEGREE_SUMMARY_NAME LIKE '%BACHELOR%'
hard gold: SELECT DISTINCT T1.STUDENT_ID FROM STUDENTS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.STUDENT_ID   =   T2.STUDENT_ID JOIN DEGREE_PROGRAMS AS T3 ON T2.DEGREE_PROGRAM_ID   =   T3.DEGREE_PROGRAM_ID WHERE T3.DEGREE_SUMMARY_NAME   =   'BACHELOR'

eval_err_num:116
hard pred: SELECT FIRST_NAME, MIDDLE_NAME, LAST_NAME FROM STUDENTS WHERE STUDENT_ID IN ( SELECT SE.STUDENT_ID FROM STUDENT_ENROLMENT SE JOIN DEGREE_PROGRAMS DP ON SE.DEGREE_PROGRAM_ID = DP.DEGREE_PROGRAM_ID WHERE DP.DEGREE_SUMMARY_NAME LIKE '%BACHELOR%' )
hard gold: SELECT DISTINCT T1.FIRST_NAME ,  T1.MIDDLE_NAME ,  T1.LAST_NAME FROM STUDENTS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.STUDENT_ID   =   T2.STUDENT_ID JOIN DEGREE_PROGRAMS AS T3 ON T2.DEGREE_PROGRAM_ID   =   T3.DEGREE_PROGRAM_ID WHERE T3.DEGREE_SUMMARY_NAME   =   'BACHELOR'

easy pred: SELECT COUNT(*) FROM CAR_NAMES WHERE MAKE = 'CHEVROLET'
easy gold: SELECT COUNT ( DISTINCT MAKE )  FROM CAR_NAMES WHERE MODEL  =  'CHEVROLET'

easy pred: SELECT COUNT(*) FROM MODEL_LIST
easy gold: SELECT COUNT ( DISTINCT MODEL )  FROM CAR_NAMES

eval_err_num:117
hard pred: SELECT MODEL FROM MODEL_LIST WHERE MODELID = ( SELECT MAKER FROM CAR_NAMES GROUP BY MAKER ORDER BY COUNT(*) DESC LIMIT 1 )
hard gold: SELECT MODEL FROM CAR_NAMES GROUP BY MODEL ORDER BY COUNT ( DISTINCT MAKE )  DESC LIMIT 1

eval_err_num:118
medium pred: SELECT TEACHER.NAME, COURSE.COURSE_ID, COURSE.COURSE FROM TEACHER INNER JOIN COURSE_ARRANGE ON TEACHER.TEACHER_ID = COURSE_ARRANGE.TEACHER_ID INNER JOIN COURSE ON COURSE_ARRANGE.COURSE_ID = COURSE.COURSE_ID
medium gold: SELECT T2.NAME, T1.COURSE_ID FROM COURSE_ARRANGE AS T1 JOIN TEACHER AS T2 ON T1.TEACHER_ID   =   T2.TEACHER_ID

eval_err_num:119
medium pred: SELECT TEACHER.TEACHER_ID, COUNT(COURSE_ARRANGE.COURSE_ID) AS 'NUMBER OF COURSES' FROM TEACHER LEFT JOIN COURSE_ARRANGE ON TEACHER.TEACHER_ID = COURSE_ARRANGE.TEACHER_ID GROUP BY TEACHER.TEACHER_ID
medium gold: SELECT T2.NAME ,  COUNT ( * )  FROM COURSE_ARRANGE AS T1 JOIN TEACHER AS T2 ON T1.TEACHER_ID   =   T2.TEACHER_ID GROUP BY T2.NAME

eval_err_num:120
medium pred: SELECT "DATE" FROM "PERFORMANCE" WHERE "TYPE" = 'AUDITION'
medium gold: SELECT DATE FROM PERFORMANCE WHERE TYPE LIKE "%AUDITION%"

easy pred: SELECT COUNTRY_CODE FROM PLAYERS GROUP BY COUNTRY_CODE HAVING COUNT(PLAYER_ID) > 50
easy gold: SELECT COUNTRY_CODE FROM PLAYERS GROUP BY COUNTRY_CODE HAVING COUNT ( * )  > 50

medium pred: SELECT REGION FROM COUNTRY WHERE CODE = (SELECT COUNTRYCODE FROM CITY WHERE NAME = 'KABUL')
medium gold: SELECT REGION FROM COUNTRY AS T1 JOIN CITY AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE T2.NAME   =   "KABUL"

medium pred: SELECT REGION FROM COUNTRY WHERE CODE = (SELECT COUNTRYCODE FROM CITY WHERE NAME = 'HERAT')
medium gold: SELECT REGION FROM COUNTRY AS T1 JOIN CITY AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE T2.NAME   =   "HERAT"

medium pred: SELECT REGION FROM COUNTRY WHERE CODE = (SELECT COUNTRYCODE FROM CITY WHERE NAME = 'QUANDAHAR')
medium gold: SELECT REGION FROM COUNTRY AS T1 JOIN CITY AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE T2.NAME   =   "QANDAHAR"

eval_err_num:121
hard pred: SELECT YEAR, COUNT(*) AS NUM_MATCHES FROM MATCHES GROUP BY YEAR ORDER BY NUM_MATCHES DESC LIMIT 1
hard gold: SELECT YEAR FROM MATCHES GROUP BY YEAR ORDER BY COUNT ( * )  DESC LIMIT 1

eval_err_num:122
hard pred: SELECT YEAR, COUNT(*) AS NUM_MATCHES FROM MATCHES GROUP BY YEAR ORDER BY NUM_MATCHES ASC LIMIT 1
hard gold: SELECT YEAR FROM MATCHES GROUP BY YEAR ORDER BY COUNT ( * )  LIMIT 1

eval_err_num:123
hard pred: SELECT COUNT(*) AS NUM_MATCHES FROM MATCHES WHERE YEAR = ( SELECT YEAR FROM MATCHES GROUP BY YEAR ORDER BY COUNT(*) ASC LIMIT 1 )
hard gold: SELECT YEAR, COUNT ( * )  FROM MATCHES GROUP BY YEAR ORDER BY COUNT ( * )  LIMIT 1

eval_err_num:124
medium pred: SELECT COUNT(*) AS NUM_MATCHES FROM MATCHES WHERE YEAR = 2016
medium gold: SELECT YEAR, COUNT ( * )  FROM MATCHES WHERE YEAR  =  2016

eval_err_num:125
easy pred: SELECT COUNT(*) AS NUM_HARD_SURFACE_MATCHES FROM MATCHES WHERE YEAR = 2016 AND SURFACE = 'HARD'
easy gold: SELECT COUNT ( * )  FROM MATCHES WHERE SURFACE  =  "HARD"

eval_err_num:126
easy pred: SELECT CAR_MAKERS.FULLNAME, COUNT(MODEL_LIST.MODEL) AS "NUMBER OF MODELS" FROM CAR_MAKERS JOIN MODEL_LIST ON CAR_MAKERS.ID = MODEL_LIST.MAKER GROUP BY CAR_MAKERS.FULLNAME
easy gold: SELECT  ID  FROM CAR_MAKERS

easy pred: SELECT CAR_MAKERS.ID, COUNTRIES.COUNTRYID FROM CAR_MAKERS JOIN COUNTRIES ON CAR_MAKERS.COUNTRY = COUNTRIES.COUNTRYNAME
easy gold: SELECT  COUNTRY  FROM CAR_MAKERS

eval_err_num:127
easy pred: SELECT AVG(PERCENTAGE) AS AVERAGE_PERCENT FROM COUNTRYLANGUAGE
easy gold: SELECT AVG ( PERCENTAGE )  FROM COUNTRYLANGUAGE

hard pred: SELECT COUNTRYCODE FROM COUNTRYLANGUAGE WHERE LANGUAGE = 'DUTCH' AND PERCENTAGE = (SELECT MAX(PERCENTAGE) FROM COUNTRYLANGUAGE WHERE LANGUAGE = 'DUTCH')
hard gold: SELECT COUNTRYCODE FROM COUNTRYLANGUAGE WHERE LANGUAGE  =  "DUTCH" ORDER BY PERCENTAGE DESC LIMIT 1

eval_err_num:128
easy pred: YES, SORRY FOR THE CONFUSION. DID YOU MEAN TO ASK FOR THE DIFFERENCE BETWEEN THE AVERAGE PERCENTAGE OF OFFICIAL LANGUAGES AND NON-OFFICIAL LANGUAGES IN EACH COUNTRY?
easy gold: SELECT AVG ( PERCENTAGE )  FROM COUNTRYLANGUAGE WHERE LANGUAGE  =  "PAPIAMENTO"

medium pred: SELECT NAME FROM VISITOR ORDER BY AGE DESC, LEVEL_OF_MEMBERSHIP ASC
medium gold: SELECT NAME ,  LEVEL_OF_MEMBERSHIP FROM VISITOR WHERE LEVEL_OF_MEMBERSHIP  >  4 ORDER BY AGE DESC

eval_err_num:129
extra pred: SELECT COUNTRY.NAME, COUNT(COUNTRYLANGUAGE.LANGUAGE) AS NUMLANGUAGES FROM COUNTRY JOIN COUNTRYLANGUAGE ON COUNTRY.CODE = COUNTRYLANGUAGE.COUNTRYCODE GROUP BY COUNTRY.CODE ORDER BY NUMLANGUAGES DESC LIMIT 1
extra gold: SELECT T1.NAME FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE GROUP BY T1.NAME ORDER BY COUNT ( * )  DESC LIMIT 1

eval_err_num:130
medium pred: SELECT COUNT(LANGUAGE) AS NUMLANGUAGES FROM COUNTRYLANGUAGE WHERE COUNTRYCODE = 'CAN'
medium gold: SELECT COUNT ( * )  FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE T1.NAME  =  "CANADA"

medium pred: SELECT LANGUAGE FROM COUNTRYLANGUAGE WHERE COUNTRYCODE = 'CAN'
medium gold: SELECT T2.LANGUAGE FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE T1.NAME  =  "CANADA"

eval_err_num:131
easy pred: SELECT COUNT(DISTINCT COUNTRYCODE) AS NUMCOUNTRIES FROM COUNTRYLANGUAGE WHERE LANGUAGE = 'CHINESE'
easy gold: SELECT COUNT ( DISTINCT COUNTRYCODE )  FROM COUNTRYLANGUAGE WHERE LANGUAGE  =  "CHINESE"

extra pred: SELECT COUNTRY.NAME, COUNTRYLANGUAGE.LANGUAGE FROM COUNTRY JOIN COUNTRYLANGUAGE ON COUNTRY.CODE = COUNTRYLANGUAGE.COUNTRYCODE WHERE COUNTRY.CONTINENT = 'NORTH AMERICA' AND COUNTRYLANGUAGE.ISOFFICIAL = 'T'
extra gold: SELECT LANGUAGE FROM COUNTRYLANGUAGE WHERE COUNTRYCODE IN  ( SELECT CODE FROM COUNTRY WHERE CONTINENT  =  "NORTH AMERICA" )  AND ISOFFICIAL  =  "T"

easy pred: SELECT LIFEEXPECTANCY FROM COUNTRY WHERE CODE = 'CAN'
easy gold: SELECT LIFEEXPECTANCY FROM COUNTRY WHERE NAME  =  "CANADA"

eval_err_num:132
medium pred: SELECT COUNT(*) FROM ( SELECT STUID FROM HAS_PET GROUP BY STUID HAVING COUNT(PETID) > 1 ) MULTI_PET_STUDENTS
medium gold: SELECT COUNT ( * )  FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID   =   T2.STUID GROUP BY T1.STUID HAVING COUNT ( * )   >  1

medium pred: SELECT LNAME, FNAME FROM STUDENT WHERE STUID IN ( SELECT STUID FROM HAS_PET GROUP BY STUID HAVING COUNT(PETID) > 1 )
medium gold: SELECT T1.LNAME, T1.FNAME  FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID   =   T2.STUID GROUP BY T1.STUID HAVING COUNT ( * )   >  1

medium pred: SELECT SEX FROM STUDENT WHERE LNAME = 'KIM' AND FNAME = 'TRACY'
medium gold: SELECT T1.LNAME, T1.FNAME, T1.SEX  FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID   =   T2.STUID GROUP BY T1.STUID HAVING COUNT ( * )   >  1

eval_err_num:133
easy pred: SELECT COUNT(DISTINCT REGION) AS NUM_REGIONS FROM COUNTRY WHERE CONTINENT = 'ASIA'
easy gold: SELECT COUNT ( * )  FROM  ( SELECT REGION FROM COUNTRY WHERE CONTINENT   =   "ASIA" GROUP BY REGION ) 

eval_err_num:134
easy pred: SELECT COUNT(DISTINCT REGION) AS NUM_REGIONS FROM COUNTRY WHERE CONTINENT = 'EUROPE'
easy gold: SELECT COUNT ( * )  FROM  ( SELECT REGION FROM COUNTRY WHERE CONTINENT   =   "EUROPE" GROUP BY REGION ) 

eval_err_num:135
medium pred: I'M SORRY, CAN YOU PLEASE CLARIFY WHICH 10 REGIONS YOU ARE REFERRING TO?
medium gold: SELECT SUM ( SURFACEAREA )  FROM COUNTRY WHERE CONTINENT   =   "ASIA" OR CONTINENT   =   "EUROPE"

medium pred: SELECT COUNT(TEMPLATE_ID) FROM TEMPLATES WHERE TEMPLATE_DETAILS = 'PRESENTATION'
medium gold: SELECT COUNT ( * )  FROM REF_TEMPLATE_TYPES AS T1 JOIN TEMPLATES AS T2 ON T1.TEMPLATE_TYPE_CODE   =  T2.TEMPLATE_TYPE_CODE WHERE T1.TEMPLATE_TYPE_DESCRIPTION   =   "PRESENTATION"

eval_err_num:136
medium pred: SELECT T.TEMPLATE_ID FROM TEMPLATES T INNER JOIN REF_TEMPLATE_TYPES TT ON T.TEMPLATE_TYPE_CODE = TT.TEMPLATE_TYPE_CODE WHERE TT.TEMPLATE_TYPE_DESCRIPTION = 'PRESENTATION'
medium gold: SELECT T2.TEMPLATE_ID FROM REF_TEMPLATE_TYPES AS T1 JOIN TEMPLATES AS T2 ON T1.TEMPLATE_TYPE_CODE   =  T2.TEMPLATE_TYPE_CODE WHERE T1.TEMPLATE_TYPE_DESCRIPTION   =   "PRESENTATION"

eval_err_num:137
medium pred: SELECT T.TEMPLATE_ID, T.TEMPLATE_TYPE_CODE FROM TEMPLATES T INNER JOIN REF_TEMPLATE_TYPES TT ON T.TEMPLATE_TYPE_CODE = TT.TEMPLATE_TYPE_CODE WHERE TT.TEMPLATE_TYPE_DESCRIPTION = 'PRESENTATION'
medium gold: SELECT T2.TEMPLATE_ID, T2.TEMPLATE_TYPE_CODE FROM REF_TEMPLATE_TYPES AS T1 JOIN TEMPLATES AS T2 ON T1.TEMPLATE_TYPE_CODE   =  T2.TEMPLATE_TYPE_CODE WHERE T1.TEMPLATE_TYPE_DESCRIPTION   =   "PRESENTATION"

eval_err_num:138
hard pred: SELECT COUNT(*) AS MAX_ENROLLMENT_COUNT FROM ( SELECT COUNT(*) AS ENROLLMENT_COUNT FROM STUDENT_ENROLMENT_COURSES GROUP BY COURSE_ID, STUDENT_ENROLMENT_ID ) AS ENROLLMENT_COUNTS GROUP BY ENROLLMENT_COUNTS.ENROLLMENT_COUNT ORDER BY ENROLLMENT_COUNTS.ENROLLMENT_COUNT DESC LIMIT 1
hard gold: SELECT COUNT ( * )   FROM TRANSCRIPT_CONTENTS GROUP BY STUDENT_COURSE_ID ORDER BY COUNT ( * )  DESC LIMIT 1

eval_err_num:139
hard pred: SELECT SEC.STUDENT_COURSE_ID FROM STUDENT_ENROLMENT_COURSES SEC INNER JOIN ( SELECT COUNT(*) AS ENROLLMENT_COUNT FROM STUDENT_ENROLMENT_COURSES GROUP BY COURSE_ID, STUDENT_ENROLMENT_ID ) AS ENROLLMENT_COUNTS ON SEC.COURSE_ID = ENROLLMENT_COUNTS.COURSE_ID AND SEC.STUDENT_ENROLMENT_ID = ENROLLMENT_COUNTS.STUDENT_ENROLMENT_ID GROUP BY SEC.STUDENT_COURSE_ID HAVING COUNT(*) = ( SELECT COUNT(*) AS MAX_ENROLLMENT_COUNT FROM ( SELECT COUNT(*) AS ENROLLMENT_COUNT FROM STUDENT_ENROLMENT_COURSES GROUP BY COURSE_ID, STUDENT_ENROLMENT_ID ) AS ENROLLMENT_COUNTS GROUP BY ENROLLMENT_COUNTS.ENROLLMENT_COUNT ORDER BY ENROLLMENT_COUNTS.ENROLLMENT_COUNT DESC LIMIT 1 )
hard gold: SELECT STUDENT_COURSE_ID FROM TRANSCRIPT_CONTENTS GROUP BY STUDENT_COURSE_ID ORDER BY COUNT ( * )  DESC LIMIT 1

eval_err_num:140
hard pred: SELECT COUNT(*) AS MIN_ENROLLMENT_COUNT FROM ( SELECT COUNT(*) AS ENROLLMENT_COUNT FROM STUDENT_ENROLMENT_COURSES GROUP BY COURSE_ID, STUDENT_ENROLMENT_ID ) AS ENROLLMENT_COUNTS GROUP BY ENROLLMENT_COUNTS.ENROLLMENT_COUNT ORDER BY ENROLLMENT_COUNTS.ENROLLMENT_COUNT ASC LIMIT 1
hard gold: SELECT COUNT ( * )  FROM TRANSCRIPT_CONTENTS GROUP BY STUDENT_COURSE_ID ORDER BY COUNT ( * )  LIMIT 1

eval_err_num:141
hard pred: SELECT SEC.STUDENT_COURSE_ID FROM STUDENT_ENROLMENT_COURSES SEC INNER JOIN ( SELECT COUNT(*) AS ENROLLMENT_COUNT FROM STUDENT_ENROLMENT_COURSES GROUP BY COURSE_ID, STUDENT_ENROLMENT_ID ) AS ENROLLMENT_COUNTS ON SEC.COURSE_ID = ENROLLMENT_COUNTS.COURSE_ID AND SEC.STUDENT_ENROLMENT_ID = ENROLLMENT_COUNTS.STUDENT_ENROLMENT_ID GROUP BY SEC.STUDENT_COURSE_ID HAVING COUNT(*) = ( SELECT COUNT(*) AS MIN_ENROLLMENT_COUNT FROM ( SELECT COUNT(*) AS ENROLLMENT_COUNT FROM STUDENT_ENROLMENT_COURSES GROUP BY COURSE_ID, STUDENT_ENROLMENT_ID ) AS ENROLLMENT_COUNTS GROUP BY ENROLLMENT_COUNTS.ENROLLMENT_COUNT ORDER BY ENROLLMENT_COUNTS.ENROLLMENT_COUNT ASC LIMIT 1 )
hard gold: SELECT  STUDENT_COURSE_ID FROM TRANSCRIPT_CONTENTS GROUP BY STUDENT_COURSE_ID ORDER BY COUNT ( * )  LIMIT 1

eval_err_num:142
easy pred: THE `STUDENT_COURSE_ID` IS A UNIQUE IDENTIFIER FOR EACH ROW IN THE `STUDENT_ENROLMENT_COURSES` TABLE, AND IT DOES NOT REPRESENT A NUMERICAL VALUE THAT CAN BE AVERAGED. THEREFORE, IT DOES NOT MAKE SENSE TO CALCULATE THE AVERAGE OF `STUDENT_COURSE_ID`. IF YOU COULD PROVIDE MORE INFORMATION ABOUT THE SPECIFIC DATA YOU ARE LOOKING FOR, I WOULD BE HAPPY TO HELP YOU WRITE A QUERY TO RETRIEVE IT.
easy gold: SELECT AVG ( STUDENT_COURSE_ID )  FROM TRANSCRIPT_CONTENTS

eval_err_num:143
hard pred: SELECT PROPERTY_NAME FROM PROPERTIES WHERE PROPERTY_TYPE_CODE IN ('HOUSE', 'APARTMENT') AND ROOM_COUNT > 1
hard gold: SELECT PROPERTY_NAME FROM PROPERTIES WHERE PROPERTY_TYPE_CODE   =   "HOUSE" UNION SELECT PROPERTY_NAME FROM PROPERTIES WHERE PROPERTY_TYPE_CODE   =   "APARTMENT" AND ROOM_COUNT  >  1

eval_err_num:144
extra pred: SELECT PROPERTY_NAME, ROOM_COUNT FROM PROPERTIES WHERE PROPERTY_TYPE_CODE IN ('HOUSE', 'APARTMENT') AND ROOM_COUNT > 1
extra gold: SELECT PROPERTY_NAME, ROOM_COUNT FROM PROPERTIES WHERE PROPERTY_TYPE_CODE   =   "HOUSE" UNION SELECT PROPERTY_NAME, ROOM_COUNT FROM PROPERTIES WHERE PROPERTY_TYPE_CODE   =   "APARTMENT" AND ROOM_COUNT  >  1

eval_err_num:145
medium pred: I'M SORRY, THE 'ASY' AIRPORT CODE IS NOT INCLUDED IN THE AIRPORTS TABLE. COULD YOU PLEASE PROVIDE ANOTHER AIRPORT CODE?
medium gold: SELECT COUNT ( * )  FROM FLIGHTS WHERE DESTAIRPORT LIKE "%ASY%"

eval_err_num:146
extra pred: SELECT COUNT(*) FROM FLIGHTS WHERE DESTAIRPORT = 'ASY' AND SOURCEAIRPORT IN ('APG', 'ABR')
extra gold: SELECT COUNT ( * )  FROM FLIGHTS WHERE DESTAIRPORT LIKE "%ASY%" AND SOURCEAIRPORT LIKE "%APG%" UNION SELECT COUNT ( * )  FROM FLIGHTS WHERE DESTAIRPORT LIKE "%ASY%" AND SOURCEAIRPORT LIKE "%ABR%"

medium pred: SELECT COUNT(*) FROM CAR_MAKERS WHERE COUNTRY = (SELECT COUNTRYID FROM COUNTRIES WHERE COUNTRYNAME = 'GERMANY')
medium gold: SELECT COUNT ( * )  FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.COUNTRY   =   T2.COUNTRYID WHERE T2.COUNTRYNAME   =   'GERMANY'

medium pred: SELECT MAKER FROM CAR_MAKERS WHERE COUNTRY = (SELECT COUNTRYID FROM COUNTRIES WHERE COUNTRYNAME = 'GERMANY')
medium gold: SELECT T1.MAKER FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.COUNTRY   =   T2.COUNTRYID WHERE T2.COUNTRYNAME   =   'GERMANY'

medium pred: SELECT COUNT(*) FROM CAR_MAKERS WHERE COUNTRY = (SELECT COUNTRYID FROM COUNTRIES WHERE COUNTRYNAME = 'USA')
medium gold: SELECT COUNT ( T1.MAKER )  FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.COUNTRY   =   T2.COUNTRYID WHERE T2.COUNTRYNAME   =   'USA'

medium pred: SELECT MAKER FROM CAR_MAKERS WHERE COUNTRY = (SELECT COUNTRYID FROM COUNTRIES WHERE COUNTRYNAME = 'USA')
medium gold: SELECT T1.MAKER FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.COUNTRY   =   T2.COUNTRYID WHERE T2.COUNTRYNAME   =   'USA'

medium pred: SELECT CITY FROM EMPLOYEE WHERE AGE < 30 GROUP BY CITY HAVING COUNT(EMPLOYEE_ID) > 1
medium gold: SELECT CITY FROM EMPLOYEE WHERE AGE  <  30 GROUP BY CITY HAVING COUNT ( * )   >  1

medium pred: SELECT CITY FROM EMPLOYEE WHERE AGE > 30 GROUP BY CITY HAVING COUNT(EMPLOYEE_ID) > 1
medium gold: SELECT CITY FROM EMPLOYEE WHERE AGE  >  30 GROUP BY CITY HAVING COUNT ( * )   >  1

easy pred: SELECT CITY FROM EMPLOYEE WHERE AGE < 29 GROUP BY CITY HAVING COUNT(DISTINCT EMPLOYEE_ID) = (SELECT COUNT(*) FROM EMPLOYEE WHERE AGE < 29)
easy gold: SELECT CITY FROM EMPLOYEE WHERE AGE  <  29

medium pred: SELECT MIN(AGE) FROM DOGS
medium gold: SELECT AGE FROM DOGS ORDER BY AGE ASC LIMIT 1

medium pred: SELECT NAME FROM DOGS WHERE AGE = '1 YEAR'
medium gold: SELECT NAME FROM DOGS ORDER BY AGE ASC LIMIT 1

eval_err_num:147
medium pred: SELECT O.FIRST_NAME, O.LAST_NAME FROM OWNERS O JOIN DOGS D ON O.OWNER_ID = D.OWNER_ID WHERE D.NAME = 'EVANGELINE' AND O.OWNER_ID <= 15
medium gold: SELECT T1.FIRST_NAME, T1.LAST_NAME FROM OWNERS AS T1 JOIN DOGS AS T2 ON T1.OWNER_ID   =   T2.OWNER_ID WHERE T2.NAME  =  "EVANGELINE"

eval_err_num:148
hard pred: SELECT "SINGER_ID" FROM "SINGER" WHERE "SINGER_ID" NOT IN (SELECT DISTINCT "SINGER_ID" FROM "SONG")
hard gold: SELECT NAME FROM SINGER WHERE SINGER_ID NOT IN  ( SELECT SINGER_ID FROM SONG ) 

eval_err_num:149
medium pred: SELECT "NAME" FROM "SINGER" WHERE "BIRTH_YEAR" IN (1948, 1949)
medium gold: SELECT NAME FROM SINGER WHERE BIRTH_YEAR   =   1948 OR BIRTH_YEAR   =   1949

eval_err_num:150
medium pred: SELECT "NAME", "CITIZENSHIP" FROM "SINGER" WHERE "BIRTH_YEAR" IN (1948, 1949)
medium gold: SELECT CITIZENSHIP FROM SINGER WHERE BIRTH_YEAR   =   1948 OR BIRTH_YEAR   =   1949

eval_err_num:151
extra pred: SELECT "NAME", "NET_WORTH_MILLIONS" FROM "SINGER" WHERE "BIRTH_YEAR" IN (1948, 1949) ORDER BY "NET_WORTH_MILLIONS" DESC LIMIT 1
extra gold: SELECT NAME FROM SINGER WHERE BIRTH_YEAR   =   1948 OR BIRTH_YEAR   =   1949 ORDER BY NET_WORTH_MILLIONS DESC LIMIT 1

eval_err_num:152
extra pred: I CANNOT ANSWER THAT QUESTION SINCE I DON'T KNOW WHICH SINGER YOU ARE REFERRING TO. PLEASE PROVIDE MORE INFORMATION.
extra gold: SELECT NAME,NET_WORTH_MILLIONS FROM SINGER WHERE BIRTH_YEAR   =   1948 OR BIRTH_YEAR   =   1949 ORDER BY NET_WORTH_MILLIONS DESC LIMIT 1

eval_err_num:153
extra pred: SELECT MIN("NET_WORTH_MILLIONS") FROM "SINGER" WHERE "BIRTH_YEAR" BETWEEN 1948 AND 1949
extra gold: SELECT NAME FROM SINGER WHERE BIRTH_YEAR   =   1948 OR BIRTH_YEAR   =   1949 ORDER BY NET_WORTH_MILLIONS LIMIT 1

eval_err_num:154
extra pred: SELECT COUNT(*) FROM BATTLE B WHERE NOT EXISTS (SELECT * FROM SHIP S WHERE S.LOST_IN_BATTLE = B.ID AND S.TONNAGE = '225')
extra gold: SELECT COUNT ( * )  FROM BATTLE WHERE ID NOT IN  (  SELECT LOST_IN_BATTLE FROM SHIP WHERE TONNAGE   =   '225'  ) 

hard pred: SELECT COUNT(DISTINCT LOST_IN_BATTLE) FROM SHIP WHERE TONNAGE = '225'
hard gold: SELECT COUNT ( * )  FROM BATTLE WHERE ID IN  (  SELECT LOST_IN_BATTLE FROM SHIP WHERE TONNAGE   =   '225'  ) 

eval_err_num:155
hard pred: SELECT B.RESULT FROM BATTLE B INNER JOIN SHIP S ON B.ID = S.LOST_IN_BATTLE WHERE S.TONNAGE = '225'
hard gold: SELECT RESULT FROM BATTLE WHERE ID IN  (  SELECT LOST_IN_BATTLE FROM SHIP WHERE TONNAGE   =   '225'  ) 

eval_err_num:156
hard pred: SELECT COUNTRYNAME FROM COUNTRIES WHERE COUNTRYID IN (1, 2, 3)
hard gold: SELECT COUNTRYNAME FROM COUNTRIES WHERE COUNTRYID = 1 OR  COUNTRYID = 2 OR COUNTRYID = 3 

easy pred: SELECT MODELID FROM MODEL_LIST WHERE MAKER = (SELECT ID FROM CAR_MAKERS WHERE MAKER = 'AMC')
easy gold: SELECT MODELID FROM MODEL_LIST WHERE MODEL  =  "AMC"

eval_err_num:157
extra pred: SELECT DISTINCT COUNTRIES.COUNTRYID, COUNTRIES.COUNTRYNAME FROM COUNTRIES INNER JOIN CAR_MAKERS ON COUNTRIES.COUNTRYID = CAR_MAKERS.COUNTRY INNER JOIN MODEL_LIST ON CAR_MAKERS.ID = MODEL_LIST.MAKER WHERE CAR_MAKERS.COUNTRY IN ( SELECT COUNTRY FROM CAR_MAKERS GROUP BY COUNTRY HAVING COUNT(DISTINCT MAKER) > 3 ) OR MODEL_LIST.MODEL = 'FIAT'
extra gold: SELECT T1.COUNTRYID ,  T1.COUNTRYNAME FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.COUNTRYID   =   T2.COUNTRY GROUP BY T1.COUNTRYID HAVING COUNT ( * )   >  3 UNION SELECT T1.COUNTRYID ,  T1.COUNTRYNAME FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.COUNTRYID   =   T2.COUNTRY JOIN MODEL_LIST AS T3 ON T2.ID   =   T3.MAKER WHERE T3.MODEL   =   'FIAT'

eval_err_num:158
medium pred: SELECT MAX("EARNINGS") AS "HIGHEST_EARNINGS", "MONEY_RANK" FROM "POKER_PLAYER" GROUP BY "MONEY_RANK" ORDER BY "HIGHEST_EARNINGS" DESC LIMIT 1
medium gold: SELECT MONEY_RANK FROM POKER_PLAYER ORDER BY EARNINGS DESC LIMIT 1

eval_err_num:159
medium pred: SELECT "PEOPLE_ID", MAX("EARNINGS") AS "HIGHEST_EARNINGS" FROM "POKER_PLAYER" GROUP BY "PEOPLE_ID" ORDER BY "HIGHEST_EARNINGS" DESC LIMIT 1
medium gold: SELECT PEOPLE_ID FROM POKER_PLAYER ORDER BY EARNINGS DESC LIMIT 1

eval_err_num:160
medium pred: SELECT "BEST_FINISH" FROM "POKER_PLAYER" WHERE "PEOPLE_ID" = (SELECT "PEOPLE_ID" FROM "POKER_PLAYER" GROUP BY "PEOPLE_ID" ORDER BY MAX("EARNINGS") DESC LIMIT 1)
medium gold: SELECT BEST_FINISH FROM POKER_PLAYER ORDER BY EARNINGS DESC LIMIT 1

eval_err_num:161
medium pred: SELECT MAX("EARNINGS") AS "HIGHEST_EARNINGS" FROM "POKER_PLAYER"
medium gold: SELECT EARNINGS FROM POKER_PLAYER ORDER BY EARNINGS DESC LIMIT 1

eval_err_num:162
easy pred: SELECT COUNT(*) AS "NUMBER OF ORCHESTRAS" FROM ORCHESTRA
easy gold: SELECT COUNT ( DISTINCT ORCHESTRA )  FROM ORCHESTRA

eval_err_num:163
extra pred: SELECT COUNT(*) AS "NUMBER OF ORCHESTRAS WITH NO PERFORMANCE" FROM ORCHESTRA WHERE ORCHESTRA_ID NOT IN (SELECT ORCHESTRA_ID FROM PERFORMANCE)
extra gold: SELECT COUNT ( ORCHESTRA )  FROM ORCHESTRA WHERE ORCHESTRA_ID NOT IN  ( SELECT ORCHESTRA_ID FROM PERFORMANCE ) 

eval_err_num:164
extra pred: SELECT DISTINCT S.NAME, S.LOCATION FROM STADIUM S INNER JOIN CONCERT C ON S.STADIUM_ID = C.STADIUM_ID WHERE C.YEAR = '2014' AND C.STADIUM_ID IN (SELECT C2.STADIUM_ID FROM CONCERT C2 WHERE C2.YEAR = '2015')
extra gold: SELECT T2.NAME ,  T2.LOCATION FROM CONCERT AS T1 JOIN STADIUM AS T2 ON T1.STADIUM_ID   =   T2.STADIUM_ID WHERE T1.YEAR   =   2014 INTERSECT SELECT T2.NAME ,  T2.LOCATION FROM CONCERT AS T1 JOIN STADIUM AS T2 ON T1.STADIUM_ID   =   T2.STADIUM_ID WHERE T1.YEAR   =   2015

medium pred: SELECT YEAR FROM CONCERT WHERE CONCERT_NAME = 'SUPER BOOTCAMP'
medium gold: SELECT YEAR FROM CONCERT WHERE CONCERT_NAME LIKE "%SUPER BOOTCAMP%"

medium pred: SELECT YEAR FROM CONCERT WHERE CONCERT_NAME = 'AUDITIONS'
medium gold: SELECT YEAR FROM CONCERT WHERE CONCERT_NAME LIKE "%AUDITIONS%"

eval_err_num:165
hard pred: SELECT S.NAME FROM STADIUM S INNER JOIN CONCERT C ON S.STADIUM_ID = C.STADIUM_ID WHERE C.CONCERT_NAME = 'AUDITIONS'
hard gold: SELECT T1.NAME FROM STADIUM AS T1 JOIN  CONCERT AS T2 ON T1.STADIUM_ID  =  T2.STADIUM_ID WHERE T2.CONCERT_NAME LIKE "%AUDITIONS%"

eval_err_num:166
hard pred: SELECT DISTINCT S.NAME, S.LOCATION FROM STADIUM S INNER JOIN CONCERT C ON S.STADIUM_ID = C.STADIUM_ID WHERE C.YEAR IN ('2014', '2015')
hard gold: SELECT T2.NAME , T2.LOCATION FROM CONCERT AS T1 JOIN STADIUM AS T2 ON T1.STADIUM_ID  =  T2.STADIUM_ID WHERE T1.YEAR  =  2014 OR T1.YEAR  =  2015

eval_err_num:167
medium pred: SELECT COUNT(*) FROM FLIGHTS WHERE AIRLINE = (SELECT UID FROM AIRLINES WHERE AIRLINE = 'UNITED AIRLINES') AND (SOURCEAIRPORT IN (SELECT AIRPORTCODE FROM AIRPORTS WHERE COUNTRY = 'UNITED STATES') OR DESTAIRPORT IN (SELECT AIRPORTCODE FROM AIRPORTS WHERE COUNTRY = 'UNITED STATES'))
medium gold: SELECT COUNT ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.AIRLINE   =   T1.UID WHERE T1.AIRLINE   =   "UNITED AIRLINES"

eval_err_num:168
medium pred: SELECT COUNT(DISTINCT DESTAIRPORT) FROM FLIGHTS WHERE AIRLINE = (SELECT UID FROM AIRLINES WHERE AIRLINE = 'UNITED AIRLINES') AND (SOURCEAIRPORT IN (SELECT AIRPORTCODE FROM AIRPORTS WHERE COUNTRY = 'UNITED STATES') OR DESTAIRPORT IN (SELECT AIRPORTCODE FROM AIRPORTS WHERE COUNTRY = 'UNITED STATES'))
medium gold: SELECT COUNT ( DISTINCT T2.DESTAIRPORT )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.AIRLINE   =   T1.UID WHERE T1.AIRLINE   =   "UNITED AIRLINES"

eval_err_num:169
medium pred: SELECT COUNT(*) FROM FLIGHTS WHERE AIRLINE = (SELECT UID FROM AIRLINES WHERE AIRLINE = 'UNITED AIRLINES') AND (SOURCEAIRPORT = 'ASY' OR DESTAIRPORT = 'ASY')
medium gold: SELECT COUNT ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.AIRLINE   =   T1.UID WHERE T1.AIRLINE   =   "UNITED AIRLINES" AND T2.DESTAIRPORT   =   "ASY"

extra pred: SELECT SEMESTER_ID, SEMESTER_NAME FROM SEMESTERS WHERE SEMESTER_ID = ( SELECT SEMESTER_ID FROM STUDENT_ENROLMENT GROUP BY SEMESTER_ID ORDER BY COUNT(STUDENT_ID) DESC, SEMESTER_ID DESC LIMIT 1 )
extra gold: SELECT T1.SEMESTER_NAME ,  T1.SEMESTER_ID FROM SEMESTERS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.SEMESTER_ID   =   T2.SEMESTER_ID GROUP BY T1.SEMESTER_ID ORDER BY COUNT ( * )  DESC LIMIT 1

eval_err_num:170
medium pred: SELECT GOVERNMENTFORM, AVG(LIFEEXPECTANCY) AS AVG_LIFE_EXPECTANCY FROM COUNTRY GROUP BY GOVERNMENTFORM
medium gold: SELECT GOVERNMENTFORM, AVG ( LIFEEXPECTANCY )  FROM COUNTRY GROUP BY GOVERNMENTFORM

eval_err_num:171
easy pred: SELECT GOVERNMENTFORM, AVG(LIFEEXPECTANCY) AS AVG_LIFE_EXPECTANCY FROM COUNTRY GROUP BY GOVERNMENTFORM HAVING AVG(LIFEEXPECTANCY) > 72
easy gold: SELECT GOVERNMENTFORM FROM COUNTRY GROUP BY GOVERNMENTFORM HAVING AVG ( LIFEEXPECTANCY )   >  72

eval_err_num:172
medium pred: SELECT C.GOVERNMENTFORM, AVG(C.LIFEEXPECTANCY) AS AVG_LIFE_EXPECTANCY, SUM(C.POPULATION) AS TOTAL_POPULATION FROM COUNTRY C GROUP BY C.GOVERNMENTFORM HAVING AVG(C.LIFEEXPECTANCY) > 72
medium gold: SELECT SUM ( POPULATION )  ,  GOVERNMENTFORM FROM COUNTRY GROUP BY GOVERNMENTFORM HAVING AVG ( LIFEEXPECTANCY )   >  72

eval_err_num:173
hard pred: SELECT "TV_CHANNEL"."ID" FROM "TV_CHANNEL" LEFT JOIN "CARTOON" ON "TV_CHANNEL"."ID" = "CARTOON"."CHANNEL" WHERE "CARTOON"."DIRECTED_BY" != 'BEN JONES' OR "CARTOON"."DIRECTED_BY" IS NULL
hard gold: SELECT ID FROM TV_CHANNEL EXCEPT SELECT CHANNEL FROM CARTOON WHERE DIRECTED_BY   =   'BEN JONES'

eval_err_num:174
hard pred: SELECT "TV_CHANNEL"."ID" FROM "TV_CHANNEL" JOIN "CARTOON" ON "TV_CHANNEL"."ID" = "CARTOON"."CHANNEL" WHERE "CARTOON"."DIRECTED_BY" = 'BEN JONES'
hard gold: SELECT ID FROM TV_CHANNEL WHERE ID IN  ( SELECT CHANNEL FROM CARTOON WHERE DIRECTED_BY   =   'BEN JONES' ) 

eval_err_num:175
easy pred: SELECT "TV_CHANNEL"."ID", "CARTOON"."TITLE" FROM "TV_CHANNEL" JOIN "CARTOON" ON "TV_CHANNEL"."ID" = "CARTOON"."CHANNEL"
easy gold: SELECT TITLE FROM CARTOON WHERE DIRECTED_BY   =   'BEN JONES'

easy pred: SELECT DOCUMENT_ID FROM DOCUMENTS
easy gold: SELECT DOCUMENT_ID FROM PARAGRAPHS

eval_err_num:176
medium pred: SELECT COUNT(PARAGRAPH_ID) AS NUM_PARAGRAPHS, DOCUMENT_ID FROM PARAGRAPHS GROUP BY DOCUMENT_ID
medium gold: SELECT DOCUMENT_ID ,  COUNT ( * )  FROM PARAGRAPHS GROUP BY DOCUMENT_ID

eval_err_num:177
medium pred: SELECT COUNT(PARAGRAPH_ID) AS NUM_PARAGRAPHS, DOCUMENT_ID FROM PARAGRAPHS GROUP BY DOCUMENT_ID ORDER BY DOCUMENT_ID
medium gold: SELECT DOCUMENT_ID ,  COUNT ( * )  FROM PARAGRAPHS GROUP BY DOCUMENT_ID ORDER BY DOCUMENT_ID

eval_err_num:178
medium pred: SELECT O.OWNER_ID, D.DOG_ID, T.COST_OF_TREATMENT FROM OWNERS O JOIN DOGS D ON O.OWNER_ID = D.OWNER_ID JOIN TREATMENTS T ON D.DOG_ID = T.DOG_ID
medium gold: SELECT T1.OWNER_ID , T2.DOG_ID ,T3.COST_OF_TREATMENT  FROM OWNERS AS T1 JOIN DOGS AS T2 ON T1.OWNER_ID  =  T2.OWNER_ID JOIN TREATMENTS AS T3 ON T2.DOG_ID  =  T3.DOG_ID

eval_err_num:179
extra pred: SELECT O.OWNER_ID, O.FIRST_NAME, O.LAST_NAME, SUM(T.COST_OF_TREATMENT) AS TOTAL_COST FROM OWNERS O JOIN DOGS D ON O.OWNER_ID = D.OWNER_ID JOIN TREATMENTS T ON D.DOG_ID = T.DOG_ID GROUP BY O.OWNER_ID ORDER BY TOTAL_COST DESC LIMIT 1
extra gold: SELECT  T1.FIRST_NAME,T1.OWNER_ID  FROM OWNERS AS T1 JOIN DOGS AS T2 ON T1.OWNER_ID  =  T2.OWNER_ID JOIN TREATMENTS AS T3 ON T2.DOG_ID  =  T3.DOG_ID GROUP BY T1.OWNER_ID ORDER BY SUM ( T3.COST_OF_TREATMENT )  DESC LIMIT 1

easy pred: SELECT FIRST_NAME, LAST_NAME FROM OWNERS WHERE FIRST_NAME = 'JACLYN'
easy gold: SELECT LAST_NAME  FROM OWNERS WHERE FIRST_NAME = "JACLYN"

eval_err_num:180
extra pred: SELECT O.OWNER_ID, O.ZIP_CODE, SUM(T.COST_OF_TREATMENT) AS TOTAL_COST FROM OWNERS O JOIN DOGS D ON O.OWNER_ID = D.OWNER_ID JOIN TREATMENTS T ON D.DOG_ID = T.DOG_ID WHERE O.FIRST_NAME = 'JACLYN' AND O.LAST_NAME = 'STOLTENBERG' GROUP BY O.OWNER_ID, O.ZIP_CODE ORDER BY TOTAL_COST DESC LIMIT 1
extra gold: SELECT T1.OWNER_ID , T1.ZIP_CODE FROM OWNERS AS T1 JOIN DOGS AS T2 ON T1.OWNER_ID  =  T2.OWNER_ID JOIN TREATMENTS AS T3 ON T2.DOG_ID  =  T3.DOG_ID GROUP BY T1.OWNER_ID ORDER BY SUM ( T3.COST_OF_TREATMENT )  DESC LIMIT 1

hard pred: SELECT COUNT(*) FROM FLIGHTS WHERE DESTAIRPORT IN (SELECT AIRPORTCODE FROM AIRPORTS WHERE CITY = 'ABERDEEN' OR CITY = 'ABILENE')
hard gold: SELECT COUNT ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DESTAIRPORT   =   T2.AIRPORTCODE WHERE T2.CITY   =   "ABERDEEN" OR T2.CITY   =   "ABILENE"

eval_err_num:181
hard pred: SELECT AIRPORTS.CITY, COUNT(*) AS NUM_FLIGHTS FROM FLIGHTS INNER JOIN AIRPORTS ON FLIGHTS.DESTAIRPORT = AIRPORTS.AIRPORTCODE GROUP BY AIRPORTS.CITY ORDER BY NUM_FLIGHTS DESC LIMIT 1
hard gold: SELECT DESTAIRPORT FROM FLIGHTS GROUP BY DESTAIRPORT ORDER BY COUNT ( * )  DESC LIMIT 1

eval_err_num:182
extra pred: SELECT C.NAME AS COUNTRYNAME FROM COUNTRY C WHERE C.CONTINENT = 'AFRICA' AND C.POPULATION < (SELECT MIN(POPULATION) FROM COUNTRY WHERE CONTINENT = 'ASIA')
extra gold: SELECT NAME FROM COUNTRY WHERE CONTINENT   =   "AFRICA"  AND POPULATION  <   ( SELECT MAX ( POPULATION )  FROM COUNTRY WHERE CONTINENT   =   "ASIA" ) 

easy pred: SELECT CONTINENT FROM COUNTRY WHERE CODE = 'ABW'
easy gold: SELECT CONTINENT FROM COUNTRY WHERE NAME  =  "ARUBA"

easy pred: SELECT LOCALNAME FROM COUNTRY WHERE CODE = 'AGO'
easy gold: SELECT LOCALNAME FROM COUNTRY WHERE NAME  =  "ANGOLA"

easy pred: SELECT SURFACEAREA FROM COUNTRY WHERE CODE = 'AFG'
easy gold: SELECT SURFACEAREA FROM COUNTRY WHERE NAME  =  "AFGHANISTAN"

hard pred: SELECT FIRST_NAME, LAST_NAME FROM PROFESSIONALS UNION SELECT FIRST_NAME, LAST_NAME FROM OWNERS EXCEPT SELECT NAME FROM DOGS
hard gold: SELECT FIRST_NAME FROM PROFESSIONALS UNION SELECT FIRST_NAME FROM OWNERS EXCEPT SELECT NAME FROM DOGS

easy pred: SELECT STATE FROM OWNERS WHERE FIRST_NAME = 'JAYSON'
easy gold: SELECT STATE FROM PROFESSIONALS WHERE FIRST_NAME  =  "JAYSON"

eval_err_num:183
extra pred: SELECT DISTINCT CAR_MAKERS.MAKER FROM CAR_MAKERS INNER JOIN MODEL_LIST ON CAR_MAKERS.ID = MODEL_LIST.MAKER INNER JOIN CAR_NAMES ON MODEL_LIST.MODELID = CAR_NAMES.MODEL INNER JOIN CARS_DATA ON CAR_NAMES.MAKEID = CARS_DATA.ID WHERE CARS_DATA.YEAR = 1970
extra gold: SELECT DISTINCT T1.MAKER FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.ID   =   T2.MAKER JOIN CAR_NAMES AS T3 ON T2.MODEL   =   T3.MODEL JOIN CARS_DATA AS T4 ON T3.MAKEID   =   T4.ID WHERE T4.YEAR   =   '1970'

eval_err_num:184
extra pred: SELECT CAR_NAMES.MODEL, CAR_NAMES.MAKE FROM CAR_NAMES INNER JOIN CARS_DATA ON CAR_NAMES.MAKEID = CARS_DATA.ID WHERE CARS_DATA.YEAR = 1970
extra gold: SELECT T3.MODEL, T3.MAKE FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.ID   =   T2.MAKER JOIN CAR_NAMES AS T3 ON T2.MODEL   =   T3.MODEL JOIN CARS_DATA AS T4 ON T3.MAKEID   =   T4.ID WHERE T4.YEAR   =   '1970'

eval_err_num:185
extra pred: SELECT CAR_MAKERS.FULLNAME FROM CAR_MAKERS INNER JOIN MODEL_LIST ON CAR_MAKERS.ID = MODEL_LIST.MAKER INNER JOIN CAR_NAMES ON MODEL_LIST.MODELID = CAR_NAMES.MODEL INNER JOIN CARS_DATA ON CAR_NAMES.MAKEID = CARS_DATA.ID WHERE CARS_DATA.YEAR = 1970 ORDER BY CARS_DATA.WEIGHT DESC LIMIT 1
extra gold: SELECT T1.FULLNAME FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.ID  =  T2.MAKER JOIN CAR_NAMES AS T3 ON T2.MODEL  =  T3.MODEL JOIN CARS_DATA AS T4 ON T3.MAKEID  =  T4.ID WHERE T4.YEAR  =  '1970' ORDER BY T4.WEIGHT DESC LIMIT 1

medium pred: SELECT TITLE FROM CARTOON WHERE DIRECTED_BY = 'BEN JONES'
medium gold: SELECT CHANNEL, ID FROM CARTOON

eval_err_num:186
hard pred: BASED ON THE GIVEN SCHEMA, THIS QUESTION CANNOT BE ANSWERED AS THERE IS NO COLUMN THAT SPECIFIES THE LANGUAGE OF THE TV CHANNELS.
hard gold: SELECT SERIES_NAME FROM TV_CHANNEL EXCEPT SELECT SERIES_NAME FROM TV_CHANNEL WHERE LANGUAGE  =  'ITALIAN'

eval_err_num:187
hard pred: SELECT DISTINCT C.CHANNEL FROM CARTOON C RIGHT JOIN TV_CHANNEL T ON C.CHANNEL = T.ID WHERE C.DIRECTED_BY <> 'BEN JONES' OR C.DIRECTED_BY IS NULL
hard gold: SELECT ID FROM TV_CHANNEL EXCEPT SELECT CHANNEL FROM CARTOON WHERE DIRECTED_BY  =  'BEN JONES'

eval_err_num:188
easy pred: SELECT AVG("NUMBER_PRODUCTS") FROM "SHOP"
easy gold: SELECT AVG ( NUMBER_PRODUCTS )  FROM SHOP

eval_err_num:189
easy pred: SELECT "NAME" FROM "SHOP" WHERE "NUMBER_PRODUCTS" > 6685
easy gold: SELECT NAME FROM SHOP WHERE NUMBER_PRODUCTS > 6685

eval_err_num:190
easy pred: SELECT COUNT(*) FROM "SHOP"
easy gold: SELECT COUNT ( * )  FROM SHOP

eval_err_num:191
extra pred: SELECT SOURCEAIRPORT, COUNT(*) AS DEPARTINGFLIGHTS FROM FLIGHTS JOIN AIRPORTS ON FLIGHTS.SOURCEAIRPORT = AIRPORTS.AIRPORTCODE GROUP BY SOURCEAIRPORT ORDER BY DEPARTINGFLIGHTS LIMIT 1
extra gold: SELECT T1.CITY FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AIRPORTCODE   =   T2.SOURCEAIRPORT GROUP BY T1.CITY ORDER BY COUNT ( * )  ASC LIMIT 1

eval_err_num:192
easy pred: I'M SORRY, BUT I NEED MORE INFORMATION TO PROPERLY ANSWER YOUR QUESTION. "APG" IS NOT CLEAR ENOUGH. PLEASE PROVIDE ME WITH MORE CONTEXT OR REPHRASE YOUR QUESTION.
easy gold: SELECT FLIGHTNO FROM FLIGHTS WHERE SOURCEAIRPORT = "APG"

eval_err_num:193
extra pred: SELECT DISTINCT C.NAME FROM COUNTRY C JOIN COUNTRYLANGUAGE CL ON C.CODE = CL.COUNTRYCODE WHERE CL.ISOFFICIAL = 'T' AND (CL.LANGUAGE = 'ENGLISH' OR CL.LANGUAGE = 'DUTCH')
extra gold: SELECT * FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE T2.LANGUAGE   =   "ENGLISH" AND ISOFFICIAL   =   "T" UNION SELECT * FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE T2.LANGUAGE   =   "DUTCH" AND ISOFFICIAL   =   "T"

eval_err_num:194
medium pred: SELECT CL.LANGUAGE FROM COUNTRYLANGUAGE CL JOIN COUNTRY C ON C.CODE = CL.COUNTRYCODE WHERE C.NAME = 'BELGIUM' AND CL.ISOFFICIAL = 'T'
medium gold: SELECT T2.LANGUAGE FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE  =  T2.COUNTRYCODE WHERE T1.NAME  =  "BELGIUM" AND T2.ISOFFICIAL  =  "T"

eval_err_num:195
medium pred: SELECT DISTINCT C.NAME FROM COUNTRY C JOIN COUNTRYLANGUAGE CL ON C.CODE = CL.COUNTRYCODE WHERE CL.LANGUAGE = 'ARABIC'
medium gold: SELECT T1.NAME FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE  =  T2.COUNTRYCODE WHERE T2.LANGUAGE  =  "ARABIC"

eval_err_num:196
medium pred: SELECT CL.LANGUAGE FROM COUNTRYLANGUAGE CL JOIN COUNTRY C ON C.CODE = CL.COUNTRYCODE WHERE C.NAME = 'EGYPT'
medium gold: SELECT T2.LANGUAGE FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE  =  T2.COUNTRYCODE WHERE T1.NAME  =  "EGYPT"

eval_err_num:197
medium pred: SELECT COUNT(DISTINCT CL.COUNTRYCODE) FROM COUNTRYLANGUAGE CL WHERE CL.LANGUAGE = 'ARABIC' AND CL.ISOFFICIAL = 'T'
medium gold: SELECT COUNT ( T1.NAME )  FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE  =  T2.COUNTRYCODE WHERE T2.LANGUAGE  =  "ARABIC" AND T2.ISOFFICIAL  =  "T"

eval_err_num:198
medium pred: SELECT DISTINCT C.NAME FROM COUNTRY C JOIN COUNTRYLANGUAGE CL ON C.CODE = CL.COUNTRYCODE WHERE CL.LANGUAGE = 'ARABIC' AND CL.ISOFFICIAL = 'T'
medium gold: SELECT T1.NAME FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE  =  T2.COUNTRYCODE WHERE T2.LANGUAGE  =  "ARABIC" AND T2.ISOFFICIAL  =  "T"

extra pred: SELECT NAME FROM COUNTRY WHERE CONTINENT = 'ASIA' AND POPULATION > ( SELECT MAX(POPULATION) FROM COUNTRY WHERE CONTINENT = 'AFRICA' )
extra gold: SELECT NAME FROM COUNTRY WHERE CONTINENT   =   "ASIA"  AND POPULATION  >   ( SELECT MIN ( POPULATION )  FROM COUNTRY WHERE CONTINENT   =   "AFRICA" ) 

extra pred: SELECT NAME, POPULATION FROM COUNTRY WHERE CONTINENT = 'ASIA' AND POPULATION > ( SELECT MAX(POPULATION) FROM COUNTRY WHERE CONTINENT = 'AFRICA' )
extra gold: SELECT NAME,POPULATION FROM COUNTRY WHERE CONTINENT   =   "ASIA"  AND POPULATION  >   ( SELECT MIN ( POPULATION )  FROM COUNTRY WHERE CONTINENT   =   "AFRICA" ) 

extra pred: SELECT NAME, GOVERNMENTFORM FROM COUNTRY WHERE CONTINENT = 'ASIA' AND POPULATION > ( SELECT MAX(POPULATION) FROM COUNTRY WHERE CONTINENT = 'AFRICA' )
extra gold: SELECT NAME,GOVERNMENTFORM FROM COUNTRY WHERE CONTINENT   =   "ASIA"  AND POPULATION  >   ( SELECT MIN ( POPULATION )  FROM COUNTRY WHERE CONTINENT   =   "AFRICA" ) 

eval_err_num:199
hard pred: SELECT C.NAME FROM COUNTRY C WHERE C.CONTINENT = 'ASIA' ORDER BY C.LIFEEXPECTANCY ASC LIMIT 1
hard gold: SELECT NAME FROM COUNTRY WHERE CONTINENT   =   "ASIA" ORDER BY LIFEEXPECTANCY LIMIT 1

eval_err_num:200
hard pred: SELECT C.NAME FROM COUNTRY C WHERE C.CONTINENT = 'AFRICA' ORDER BY C.LIFEEXPECTANCY ASC LIMIT 1
hard gold: SELECT NAME FROM COUNTRY WHERE CONTINENT   =   "AFRICA" ORDER BY LIFEEXPECTANCY LIMIT 1

eval_err_num:201
easy pred: SELECT C.GNP FROM COUNTRY C WHERE C.NAME = 'AFGHANISTAN'
easy gold: SELECT GNP FROM COUNTRY WHERE NAME = "AFGHANISTAN"

eval_err_num:202
easy pred: SELECT C.POPULATION FROM COUNTRY C WHERE C.NAME = 'AFGHANISTAN'
easy gold: SELECT POPULATION FROM COUNTRY WHERE NAME = "AFGHANISTAN"

easy pred: SELECT EARNINGS FROM POKER_PLAYER WHERE BEST_FINISH = 1
easy gold: SELECT EARNINGS FROM POKER_PLAYER

easy pred: SELECT POKER_PLAYER_ID, EARNINGS FROM POKER_PLAYER ORDER BY EARNINGS DESC
easy gold: SELECT EARNINGS FROM POKER_PLAYER ORDER BY EARNINGS DESC

medium pred: SELECT FINAL_TABLE_MADE FROM POKER_PLAYER WHERE EARNINGS = (SELECT MIN(EARNINGS) FROM POKER_PLAYER)
medium gold: SELECT FINAL_TABLE_MADE FROM POKER_PLAYER ORDER BY EARNINGS ASC LIMIT 1

medium pred: SELECT FINAL_TABLE_MADE FROM POKER_PLAYER WHERE EARNINGS = (SELECT MAX(EARNINGS) FROM POKER_PLAYER)
medium gold: SELECT FINAL_TABLE_MADE FROM POKER_PLAYER ORDER BY EARNINGS DESC LIMIT 1

eval_err_num:203
easy pred: SELECT TEMPLATES.TEMPLATE_ID, DOCUMENTS.DOCUMENT_ID FROM TEMPLATES LEFT JOIN DOCUMENTS ON TEMPLATES.TEMPLATE_ID = DOCUMENTS.TEMPLATE_ID ORDER BY TEMPLATES.TEMPLATE_ID
easy gold: SELECT TEMPLATE_ID FROM DOCUMENTS

eval_err_num:204
medium pred: SELECT TEMPLATES.TEMPLATE_ID, DOCUMENTS.DOCUMENT_ID FROM TEMPLATES INNER JOIN DOCUMENTS ON TEMPLATES.TEMPLATE_ID = DOCUMENTS.TEMPLATE_ID ORDER BY TEMPLATES.TEMPLATE_ID
medium gold: SELECT TEMPLATE_ID ,DOCUMENT_ID FROM DOCUMENTS

eval_err_num:205
hard pred: SELECT TEMPLATES.TEMPLATE_ID FROM TEMPLATES LEFT JOIN DOCUMENTS ON TEMPLATES.TEMPLATE_ID = DOCUMENTS.TEMPLATE_ID WHERE DOCUMENTS.DOCUMENT_ID IS NULL
hard gold: SELECT TEMPLATE_ID FROM TEMPLATES EXCEPT SELECT TEMPLATE_ID FROM DOCUMENTS

eval_err_num:206
medium pred: SELECT TEMPLATES.TEMPLATE_ID, TEMPLATES.TEMPLATE_TYPE_CODE FROM TEMPLATES LEFT JOIN DOCUMENTS ON TEMPLATES.TEMPLATE_ID = DOCUMENTS.TEMPLATE_ID WHERE DOCUMENTS.DOCUMENT_ID IS NULL
medium gold: SELECT T1.TEMPLATE_ID ,T1.TEMPLATE_TYPE_CODE FROM TEMPLATES AS T1 JOIN DOCUMENTS AS T2 ON T1.TEMPLATE_ID = T2.TEMPLATE_ID

eval_err_num:207
hard pred: SELECT COUNT(DISTINCT DOG_ID) AS TOTAL_DOGS_TREATED FROM TREATMENTS
hard gold: SELECT COUNT ( * )  FROM DOGS WHERE DOG_ID IN  (  SELECT DOG_ID FROM TREATMENTS  ) 

eval_err_num:208
hard pred: SELECT MIN(AGE) AS YOUNGEST_AGE_TREATED FROM DOGS WHERE DOG_ID IN (SELECT DISTINCT DOG_ID FROM TREATMENTS)
hard gold: SELECT MIN ( AGE )  FROM DOGS WHERE DOG_ID IN  (  SELECT DOG_ID FROM TREATMENTS  ) 

eval_err_num:209
hard pred: SELECT MAX(AGE) AS OLDEST_AGE_TREATED FROM DOGS WHERE DOG_ID IN (SELECT DISTINCT DOG_ID FROM TREATMENTS)
hard gold: SELECT MAX ( AGE )  FROM DOGS WHERE DOG_ID IN  (  SELECT DOG_ID FROM TREATMENTS  ) 

eval_err_num:210
hard pred: SELECT AVG(AGE) AS AVERAGE_AGE_TREATED FROM DOGS WHERE DOG_ID IN (SELECT DISTINCT DOG_ID FROM TREATMENTS)
hard gold: SELECT AVG ( AGE )  FROM DOGS WHERE DOG_ID IN  (  SELECT DOG_ID FROM TREATMENTS  ) 

eval_err_num:211
easy pred: SELECT COUNT(DISTINCT SEMESTER_NAME) AS NUM_SEMESTER_TYPES FROM SEMESTERS
easy gold: SELECT DISTINCT SEMESTER_NAME FROM SEMESTERS

eval_err_num:212
hard pred: SELECT SEMESTERS.SEMESTER_NAME FROM SEMESTERS LEFT JOIN STUDENT_ENROLMENT ON SEMESTERS.SEMESTER_ID = STUDENT_ENROLMENT.SEMESTER_ID WHERE STUDENT_ENROLMENT.STUDENT_ENROLMENT_ID IS NULL
hard gold: SELECT SEMESTER_NAME FROM SEMESTERS WHERE SEMESTER_ID NOT IN (  SELECT SEMESTER_ID FROM STUDENT_ENROLMENT  ) 

eval_err_num:213
extra pred: SELECT SEMESTERS.SEMESTER_ID, SEMESTERS.SEMESTER_NAME, SEMESTERS.SEMESTER_DESCRIPTION FROM SEMESTERS LEFT JOIN STUDENT_ENROLMENT ON SEMESTERS.SEMESTER_ID = STUDENT_ENROLMENT.SEMESTER_ID WHERE STUDENT_ENROLMENT.STUDENT_ENROLMENT_ID IS NULL
extra gold: SELECT SEMESTER_ID,SEMESTER_NAME,SEMESTER_DESCRIPTION FROM SEMESTERS WHERE SEMESTER_ID NOT IN (  SELECT SEMESTER_ID FROM STUDENT_ENROLMENT  ) 

eval_err_num:214
medium pred: SELECT FNAME || ' ' || LNAME AS FULLNAME FROM STUDENT WHERE AGE = (SELECT MIN(AGE) FROM STUDENT)
medium gold: SELECT LNAME,FNAME  FROM STUDENT ORDER  BY  AGE  LIMIT 1

extra pred: SELECT AVG(AGE) FROM STUDENT WHERE STUID NOT IN (SELECT STUID FROM HAS_PET)
extra gold: SELECT AVG ( AGE )  FROM STUDENT WHERE STUID NOT IN  ( SELECT T1.STUID FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID  =  T2.STUID ) 

eval_err_num:215
medium pred: SELECT "TV_CHANNEL"."COUNTRY", "CARTOON"."TITLE" FROM "TV_CHANNEL" JOIN "CARTOON" ON "TV_CHANNEL"."ID" = "CARTOON"."CHANNEL" WHERE "CARTOON"."WRITTEN_BY" = 'TODD CASEY'
medium gold: SELECT T1.COUNTRY FROM TV_CHANNEL AS T1 JOIN CARTOON AS T2 ON T1.ID  =  T2.CHANNEL WHERE T2.WRITTEN_BY   =   'TODD CASEY'

eval_err_num:216
easy pred: SELECT "CARTOON"."TITLE" FROM "CARTOON" WHERE "CARTOON"."WRITTEN_BY" = 'TODD CASEY'
easy gold: SELECT TITLE FROM CARTOON  WHERE WRITTEN_BY   =   'TODD CASEY'

eval_err_num:217
easy pred: SELECT "CARTOON"."DIRECTED_BY" FROM "CARTOON" WHERE "CARTOON"."TITLE" = 'ENTER THE OUTSIDERS'
easy gold: SELECT DIRECTED_BY FROM CARTOON WHERE TITLE  =  "ENTER THE OUTSIDERS!"

eval_err_num:218
easy pred: SELECT COUNT(*) AS LANGUAGECOUNT FROM COUNTRYLANGUAGE
easy gold: SELECT COUNT ( DISTINCT LANGUAGE )  FROM COUNTRYLANGUAGE

easy pred: SELECT COUNTRY_CODE FROM PLAYERS GROUP BY COUNTRY_CODE HAVING COUNT(PLAYER_ID) > 50
easy gold: SELECT COUNTRY_CODE FROM PLAYERS GROUP BY COUNTRY_CODE HAVING COUNT ( * )   >  50

easy pred: SELECT COUNTRY_CODE FROM PLAYERS GROUP BY COUNTRY_CODE HAVING COUNT(PLAYER_ID) < 40
easy gold: SELECT COUNTRY_CODE FROM PLAYERS GROUP BY COUNTRY_CODE HAVING COUNT ( * )   <  40

easy pred: SELECT COUNT(*) FROM PLAYERS WHERE HAND = (SELECT HAND FROM PLAYERS WHERE PLAYER_ID = 206449) AND PLAYER_ID != 206449
easy gold: SELECT COUNT ( * )  FROM PLAYERS WHERE HAND = 'U'

eval_err_num:219
hard pred: SELECT B.NAME FROM BATTLE B WHERE B.ID NOT IN ( SELECT S.LOST_IN_BATTLE FROM SHIP S WHERE S.LOCATION = 'ENGLISH CHANNEL' )
hard gold: SELECT NAME FROM BATTLE EXCEPT SELECT T1.NAME FROM BATTLE AS T1 JOIN SHIP AS T2 ON T1.ID   =   T2.LOST_IN_BATTLE WHERE T2.LOCATION   =   'ENGLISH CHANNEL'

eval_err_num:220
hard pred: SELECT B.RESULT FROM BATTLE B WHERE B.ID NOT IN ( SELECT S.LOST_IN_BATTLE FROM SHIP S WHERE S.LOCATION = 'ENGLISH CHANNEL' )
hard gold: SELECT RESULT  FROM BATTLE WHERE NAME NOT IN  ( SELECT T1.NAME FROM BATTLE AS T1 JOIN SHIP AS T2 ON T1.ID   =   T2.LOST_IN_BATTLE WHERE T2.LOCATION   =   'ENGLISH CHANNEL' ) 

eval_err_num:221
hard pred: SELECT B.BULGARIAN_COMMANDER FROM BATTLE B WHERE B.ID NOT IN ( SELECT S.LOST_IN_BATTLE FROM SHIP S WHERE S.LOCATION = 'ENGLISH CHANNEL' )
hard gold: SELECT BULGARIAN_COMMANDER FROM BATTLE WHERE NAME NOT IN  ( SELECT T1.NAME FROM BATTLE AS T1 JOIN SHIP AS T2 ON T1.ID   =   T2.LOST_IN_BATTLE WHERE T2.LOCATION   =   'ENGLISH CHANNEL' ) 

eval_err_num:222
hard pred: SELECT B.DATE FROM BATTLE B WHERE B.ID NOT IN ( SELECT S.LOST_IN_BATTLE FROM SHIP S WHERE S.LOCATION = 'ENGLISH CHANNEL' )
hard gold: SELECT DATE FROM BATTLE WHERE NAME NOT IN  ( SELECT T1.NAME FROM BATTLE AS T1 JOIN SHIP AS T2 ON T1.ID   =   T2.LOST_IN_BATTLE WHERE T2.LOCATION   =   'ENGLISH CHANNEL' ) 

eval_err_num:223
hard pred: SELECT B.LATIN_COMMANDER FROM BATTLE B WHERE B.ID NOT IN ( SELECT S.LOST_IN_BATTLE FROM SHIP S WHERE S.LOCATION = 'ENGLISH CHANNEL' )
hard gold: SELECT  LATIN_COMMANDER  FROM BATTLE WHERE NAME NOT IN  ( SELECT T1.NAME FROM BATTLE AS T1 JOIN SHIP AS T2 ON T1.ID   =   T2.LOST_IN_BATTLE WHERE T2.LOCATION   =   'ENGLISH CHANNEL' ) 

eval_err_num:224
easy pred: SELECT COUNT(*) AS NUM_SHOPS FROM SHOP
easy gold: SELECT COUNT ( * )  FROM SHOP

easy pred: SELECT NAME, NUMBER_PRODUCTS FROM SHOP WHERE NUMBER_PRODUCTS = (SELECT MAX(NUMBER_PRODUCTS) FROM SHOP)
easy gold: SELECT MAX ( NUMBER_PRODUCTS )  FROM SHOP

easy pred: SELECT NAME, NUMBER_PRODUCTS FROM SHOP WHERE NUMBER_PRODUCTS = (SELECT MIN(NUMBER_PRODUCTS) FROM SHOP)
easy gold: SELECT MIN ( NUMBER_PRODUCTS )  FROM SHOP

extra pred: SELECT BREED_NAME FROM BREEDS WHERE BREED_CODE = ( SELECT BREED_CODE FROM DOGS GROUP BY BREED_CODE ORDER BY COUNT(*) DESC LIMIT 1 )
extra gold: SELECT T1.BREED_NAME FROM BREEDS AS T1 JOIN DOGS AS T2 ON T1.BREED_CODE   =   T2.BREED_CODE GROUP BY T1.BREED_NAME ORDER BY COUNT ( * )  DESC LIMIT 1

eval_err_num:225
medium pred: SELECT COUNT(*) AS BULLDOG_COUNT FROM DOGS WHERE BREED_CODE = 'BULLDOG'
medium gold: SELECT COUNT ( * )  FROM BREEDS AS T1 JOIN DOGS AS T2 ON T1.BREED_CODE   =   T2.BREED_CODE WHERE T1.BREED_NAME  =  "BULLDOG"

eval_err_num:226
hard pred: SELECT DISTINCT S.FNAME FROM STUDENT S INNER JOIN HAS_PET HP ON S.STUID = HP.STUID INNER JOIN PETS P ON HP.PETID = P.PETID WHERE P.PETTYPE = 'CAT'
hard gold: SELECT T1.FNAME FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID   =   T2.STUID JOIN PETS AS T3 ON T3.PETID   =   T2.PETID WHERE T3.PETTYPE   =   'DOG'

eval_err_num:227
medium pred: SELECT COUNT(DISTINCT STUID) AS NUM_STUDENTS_WITH_PETS FROM HAS_PET
medium gold: SELECT COUNT ( T2.STUID )  FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID   =   T2.STUID JOIN PETS AS T3 ON T3.PETID   =   T2.PETID

eval_err_num:228
hard pred: SELECT P.PET_AGE FROM STUDENT S INNER JOIN HAS_PET HP ON S.STUID = HP.STUID INNER JOIN PETS P ON HP.PETID = P.PETID WHERE S.FNAME = 'LINDA'
hard gold: SELECT T3.PET_AGE FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID   =   T2.STUID JOIN PETS AS T3 ON T3.PETID   =   T2.PETID WHERE T1.FNAME  =  "LINDA"

medium pred: SELECT ID, NAME, AGE FROM VISITOR WHERE LEVEL_OF_MEMBERSHIP > 4 ORDER BY AGE DESC
medium gold: SELECT ID FROM VISITOR WHERE LEVEL_OF_MEMBERSHIP  >  4 ORDER BY AGE DESC

eval_err_num:229
medium pred: SELECT S.FIRST_NAME, S.MIDDLE_NAME, S.LAST_NAME FROM STUDENTS S INNER JOIN STUDENT_ENROLMENT SE ON S.STUDENT_ID = SE.STUDENT_ID INNER JOIN DEGREE_PROGRAMS DP ON SE.DEGREE_PROGRAM_ID = DP.DEGREE_PROGRAM_ID INNER JOIN SEMESTERS SEM ON SEM.SEMESTER_ID = SE.SEMESTER_ID GROUP BY S.STUDENT_ID HAVING COUNT(DISTINCT DP.DEGREE_PROGRAM_ID) = 2 AND COUNT(DISTINCT SEM.SEMESTER_ID) = 1
medium gold: SELECT T1.FIRST_NAME ,  T1.MIDDLE_NAME ,  T1.LAST_NAME ,  T1.STUDENT_ID FROM STUDENTS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.STUDENT_ID   =   T2.STUDENT_ID GROUP BY T1.STUDENT_ID HAVING COUNT ( * )    =   2

eval_err_num:230
medium pred: SELECT S.STUDENT_ID FROM STUDENTS S INNER JOIN STUDENT_ENROLMENT SE ON S.STUDENT_ID = SE.STUDENT_ID INNER JOIN DEGREE_PROGRAMS DP ON SE.DEGREE_PROGRAM_ID = DP.DEGREE_PROGRAM_ID INNER JOIN SEMESTERS SEM ON SEM.SEMESTER_ID = SE.SEMESTER_ID GROUP BY S.STUDENT_ID HAVING COUNT(DISTINCT DP.DEGREE_PROGRAM_ID) = 2 AND COUNT(DISTINCT SEM.SEMESTER_ID) = 1
medium gold: SELECT T1.STUDENT_ID FROM STUDENTS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.STUDENT_ID   =   T2.STUDENT_ID GROUP BY T1.STUDENT_ID HAVING COUNT ( * )    =   2

eval_err_num:231
medium pred: SELECT COUNT(*) AS 'NUMBER OF DOG OWNERS' FROM OWNERS WHERE STATE = 'VIRGINIA'
medium gold: SELECT COUNT ( * )  FROM OWNERS AS T1 JOIN DOGS AS T2 ON T1.OWNER_ID   =   T2.OWNER_ID WHERE T1.STATE   =   'VIRGINIA'

medium pred: SELECT FIRST_NAME, LAST_NAME FROM OWNERS WHERE STATE = 'VIRGINIA'
medium gold: SELECT T1.FIRST_NAME, T1.LAST_NAME FROM OWNERS AS T1 JOIN DOGS AS T2 ON T1.OWNER_ID   =   T2.OWNER_ID WHERE T1.STATE   =   'VIRGINIA'

eval_err_num:232
medium pred: SELECT O.FIRST_NAME, O.LAST_NAME, D.NAME AS 'DOG NAME' FROM OWNERS O INNER JOIN DOGS D ON O.OWNER_ID = D.OWNER_ID WHERE O.STATE = 'VIRGINIA'
medium gold: SELECT T2.NAME FROM OWNERS AS T1 JOIN DOGS AS T2 ON T1.OWNER_ID   =   T2.OWNER_ID WHERE T1.STATE   =   'VIRGINIA'

eval_err_num:233
medium pred: SELECT B.BREED_NAME FROM DOGS D INNER JOIN BREEDS B ON D.BREED_CODE = B.BREED_CODE WHERE D.NAME = 'BESSIE'
medium gold: SELECT T2.BREED_CODE FROM OWNERS AS T1 JOIN DOGS AS T2 ON T1.OWNER_ID   =   T2.OWNER_ID WHERE T2.NAME  =  "BESSIE"

eval_err_num:234
medium pred: SELECT S.SIZE_DESCRIPTION FROM DOGS D INNER JOIN SIZES S ON D.SIZE_CODE = S.SIZE_CODE WHERE D.NAME = 'BESSIE'
medium gold: SELECT T2.SIZE_CODE FROM OWNERS AS T1 JOIN DOGS AS T2 ON T1.OWNER_ID   =   T2.OWNER_ID WHERE T2.NAME  =  "BESSIE"

eval_err_num:235
easy pred: SELECT COUNT(DISTINCT RECORD_COMPANY) AS NUM_RECORD_COMPANIES FROM ORCHESTRA
easy gold: SELECT COUNT ( RECORD_COMPANY )  FROM ORCHESTRA

eval_err_num:236
easy pred: SELECT COUNT(*) AS NUM_ORCHESTRAS FROM ORCHESTRA
easy gold: SELECT COUNT ( ORCHESTRA_ID )  FROM ORCHESTRA

easy pred: SELECT ORCHESTRA, YEAR_OF_FOUNDED FROM ORCHESTRA ORDER BY YEAR_OF_FOUNDED ASC
easy gold: SELECT ORCHESTRA FROM ORCHESTRA ORDER BY YEAR_OF_FOUNDED

eval_err_num:237
hard pred: SELECT RECORD_COMPANY, COUNT(*) AS NUM_ORCHESTRAS FROM ORCHESTRA GROUP BY RECORD_COMPANY ORDER BY NUM_ORCHESTRAS DESC LIMIT 1
hard gold: SELECT RECORD_COMPANY FROM ORCHESTRA GROUP BY RECORD_COMPANY ORDER BY COUNT ( * )  DESC LIMIT 1

easy pred: SELECT COUNT(*) FROM CAR_NAMES WHERE MAKE = 'VOLVO'
easy gold: SELECT COUNT ( * )  FROM CAR_NAMES WHERE MODEL  =  "VOLVO"

eval_err_num:238
extra pred: SELECT MODEL, CARS_DATA.ID AS CARID, ACCELERATE FROM CAR_NAMES INNER JOIN MODEL_LIST ON CAR_NAMES.MODEL = MODEL_LIST.MODEL INNER JOIN CARS_DATA ON CAR_NAMES.MAKEID = CARS_DATA.ID WHERE MAKE = 'VOLVO' ORDER BY ACCELERATE LIMIT 1
extra gold: SELECT T1.ID FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.ID  =  T2.MAKEID WHERE T2.MODEL  =  'VOLVO' ORDER BY T1.ACCELERATE ASC LIMIT 1

eval_err_num:239
extra pred: SELECT CYLINDERS FROM CARS_DATA WHERE ID = <CARID>
extra gold: SELECT T1.CYLINDERS FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.ID  =  T2.MAKEID WHERE T2.MODEL  =  'VOLVO' ORDER BY T1.ACCELERATE ASC LIMIT 1

eval_err_num:240
easy pred: SELECT DISTINCT H.NAME FROM HIGHSCHOOLER H, FRIEND F WHERE (H.ID = F.STUDENT_ID) OR (H.ID = F.FRIEND_ID)
easy gold: SELECT T2.NAME FROM FRIEND AS T1 JOIN HIGHSCHOOLER AS T2 ON T1.STUDENT_ID   =   T2.ID

eval_err_num:241
medium pred: SELECT SE.SEMESTER_ID FROM STUDENT_ENROLMENT SE INNER JOIN DEGREE_PROGRAMS DP ON SE.DEGREE_PROGRAM_ID = DP.DEGREE_PROGRAM_ID WHERE DP.DEGREE_SUMMARY_NAME LIKE '%BACHELOR%'
medium gold: SELECT DISTINCT T2.SEMESTER_ID FROM DEGREE_PROGRAMS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.DEGREE_PROGRAM_ID   =   T2.DEGREE_PROGRAM_ID WHERE DEGREE_SUMMARY_NAME   =   'MASTER'

eval_err_num:242
medium pred: SELECT DP.DEGREE_SUMMARY_DESCRIPTION FROM DEGREE_PROGRAMS DP INNER JOIN STUDENT_ENROLMENT SE ON DP.DEGREE_PROGRAM_ID = SE.DEGREE_PROGRAM_ID WHERE SE.STUDENT_ID = 14
medium gold: SELECT T1.DEGREE_SUMMARY_DESCRIPTION FROM DEGREE_PROGRAMS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.DEGREE_PROGRAM_ID  =  T2.DEGREE_PROGRAM_ID WHERE T2.STUDENT_ID  =  14

eval_err_num:243
hard pred: SELECT MODEL, MPG FROM CARS_DATA INNER JOIN CAR_NAMES ON CARS_DATA.ID = CAR_NAMES.MAKEID INNER JOIN MODEL_LIST ON CAR_NAMES.MODEL = MODEL_LIST.MODEL ORDER BY MPG DESC LIMIT 1
hard gold: SELECT T1.MODEL FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MAKEID   =   T2.ID ORDER BY T2.MPG DESC LIMIT 1

eval_err_num:244
hard pred: SELECT MODEL, HORSEPOWER FROM CARS_DATA INNER JOIN CAR_NAMES ON CARS_DATA.ID = CAR_NAMES.MAKEID INNER JOIN MODEL_LIST ON CAR_NAMES.MODEL = MODEL_LIST.MODEL ORDER BY HORSEPOWER DESC LIMIT 1
hard gold: SELECT T1.MODEL FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MAKEID   =   T2.ID ORDER BY T2.HORSEPOWER DESC LIMIT 1

eval_err_num:245
hard pred: SELECT E.NAME FROM EMPLOYEE E JOIN EVALUATION EV ON E.EMPLOYEE_ID = EV.EMPLOYEE_ID WHERE EV.BONUS = (SELECT MAX(BONUS) FROM EVALUATION)
hard gold: SELECT T1.NAME FROM EMPLOYEE AS T1 JOIN EVALUATION AS T2 ON T1.EMPLOYEE_ID  =  T2.EMPLOYEE_ID ORDER BY T2.BONUS DESC LIMIT 1

extra pred: SELECT MODEL FROM MODEL_LIST WHERE MAKER = (SELECT ID FROM CAR_MAKERS WHERE MAKER = 'GENERAL MOTORS')
extra gold: SELECT DISTINCT T2.MODEL FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.MODEL   =   T2.MODEL JOIN CAR_MAKERS AS T3 ON T2.MAKER   =   T3.ID JOIN CARS_DATA AS T4 ON T1.MAKEID   =   T4.ID WHERE T3.FULLNAME   =   'GENERAL MOTORS'

eval_err_num:246
extra pred: SELECT MODEL FROM MODEL_LIST WHERE MODELID IN (SELECT ID FROM CAR_NAMES WHERE MAKEID IN (SELECT ID FROM CARS_DATA WHERE WEIGHT > 3500))
extra gold: SELECT DISTINCT T2.MODEL FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.MODEL   =   T2.MODEL JOIN CAR_MAKERS AS T3 ON T2.MAKER   =   T3.ID JOIN CARS_DATA AS T4 ON T1.MAKEID   =   T4.ID WHERE T4.WEIGHT  >  3500

eval_err_num:247
extra pred: SELECT DISTINCT MODEL FROM ( SELECT MODEL FROM MODEL_LIST WHERE MAKER = (SELECT ID FROM CAR_MAKERS WHERE MAKER = 'GENERAL MOTORS') UNION SELECT MODEL FROM MODEL_LIST WHERE MODELID IN (SELECT ID FROM CAR_NAMES WHERE MAKEID IN (SELECT ID FROM CARS_DATA WHERE WEIGHT > 3500)) ) AS COMBINED_MODELS
extra gold: SELECT DISTINCT T2.MODEL FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.MODEL   =   T2.MODEL JOIN CAR_MAKERS AS T3 ON T2.MAKER   =   T3.ID JOIN CARS_DATA AS T4 ON T1.MAKEID   =   T4.ID WHERE T3.FULLNAME   =   'GENERAL MOTORS' OR T4.WEIGHT  <=   3500

eval_err_num:248
extra pred: SELECT DISTINCT MODEL FROM ( SELECT MODEL FROM MODEL_LIST WHERE MAKER = (SELECT ID FROM CAR_MAKERS WHERE MAKER = 'GENERAL MOTORS') EXCEPT SELECT MODEL FROM MODEL_LIST WHERE MODELID IN (SELECT ID FROM CAR_NAMES WHERE MAKEID IN (SELECT ID FROM CARS_DATA WHERE WEIGHT > 3500)) UNION SELECT MODEL FROM MODEL_LIST WHERE MODELID IN (SELECT ID FROM CAR_NAMES WHERE MAKEID IN (SELECT ID FROM CARS_DATA WHERE WEIGHT > 3500)) EXCEPT SELECT MODEL FROM MODEL_LIST WHERE MAKER = (SELECT ID FROM CAR_MAKERS WHERE MAKER = 'GENERAL MOTORS') ) AS COMBINED_MODELS
extra gold: SELECT DISTINCT T2.MODEL FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.MODEL   =   T2.MODEL JOIN CAR_MAKERS AS T3 ON T2.MAKER   =   T3.ID JOIN CARS_DATA AS T4 ON T1.MAKEID   =   T4.ID WHERE T3.FULLNAME   =   'GENERAL MOTORS' OR T4.WEIGHT  <=   3500 EXCEPT SELECT DISTINCT T2.MODEL FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.MODEL   =   T2.MODEL JOIN CAR_MAKERS AS T3 ON T2.MAKER   =   T3.ID JOIN CARS_DATA AS T4 ON T1.MAKEID   =   T4.ID WHERE T3.FULLNAME   =   'GENERAL MOTORS' AND T4.WEIGHT  <=   3500

eval_err_num:249
easy pred: SELECT "HEIGHT" FROM "PEOPLE" WHERE "NAME" = 'ALEKSEY OSTAPENKO'
easy gold: SELECT HEIGHT FROM PEOPLE WHERE NAME  =  "ALEKSEY OSTAPENKO"

eval_err_num:250
easy pred: SELECT "NAME" FROM "PEOPLE" WHERE "BIRTH_DATE" = '1982-08-16'
easy gold: SELECT NAME FROM PEOPLE WHERE BIRTH_DATE  =  "AUGUST 16, 1982"

eval_err_num:251
easy pred: SELECT "PEOPLE_ID" FROM "PEOPLE" WHERE "NATIONALITY" = 'RUSSIA'
easy gold: SELECT PEOPLE_ID FROM PEOPLE WHERE NATIONALITY  =  "RUSSIA"

eval_err_num:252
easy pred: SELECT "NATIONALITY" FROM "PEOPLE" GROUP BY "NATIONALITY" HAVING COUNT(*) >= 2
easy gold: SELECT NATIONALITY FROM PEOPLE GROUP BY NATIONALITY HAVING COUNT ( * )    >=    2

medium pred: SELECT LANGUAGE FROM COUNTRYLANGUAGE WHERE COUNTRYCODE = 'ABW'
medium gold: SELECT T2.LANGUAGE FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE T1.NAME   =   "ARUBA"

medium pred: SELECT ISOFFICIAL FROM COUNTRYLANGUAGE WHERE COUNTRYCODE = 'ABW'
medium gold: SELECT T2.LANGUAGE FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE T1.NAME   =   "ARUBA" AND T2.ISOFFICIAL = 'T'

medium pred: SELECT ISOFFICIAL FROM COUNTRYLANGUAGE WHERE COUNTRYCODE = 'AFG'
medium gold: SELECT T2.LANGUAGE FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE T1.NAME   =   "AFGHANISTAN" AND T2.ISOFFICIAL = 'T'

medium pred: SELECT COUNT(*) FROM COUNTRYLANGUAGE WHERE LANGUAGE = 'DARI' AND ISOFFICIAL = 'F'
medium gold: SELECT COUNT ( * )  FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE T2.LANGUAGE = 'DARI' AND T1.NAME !=  'AFGHANISTAN'

eval_err_num:253
medium pred: SELECT D.NAME, SUM(T.COST_OF_TREATMENT) AS TOTAL_COST FROM DOGS D JOIN TREATMENTS T ON D.DOG_ID = T.DOG_ID GROUP BY D.NAME
medium gold: SELECT NAME,COST_OF_TREATMENT  FROM DOGS JOIN TREATMENTS

eval_err_num:254
hard pred: SELECT D.NAME, SUM(T.COST_OF_TREATMENT) AS TOTAL_COST FROM DOGS D JOIN TREATMENTS T ON D.DOG_ID = T.DOG_ID GROUP BY D.NAME HAVING TOTAL_COST < 1000 ORDER BY T.COST_OF_TREATMENT DESC
hard gold: SELECT NAME FROM DOGS WHERE DOG_ID NOT IN (  SELECT DOG_ID FROM TREATMENTS GROUP BY DOG_ID HAVING SUM ( COST_OF_TREATMENT )   <  1000  ) 

eval_err_num:255
easy pred: THIS QUESTION CANNOT BE ANSWERED WITH THE GIVEN TABLE STRUCTURES AS THERE IS NO RECORD OF A PERSON NAMED GONZALO HIGUAÍN IN THE TABLES. THE TABLES ONLY CONTAIN INFORMATION ABOUT MUSEUMS, VISITORS, AND VISITS TO MUSEUMS. CAN I ASSIST YOU WITH ANY OTHER QUESTION RELATED TO THE TABLES?
easy gold: SELECT AGE FROM VISITOR WHERE NAME  =  "GONZALO HIGUAÍN"

medium pred: SELECT NUM_OF_TICKET FROM VISIT WHERE VISITOR_ID = 5
medium gold: SELECT NUM_OF_TICKET FROM VISITOR AS T1 JOIN VISIT AS T2 ON T1.ID   =   T2.VISITOR_ID WHERE VISITOR_ID  =  5

eval_err_num:256
medium pred: THIS QUESTION CANNOT BE ANSWERED WITH THE GIVEN TABLE STRUCTURES AS THERE IS NO RECORD OF A PERSON NAMED ARJEN ROBBEN IN THE TABLES. THE TABLES ONLY CONTAIN INFORMATION ABOUT MUSEUMS, VISITORS, AND VISITS TO MUSEUMS. CAN I ASSIST YOU WITH ANY OTHER QUESTION RELATED TO THE TABLES?
medium gold: SELECT TOTAL_SPENT FROM VISITOR AS T1 JOIN VISIT AS T2 ON T1.ID   =   T2.VISITOR_ID WHERE NAME  =  "ARJEN ROBBEN"

hard pred: SELECT VISITOR.NAME, VISITOR.AGE FROM VISITOR JOIN VISIT ON VISITOR.ID = VISIT.VISITOR_ID WHERE VISIT.NUM_OF_TICKET = ( SELECT MAX(NUM_OF_TICKET) FROM VISIT )
hard gold: SELECT T1.NAME ,  T1.AGE FROM VISITOR AS T1 JOIN VISIT AS T2 ON T1.ID   =   T2.VISITOR_ID ORDER BY T2.NUM_OF_TICKET DESC LIMIT 1

eval_err_num:257
medium pred: SELECT DISTINCT C.REGION FROM COUNTRY C JOIN COUNTRYLANGUAGE CL ON C.CODE = CL.COUNTRYCODE WHERE CL.LANGUAGE = 'ENGLISH' AND CL.ISOFFICIAL = 'T'
medium gold: SELECT DISTINCT T1.REGION FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE T2.LANGUAGE   =   "ENGLISH"

eval_err_num:258
medium pred: SELECT DISTINCT C.REGION FROM COUNTRY C JOIN COUNTRYLANGUAGE CL ON C.CODE = CL.COUNTRYCODE WHERE CL.LANGUAGE = 'DUTCH' AND CL.ISOFFICIAL = 'T'
medium gold: SELECT DISTINCT T1.REGION FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE T2.LANGUAGE   =   "DUTCH"

eval_err_num:259
medium pred: SELECT DISTINCT C.REGION, C.LIFEEXPECTANCY FROM COUNTRY C JOIN COUNTRYLANGUAGE CL ON C.CODE = CL.COUNTRYCODE WHERE CL.LANGUAGE = 'DUTCH' AND CL.ISOFFICIAL = 'T'
medium gold: SELECT DISTINCT T1.LIFEEXPECTANCY FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE T2.LANGUAGE   =   "DUTCH"

medium pred: SELECT WINNER_NAME FROM MATCHES JOIN PLAYERS ON MATCHES.WINNER_ID = PLAYERS.PLAYER_ID ORDER BY WINNER_AGE ASC LIMIT 3
medium gold: SELECT WINNER_NAME  FROM MATCHES ORDER BY WINNER_AGE LIMIT 3

medium pred: SELECT WINNER_NAME, WINNER_RANK FROM MATCHES JOIN PLAYERS ON MATCHES.WINNER_ID = PLAYERS.PLAYER_ID ORDER BY WINNER_AGE ASC LIMIT 3
medium gold: SELECT DISTINCT WINNER_NAME,  WINNER_RANK FROM MATCHES ORDER BY WINNER_AGE LIMIT 3

medium pred: SELECT WINNER_NAME, WINNER_RANK, LOSER_NAME FROM MATCHES JOIN PLAYERS ON MATCHES.WINNER_ID = PLAYERS.PLAYER_ID WHERE WINNER_AGE IN (SELECT WINNER_AGE FROM MATCHES ORDER BY WINNER_AGE ASC LIMIT 3) JOIN PLAYERS ON MATCHES.LOSER_ID = PLAYERS.PLAYER_ID
medium gold: SELECT LOSER_NAME FROM MATCHES ORDER BY WINNER_AGE LIMIT 3

eval_err_num:260
medium pred: -- LIST THE ROLE OF THE PROFESSIONAL NAMED TARYN SELECT ROLE_CODE FROM PROFESSIONALS WHERE FIRST_NAME = 'TARYN' -- THE ROLE CODE OF THE PROFESSIONAL WITH FIRST NAME TARYN IS EMPLOYEE -- LIST THE ROLE, STREET, CITY, AND STATE OF THE PROFESSIONAL WITH FIRST NAME TARYN SELECT ROLE_CODE, STREET, CITY, STATE FROM PROFESSIONALS WHERE FIRST_NAME = 'TARYN'
medium gold: SELECT ROLE_CODE , STREET , CITY , STATE FROM PROFESSIONALS WHERE FIRST_NAME  =  "TARYN"

medium pred: SELECT FIRST_NAME, LAST_NAME, STATE FROM PROFESSIONALS
medium gold: SELECT FIRST_NAME,STATE FROM PROFESSIONALS

easy pred: SELECT FIRST_NAME, LAST_NAME FROM PROFESSIONALS WHERE STATE = 'INDIANA'
easy gold: SELECT FIRST_NAME FROM PROFESSIONALS WHERE STATE  =  "INDIANA"

eval_err_num:261
hard pred: SELECT CAUSED_BY_SHIP_ID, SUM(KILLED) AS TOTAL_KILLED FROM DEATH GROUP BY CAUSED_BY_SHIP_ID ORDER BY TOTAL_KILLED DESC LIMIT 1
hard gold: SELECT * FROM DEATH WHERE KILLED  =   ( SELECT MAX ( KILLED )  FROM DEATH ) 

medium pred: SELECT CAUSED_BY_SHIP_ID, NOTE, KILLED, INJURED FROM DEATH
medium gold: SELECT * FROM DEATH WHERE NOTE LIKE "%EAST%"

eval_err_num:262
medium pred: SELECT * FROM "DEATH" WHERE "CAUSED_BY_SHIP_ID" IN ( SELECT "ID" FROM "SHIP" WHERE "TONNAGE" = 'T' )
medium gold: SELECT T1.KILLED FROM DEATH AS T1 JOIN SHIP AS T2 ON T1.CAUSED_BY_SHIP_ID  =  T2.ID WHERE T2.TONNAGE  =  'T'

eval_err_num:263
medium pred: SELECT * FROM "DEATH" WHERE "CAUSED_BY_SHIP_ID" IN ( SELECT "ID" FROM "SHIP" WHERE "TONNAGE" = 'T' ) AND "INJURED" > 0
medium gold: SELECT T1.INJURED FROM DEATH AS T1 JOIN SHIP AS T2 ON T1.CAUSED_BY_SHIP_ID  =  T2.ID WHERE T2.TONNAGE  =  'T'

eval_err_num:264
medium pred: SELECT SUM("KILLED") AS "TOTAL KILLED", SUM("INJURED") AS "TOTAL INJURED" FROM "DEATH" WHERE "CAUSED_BY_SHIP_ID" IN ( SELECT "ID" FROM "SHIP" WHERE "TONNAGE" = 'T' )
medium gold: SELECT COUNT ( T1.ID )  FROM DEATH AS T1 JOIN SHIP AS T2 ON T1.CAUSED_BY_SHIP_ID  =  T2.ID WHERE T2.TONNAGE  =  'T'

eval_err_num:265
hard pred: SELECT C.CONTINENT, COUNT(DISTINCT CM.ID) AS NUMCARMAKERS FROM CONTINENTS C JOIN COUNTRIES CO ON C.CONTID = CO.CONTINENT JOIN CAR_MAKERS CM ON CO.COUNTRYID = CM.COUNTRY GROUP BY C.CONTINENT
hard gold: SELECT T1.CONTINENT ,  COUNT ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.CONTID   =   T2.CONTINENT JOIN CAR_MAKERS AS T3 ON T2.COUNTRYID   =   T3.COUNTRY GROUP BY T1.CONTINENT

eval_err_num:266
medium pred: SELECT COUNT(*) AS NUMCARMAKERS FROM CAR_MAKERS WHERE COUNTRY = (SELECT COUNTRYID FROM COUNTRIES WHERE COUNTRYNAME = 'USA')
medium gold: SELECT COUNT ( * )  FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T2.COUNTRYID   =   T1.COUNTRY WHERE T2.COUNTRYNAME  =  "USA"

eval_err_num:267
medium pred: SELECT COUNT(*) AS NUMCARMAKERS FROM CAR_MAKERS WHERE COUNTRY = (SELECT COUNTRYID FROM COUNTRIES WHERE COUNTRYNAME = 'GERMANY')
medium gold: SELECT COUNT ( * )  FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T2.COUNTRYID   =   T1.COUNTRY WHERE T2.COUNTRYNAME  =  "GERMANY"

eval_err_num:268
medium pred: SELECT COUNT(*) AS NUMCARMAKERS FROM CAR_MAKERS WHERE COUNTRY = (SELECT COUNTRYID FROM COUNTRIES WHERE COUNTRYNAME = 'FRANCE')
medium gold: SELECT COUNT ( * )  FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T2.COUNTRYID   =   T1.COUNTRY WHERE T2.COUNTRYNAME  =  "FRANCE"

eval_err_num:269
easy pred: SELECT COUNT(*) AS TOTAL_COUNTRIES FROM COUNTRY
easy gold: SELECT COUNT ( * )  FROM COUNTRY

eval_err_num:270
easy pred: SELECT COUNT(*) AS TOTAL_CITIES FROM CITY
easy gold: SELECT COUNT ( * )  FROM CITY

medium pred: SELECT DISTRICT FROM CITY WHERE NAME = 'KABUL'
medium gold: SELECT REGION FROM COUNTRY AS T1 JOIN CITY AS T2 ON T1.CODE  =  T2.COUNTRYCODE WHERE T2.NAME  =  "KABUL"

eval_err_num:271
medium pred: SELECT COUNT(*) AS TOTAL_CITIES_IN_REGION FROM CITY WHERE DISTRICT = (SELECT DISTRICT FROM CITY WHERE NAME = 'KABUL')
medium gold: SELECT COUNT ( T2.NAME )  FROM COUNTRY AS T1 JOIN CITY AS T2 ON T1.CODE  =  T2.COUNTRYCODE WHERE T1.REGION  =  "SOUTHERN AND CENTRAL ASIA"

eval_err_num:272
medium pred: SELECT COUNT(*) FROM DOCUMENTS INNER JOIN TEMPLATES ON DOCUMENTS.TEMPLATE_ID = TEMPLATES.TEMPLATE_ID WHERE TEMPLATES.TEMPLATE_TYPE_CODE = 'BK'
medium gold: SELECT COUNT ( * )  FROM TEMPLATES AS T1 JOIN DOCUMENTS AS T2 ON T1.TEMPLATE_ID   =   T2.TEMPLATE_ID WHERE T1.TEMPLATE_TYPE_CODE   =   "BK"

eval_err_num:273
medium pred: SELECT DOCUMENT_NAME FROM DOCUMENTS INNER JOIN TEMPLATES ON DOCUMENTS.TEMPLATE_ID = TEMPLATES.TEMPLATE_ID WHERE TEMPLATES.TEMPLATE_TYPE_CODE = 'BK'
medium gold: SELECT T2.DOCUMENT_NAME FROM TEMPLATES AS T1 JOIN DOCUMENTS AS T2 ON T1.TEMPLATE_ID   =   T2.TEMPLATE_ID WHERE T1.TEMPLATE_TYPE_CODE   =   "BK"

eval_err_num:274
extra pred: SELECT COUNT(*) FROM DOCUMENTS INNER JOIN TEMPLATES ON DOCUMENTS.TEMPLATE_ID = TEMPLATES.TEMPLATE_ID WHERE TEMPLATES.TEMPLATE_TYPE_CODE != 'BK'
extra gold: SELECT COUNT ( * )  FROM DOCUMENTS WHERE DOCUMENT_NAME NOT IN  ( SELECT T2.DOCUMENT_NAME FROM TEMPLATES AS T1 JOIN DOCUMENTS AS T2 ON T1.TEMPLATE_ID   =   T2.TEMPLATE_ID WHERE T1.TEMPLATE_TYPE_CODE   =   "BK" ) 

eval_err_num:275
easy pred: SELECT CL.COUNTRYCODE FROM COUNTRYLANGUAGE CL WHERE CL.LANGUAGE <> 'ENGLISH'
easy gold: SELECT COUNTRYCODE FROM COUNTRYLANGUAGE WHERE LANGUAGE  !=   "ENGLISH"

eval_err_num:276
hard pred: SELECT C.CODE FROM COUNTRY C JOIN COUNTRYLANGUAGE CL ON C.CODE = CL.COUNTRYCODE WHERE CL.LANGUAGE <> 'ENGLISH' AND C.GOVERNMENTFORM <> 'REPUBLIC'
hard gold: SELECT CODE FROM COUNTRY WHERE GOVERNMENTFORM !=  "REPUBLIC" EXCEPT SELECT COUNTRYCODE FROM COUNTRYLANGUAGE WHERE LANGUAGE   =   "ENGLISH"

eval_err_num:277
extra pred: SELECT CL.COUNTRYCODE, CL.LANGUAGE FROM COUNTRYLANGUAGE CL WHERE CL.COUNTRYCODE IN ( SELECT C.CODE FROM COUNTRY C JOIN COUNTRYLANGUAGE CL ON C.CODE = CL.COUNTRYCODE WHERE CL.LANGUAGE <> 'ENGLISH' AND C.GOVERNMENTFORM <> 'REPUBLIC' )
extra gold: SELECT COUNTRYCODE, LANGUAGE FROM COUNTRYLANGUAGE WHERE COUNTRYCODE IN  ( SELECT CODE FROM COUNTRY WHERE GOVERNMENTFORM !=  "REPUBLIC" EXCEPT SELECT COUNTRYCODE FROM COUNTRYLANGUAGE WHERE LANGUAGE   =   "ENGLISH" ) 

eval_err_num:278
extra pred: SELECT C.NAME FROM COUNTRY C JOIN COUNTRYLANGUAGE CL ON C.CODE = CL.COUNTRYCODE WHERE CL.LANGUAGE <> 'ENGLISH' AND C.GOVERNMENTFORM <> 'REPUBLIC' AND C.CONTINENT = 'NORTH AMERICA'
extra gold: SELECT CODE FROM COUNTRY WHERE CONTINENT  =  "NORTH AMERICA" AND CODE IN  ( SELECT CODE FROM COUNTRY WHERE GOVERNMENTFORM !=  "REPUBLIC" EXCEPT SELECT COUNTRYCODE FROM COUNTRYLANGUAGE WHERE LANGUAGE   =   "ENGLISH" ) 

easy pred: SELECT CELL_NUMBER FROM PROFESSIONALS WHERE STATE = 'INDIANA' AND FIRST_NAME = 'TARYN'
easy gold: SELECT CELL_NUMBER FROM PROFESSIONALS WHERE FIRST_NAME  =  "TARYN"

eval_err_num:279
easy pred: SELECT COUNT(*) AS TOTAL_TEMPLATES FROM TEMPLATES
easy gold: SELECT COUNT ( * )  FROM TEMPLATES

eval_err_num:280
hard pred: SORRY, THERE IS NO SUCH SINGER WHO IS ABOVE AGE 40 AND BELOW AGE 30 AT THE SAME TIME.
hard gold: SELECT COUNTRY FROM SINGER WHERE AGE  >  40 INTERSECT SELECT COUNTRY FROM SINGER WHERE AGE  <  30

medium pred: SELECT ACCELERATE FROM CARS_DATA JOIN CAR_NAMES ON CARS_DATA.ID = CAR_NAMES.MAKEID JOIN MODEL_LIST ON CAR_NAMES.MODEL = MODEL_LIST.MODEL JOIN CAR_MAKERS ON MODEL_LIST.MAKER = CAR_MAKERS.ID JOIN COUNTRIES ON CAR_MAKERS.COUNTRY = COUNTRIES.COUNTRYID WHERE CAR_NAMES.MAKE = 'AMC HORNET SPORTABOUT (SW)'
medium gold: SELECT T1.ACCELERATE FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.ID   =   T2.MAKEID WHERE T2.MAKE   =   'AMC HORNET SPORTABOUT  ( SW ) '

hard pred: SELECT MODEL FROM MODEL_LIST ORDER BY MODELID DESC LIMIT 1
hard gold: SELECT T2.MODEL FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.ID   =   T2.MAKEID ORDER BY T1.YEAR DESC LIMIT 1

eval_err_num:281
hard pred: SELECT TEMPLATES.TEMPLATE_ID FROM TEMPLATES LEFT JOIN DOCUMENTS ON TEMPLATES.TEMPLATE_ID = DOCUMENTS.TEMPLATE_ID WHERE DOCUMENTS.TEMPLATE_ID IS NULL
hard gold: SELECT TEMPLATE_ID FROM TEMPLATES EXCEPT SELECT TEMPLATE_ID FROM DOCUMENTS

eval_err_num:282
hard pred: SELECT TEMPLATES.TEMPLATE_ID, TEMPLATES.DATE_EFFECTIVE_TO FROM TEMPLATES WHERE TEMPLATES.DATE_EFFECTIVE_TO >= GETDATE()
hard gold: SELECT DATE_EFFECTIVE_TO FROM TEMPLATES WHERE TEMPLATE_ID IN  (  SELECT TEMPLATE_ID FROM TEMPLATES EXCEPT SELECT TEMPLATE_ID FROM DOCUMENTS ) 

eval_err_num:283
hard pred: SELECT COUNT(DISTINCT TEMPLATE_ID) AS USED_TEMPLATE_COUNT FROM DOCUMENTS
hard gold: SELECT COUNT ( * )  FROM TEMPLATES WHERE TEMPLATE_ID IN  ( SELECT TEMPLATE_ID FROM TEMPLATES EXCEPT SELECT TEMPLATE_ID FROM DOCUMENTS ) 

hard pred: SELECT TEMPLATE_ID FROM TEMPLATES
hard gold: SELECT TEMPLATE_ID FROM TEMPLATES EXCEPT SELECT TEMPLATE_ID FROM DOCUMENTS

eval_err_num:284
medium pred: SELECT CONCERT.CONCERT_NAME, CONCERT.THEME, COUNT(SINGER_IN_CONCERT.SINGER_ID) AS NUM_SINGERS FROM CONCERT INNER JOIN SINGER_IN_CONCERT ON CONCERT.CONCERT_ID = SINGER_IN_CONCERT.CONCERT_ID GROUP BY CONCERT.CONCERT_NAME, CONCERT.THEME
medium gold: SELECT T2.CONCERT_NAME , T2.THEME , COUNT ( * )  FROM SINGER_IN_CONCERT AS T1 JOIN CONCERT AS T2 ON T1.CONCERT_ID  =  T2.CONCERT_ID GROUP BY T2.CONCERT_ID

eval_err_num:285
easy pred: THERE IS NOT ENOUGH INFORMATION TO ANSWER THIS QUESTION BASED ON THE GIVEN TABLE STRUCTURES. THERE IS NO TABLE OR COLUMN NAMED "SUPER BOOTCAMP".
easy gold: SELECT YEAR FROM CONCERT WHERE CONCERT_NAME  =  "SUPER BOOTCAMP"

eval_err_num:286
easy pred: THERE IS NOT ENOUGH INFORMATION TO ANSWER THIS QUESTION BASED ON THE GIVEN TABLE STRUCTURES. THERE IS NO TABLE OR COLUMN NAMED "SUPER BOOTCAMP".
easy gold: SELECT STADIUM_ID FROM CONCERT WHERE CONCERT_NAME  =  "SUPER BOOTCAMP"

eval_err_num:287
easy pred: SELECT SUM(POPULATION) AS POPULATION_ASIA FROM COUNTRY WHERE CONTINENT = 'ASIA'
easy gold: SELECT SUM ( POPULATION )  FROM COUNTRY WHERE CONTINENT  =  'ASIA'

easy pred: SELECT LIFEEXPECTANCY FROM COUNTRY WHERE NAME = 'ANGOLA'
easy gold: SELECT LIFEEXPECTANCY FROM COUNTRY WHERE LOCALNAME  =  'ANGOLA'

easy pred: SELECT GNP FROM COUNTRY WHERE NAME = 'ARUBA'
easy gold: SELECT GNP FROM COUNTRY WHERE LOCALNAME  =  'ANGOLA'

hard pred: SELECT NAME FROM SINGER WHERE SONG_RELEASE_YEAR > (SELECT AVG(SONG_RELEASE_YEAR) FROM SINGER)
hard gold: SELECT SONG_NAME FROM SINGER WHERE SONG_RELEASE_YEAR  >   ( SELECT AVG ( SONG_RELEASE_YEAR )  FROM SINGER ) 

eval_err_num:288
easy pred: SELECT C.NAME AS CONDUCTOR, O.ORCHESTRA AS ORCHESTRA FROM CONDUCTOR C INNER JOIN ORCHESTRA O ON C.CONDUCTOR_ID = O.CONDUCTOR_ID ORDER BY C.NAME
easy gold: SELECT T2.ORCHESTRA FROM CONDUCTOR AS T1 JOIN ORCHESTRA AS T2 ON T1.CONDUCTOR_ID   =   T2.CONDUCTOR_ID

eval_err_num:289
easy pred: SELECT COUNT(*) AS NUM_OF_STUDENTS FROM STUDENTS
easy gold: SELECT COUNT ( * )  FROM STUDENTS

eval_err_num:290
easy pred: SELECT COUNT(*) AS NUM_OF_STUDENT_ENROLMENT FROM STUDENT_ENROLMENT
easy gold: SELECT COUNT ( * )  FROM STUDENT_ENROLMENT

eval_err_num:291
easy pred: SELECT DISTINCT TEMPLATES.TEMPLATE_ID, TEMPLATES.TEMPLATE_DETAILS FROM TEMPLATES INNER JOIN DOCUMENTS ON TEMPLATES.TEMPLATE_ID = DOCUMENTS.TEMPLATE_ID
easy gold: SELECT * FROM TEMPLATES AS T1 JOIN DOCUMENTS AS T2 ON T1.TEMPLATE_ID   =   T2.TEMPLATE_ID

eval_err_num:292
medium pred: SELECT DISTINCT TEMPLATES.TEMPLATE_ID, REF_TEMPLATE_TYPES.TEMPLATE_TYPE_DESCRIPTION FROM TEMPLATES INNER JOIN DOCUMENTS ON TEMPLATES.TEMPLATE_ID = DOCUMENTS.TEMPLATE_ID INNER JOIN REF_TEMPLATE_TYPES ON TEMPLATES.TEMPLATE_TYPE_CODE = REF_TEMPLATE_TYPES.TEMPLATE_TYPE_CODE
medium gold: SELECT T1.TEMPLATE_TYPE_DESCRIPTION FROM REF_TEMPLATE_TYPES AS T1 JOIN TEMPLATES AS T2 ON T1.TEMPLATE_TYPE_CODE  =  T2.TEMPLATE_TYPE_CODE JOIN DOCUMENTS AS T3 ON T2.TEMPLATE_ID  =  T3.TEMPLATE_ID

eval_err_num:293
medium pred: SELECT DISTINCT REF_TEMPLATE_TYPES.TEMPLATE_TYPE_DESCRIPTION FROM TEMPLATES INNER JOIN DOCUMENTS ON TEMPLATES.TEMPLATE_ID = DOCUMENTS.TEMPLATE_ID INNER JOIN REF_TEMPLATE_TYPES ON TEMPLATES.TEMPLATE_TYPE_CODE = REF_TEMPLATE_TYPES.TEMPLATE_TYPE_CODE
medium gold: SELECT DISTINCT T1.TEMPLATE_TYPE_DESCRIPTION FROM REF_TEMPLATE_TYPES AS T1 JOIN TEMPLATES AS T2 ON T1.TEMPLATE_TYPE_CODE  =  T2.TEMPLATE_TYPE_CODE JOIN DOCUMENTS AS T3 ON T2.TEMPLATE_ID  =  T3.TEMPLATE_ID

eval_err_num:294
medium pred: -- QUERY TO GET THE COUNTRY WITH THE LARGEST AREA SELECT NAME FROM COUNTRY WHERE SURFACEAREA = (SELECT MAX(SURFACEAREA) FROM COUNTRY); -- QUERY TO GET THE POPULATION OF THE COUNTRY WITH THE LARGEST AREA SELECT POPULATION FROM COUNTRY WHERE NAME = 'RUSSIAN FEDERATION'
medium gold: SELECT POPULATION FROM COUNTRY ORDER BY SURFACEAREA DESC LIMIT 1

eval_err_num:295
medium pred: -- QUERY TO GET THE LEADER OF THE RUSSIAN FEDERATION SELECT HEADOFSTATE FROM COUNTRY WHERE NAME = 'RUSSIAN FEDERATION'
medium gold: SELECT HEADOFSTATE FROM COUNTRY ORDER BY SURFACEAREA DESC LIMIT 1

eval_err_num:296
medium pred: -- QUERY TO GET THE CONTINENT WHERE THE RUSSIAN FEDERATION IS LOCATED SELECT CONTINENT FROM COUNTRY WHERE NAME = 'RUSSIAN FEDERATION'
medium gold: SELECT CONTINENT FROM COUNTRY ORDER BY SURFACEAREA DESC LIMIT 1

eval_err_num:297
medium pred: SELECT P.NAME FROM POKER_PLAYER PP JOIN PEOPLE P ON PP.PEOPLE_ID = P.PEOPLE_ID WHERE PP.EARNINGS > 300000
medium gold: SELECT T1.NAME FROM PEOPLE AS T1 JOIN POKER_PLAYER AS T2 ON T1.PEOPLE_ID   =   T2.PEOPLE_ID WHERE T2.EARNINGS  >  300000

easy pred: SELECT COUNT(*) FROM POKER_PLAYER WHERE EARNINGS > 300000
easy gold: SELECT COUNT ( POKER_PLAYER_ID )  FROM POKER_PLAYER

medium pred: SELECT COUNT(*) FROM STUDENTS WHERE CURRENT_ADDRESS_ID IN (SELECT ADDRESS_ID FROM ADDRESSES WHERE STATE_PROVINCE_COUNTY = 'NORTH CAROLINA')
medium gold: SELECT COUNT ( * )  FROM STUDENTS AS T1 JOIN ADDRESSES AS T2 ON T1.CURRENT_ADDRESS_ID   =   T2.ADDRESS_ID WHERE T2.STATE_PROVINCE_COUNTY   =   'NORTHCAROLINA'

medium pred: SELECT FIRST_NAME, LAST_NAME FROM STUDENTS WHERE CURRENT_ADDRESS_ID IN (SELECT ADDRESS_ID FROM ADDRESSES WHERE STATE_PROVINCE_COUNTY = 'NORTH CAROLINA')
medium gold: SELECT T1.FIRST_NAME,T1.LAST_NAME FROM STUDENTS AS T1 JOIN ADDRESSES AS T2 ON T1.CURRENT_ADDRESS_ID   =   T2.ADDRESS_ID WHERE T2.STATE_PROVINCE_COUNTY   =   'NORTHCAROLINA'

extra pred: SELECT FIRST_NAME, LAST_NAME FROM STUDENTS WHERE CURRENT_ADDRESS_ID IN (SELECT ADDRESS_ID FROM ADDRESSES WHERE STATE_PROVINCE_COUNTY = 'NORTH CAROLINA') AND STUDENT_ID NOT IN (SELECT STUDENT_ID FROM STUDENT_ENROLMENT)
extra gold: SELECT T1.FIRST_NAME, T1.LAST_NAME FROM STUDENTS AS T1 JOIN ADDRESSES AS T2 ON T1.CURRENT_ADDRESS_ID   =   T2.ADDRESS_ID WHERE T2.STATE_PROVINCE_COUNTY   =   'NORTHCAROLINA' EXCEPT SELECT T3.FIRST_NAME, T3.LAST_NAME FROM STUDENTS AS T3 JOIN STUDENT_ENROLMENT AS T4 ON T3.STUDENT_ID   =   T4.STUDENT_ID

eval_err_num:298
hard pred: SELECT ACS.AREA_CODE FROM AREA_CODE_STATE ACS JOIN VOTES V ON ACS.STATE = V.STATE JOIN CONTESTANTS C ON V.CONTESTANT_NUMBER = C.CONTESTANT_NUMBER WHERE C.CONTESTANT_NAME = 'TABATHA GEHLING'
hard gold: SELECT T3.AREA_CODE FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.CONTESTANT_NUMBER  =  T2.CONTESTANT_NUMBER JOIN AREA_CODE_STATE AS T3 ON T2.STATE  =  T3.STATE WHERE T1.CONTESTANT_NAME  =  'TABATHA GEHLING'

eval_err_num:299
hard pred: SELECT ACS.AREA_CODE FROM AREA_CODE_STATE ACS JOIN VOTES V ON ACS.STATE = V.STATE JOIN CONTESTANTS C ON V.CONTESTANT_NUMBER = C.CONTESTANT_NUMBER WHERE C.CONTESTANT_NAME = 'KELLY CLAUSS'
hard gold: SELECT T3.AREA_CODE FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.CONTESTANT_NUMBER  =  T2.CONTESTANT_NUMBER JOIN AREA_CODE_STATE AS T3 ON T2.STATE  =  T3.STATE WHERE T1.CONTESTANT_NAME  =  'KELLY CLAUSS'

eval_err_num:300
extra pred: SELECT ACS.AREA_CODE FROM AREA_CODE_STATE ACS JOIN VOTES V ON ACS.STATE = V.STATE JOIN CONTESTANTS C ON V.CONTESTANT_NUMBER = C.CONTESTANT_NUMBER WHERE C.CONTESTANT_NAME IN ('KELLY CLAUSS', 'TABATHA GEHLING') GROUP BY ACS.AREA_CODE HAVING COUNT(DISTINCT C.CONTESTANT_NUMBER) = 2
extra gold: SELECT T3.AREA_CODE FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.CONTESTANT_NUMBER  =  T2.CONTESTANT_NUMBER JOIN AREA_CODE_STATE AS T3 ON T2.STATE  =  T3.STATE WHERE T1.CONTESTANT_NAME  =  'TABATHA GEHLING' INTERSECT SELECT T3.AREA_CODE FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.CONTESTANT_NUMBER  =  T2.CONTESTANT_NUMBER JOIN AREA_CODE_STATE AS T3 ON T2.STATE  =  T3.STATE WHERE T1.CONTESTANT_NAME  =  'KELLY CLAUSS'

medium pred: SELECT DEGREE_SUMMARY_NAME FROM DEGREE_PROGRAMS WHERE DEPARTMENT_ID = ( SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE DEPARTMENT_NAME = '[DEPARTMENT_NAME]' )
medium gold: SELECT T2.DEGREE_SUMMARY_NAME FROM DEPARTMENTS AS T1 JOIN DEGREE_PROGRAMS AS T2 ON T1.DEPARTMENT_ID  =  T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME  =  'STATISTICS'

extra pred: SELECT EMAIL_ADDRESS FROM PROFESSIONALS WHERE PROFESSIONAL_ID NOT IN (SELECT PROFESSIONAL_ID FROM TREATMENTS)
extra gold: SELECT PROFESSIONAL_ID , ROLE_CODE , EMAIL_ADDRESS FROM PROFESSIONALS EXCEPT SELECT T1.PROFESSIONAL_ID , T1.ROLE_CODE , T1.EMAIL_ADDRESS FROM PROFESSIONALS AS T1 JOIN TREATMENTS AS T2 ON T1.PROFESSIONAL_ID  =  T2.PROFESSIONAL_ID

medium pred: SELECT ID FROM CAR_MAKERS WHERE MAKER = 'AMC' AND COUNTRY = (SELECT COUNTRYID FROM COUNTRIES WHERE COUNTRYNAME = 'UNITED STATES')
medium gold: SELECT ID FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.ID   =   T2.MAKER WHERE T1.FULLNAME   =   'AMERICAN MOTOR COMPANY'

medium pred: SELECT MODELID FROM MODEL_LIST WHERE MAKER = (SELECT ID FROM CAR_MAKERS WHERE MAKER = 'AMC')
medium gold: SELECT MODELID FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.ID   =   T2.MAKER WHERE T1.MAKER   =   'AMC'

medium pred: SELECT MAKER FROM CAR_MAKERS WHERE ID = 2
medium gold: SELECT DISTINCT ( T1.MAKER )  FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.ID   =   T2.MAKER WHERE T1.ID  =  2

medium pred: SELECT COUNT(MODELID) FROM MODEL_LIST WHERE MAKER = (SELECT ID FROM CAR_MAKERS WHERE FULLNAME = 'AMERICAN MOTOR COMPANY')
medium gold: SELECT COUNT ( * )  FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.ID   =   T2.MAKER WHERE T1.FULLNAME   =   'AMERICAN MOTOR COMPANY'

eval_err_num:301
medium pred: SELECT T.NAME, C.COURSE FROM TEACHER T INNER JOIN COURSE_ARRANGE CA ON T.TEACHER_ID = CA.TEACHER_ID INNER JOIN COURSE C ON CA.COURSE_ID = C.COURSE_ID
medium gold: SELECT T3.NAME ,  T2.COURSE FROM COURSE_ARRANGE AS T1 JOIN COURSE AS T2 ON T1.COURSE_ID   =   T2.COURSE_ID JOIN TEACHER AS T3 ON T1.TEACHER_ID   =   T3.TEACHER_ID

eval_err_num:302
hard pred: SELECT T.NAME, C.COURSE FROM TEACHER T INNER JOIN COURSE_ARRANGE CA ON T.TEACHER_ID = CA.TEACHER_ID INNER JOIN COURSE C ON CA.COURSE_ID = C.COURSE_ID ORDER BY T.NAME ASC
hard gold: SELECT T3.NAME ,  T2.COURSE FROM COURSE_ARRANGE AS T1 JOIN COURSE AS T2 ON T1.COURSE_ID   =   T2.COURSE_ID JOIN TEACHER AS T3 ON T1.TEACHER_ID   =   T3.TEACHER_ID ORDER BY T3.NAME

eval_err_num:303
hard pred: SELECT T.TEACHER_ID, T.NAME, C.COURSE FROM TEACHER T INNER JOIN COURSE_ARRANGE CA ON T.TEACHER_ID = CA.TEACHER_ID INNER JOIN COURSE C ON CA.COURSE_ID = C.COURSE_ID ORDER BY T.NAME ASC
hard gold: SELECT T3.NAME ,  T2.COURSE, T1.TEACHER_ID FROM COURSE_ARRANGE AS T1 JOIN COURSE AS T2 ON T1.COURSE_ID   =   T2.COURSE_ID JOIN TEACHER AS T3 ON T1.TEACHER_ID   =   T3.TEACHER_ID ORDER BY T3.NAME

easy pred: SELECT NAME, GOVERNMENTFORM FROM COUNTRY
easy gold: SELECT GOVERNMENTFORM FROM COUNTRY

easy pred: SELECT NAME, SURFACEAREA FROM COUNTRY
easy gold: SELECT SURFACEAREA FROM COUNTRY

easy pred: SELECT ID, PACKAGE_OPTION FROM TV_CHANNEL
easy gold: SELECT DISTINCT PACKAGE_OPTION FROM TV_CHANNEL

easy pred: SELECT ID, CONTENT FROM TV_CHANNEL
easy gold: SELECT DISTINCT  CONTENT FROM TV_CHANNEL

eval_err_num:304
easy pred: I'M SORRY, I NEED MORE INFORMATION TO ANSWER THIS QUESTION. WHICH TV CHANNELS ARE YOU REFERRING TO?
easy gold: SELECT SERIES_NAME FROM TV_CHANNEL

hard pred: SELECT FIRST_NAME FROM OWNERS UNION SELECT FIRST_NAME FROM PROFESSIONALS
hard gold: SELECT FIRST_NAME FROM PROFESSIONALS UNION SELECT FIRST_NAME FROM OWNERS

eval_err_num:305
hard pred: SELECT FIRST_NAME FROM OWNERS UNION SELECT FIRST_NAME FROM PROFESSIONALS EXCEPT SELECT NAME FROM DOGS WHERE NAME IS NOT NULL
hard gold: SELECT FIRST_NAME FROM PROFESSIONALS UNION SELECT FIRST_NAME FROM OWNERS EXCEPT SELECT NAME FROM DOGS

eval_err_num:306
hard pred: SELECT FIRST_NAME FROM OWNERS UNION SELECT FIRST_NAME FROM PROFESSIONALS INTERSECT SELECT NAME FROM DOGS WHERE NAME IS NOT NULL
hard gold: SELECT FIRST_NAME FROM PROFESSIONALS UNION SELECT FIRST_NAME FROM OWNERS UNION SELECT NAME FROM DOGS

eval_err_num:307
easy pred: SELECT DISTINCT STUDENT.LNAME FROM STUDENT INNER JOIN HAS_PET ON STUDENT.STUID = HAS_PET.STUID
easy gold: SELECT LNAME FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T2.STUID = T1.STUID

eval_err_num:308
hard pred: SELECT DISTINCT STUDENT.LNAME FROM STUDENT INNER JOIN HAS_PET ON STUDENT.STUID = HAS_PET.STUID INNER JOIN PETS ON HAS_PET.PETID = PETS.PETID WHERE PETS.PETTYPE = 'CAT'
hard gold: SELECT T1.LNAME FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID  =  T2.STUID JOIN PETS AS T3 ON T3.PETID  =  T2.PETID WHERE  T3.PETTYPE  =  'CAT'

eval_err_num:309
hard pred: SELECT STUDENT.LNAME FROM STUDENT INNER JOIN HAS_PET ON STUDENT.STUID = HAS_PET.STUID INNER JOIN PETS ON HAS_PET.PETID = PETS.PETID WHERE PETS.PETTYPE = 'CAT' AND PETS.PET_AGE = 3
hard gold: SELECT T1.LNAME FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID  =  T2.STUID JOIN PETS AS T3 ON T3.PETID  =  T2.PETID WHERE T3.PET_AGE  =  3 AND T3.PETTYPE  =  'CAT'

eval_err_num:310
medium pred: SELECT MAJOR_RECORD_FORMAT, COUNT(*) AS COUNT FROM ORCHESTRA GROUP BY MAJOR_RECORD_FORMAT ORDER BY COUNT ASC
medium gold: SELECT MAJOR_RECORD_FORMAT FROM ORCHESTRA GROUP BY MAJOR_RECORD_FORMAT ORDER BY COUNT ( * )  ASC

eval_err_num:311
easy pred: SELECT COUNT(*) AS "NUM_OF_MUSEUMS" FROM MUSEUM
easy gold: SELECT COUNT ( MUSEUM_ID  )  FROM MUSEUM

eval_err_num:312
easy pred: SELECT "NUM_OF_STAFF" FROM MUSEUM WHERE "MUSEUM_ID" = 3
easy gold: SELECT NUM_OF_STAFF FROM MUSEUM WHERE MUSEUM.MUSEUM_ID  =  3

eval_err_num:313
easy pred: SELECT "OPEN_YEAR" FROM MUSEUM WHERE "NAME" = 'CAPITAL PLAZA MUSEUM'
easy gold: SELECT OPEN_YEAR FROM MUSEUM WHERE NAME = 'CAPITAL PLAZA MUSEUM'

eval_err_num:314
medium pred: SELECT V.NAME FROM VISITOR V INNER JOIN VISIT T ON V.ID = T.VISITOR_ID WHERE T.NUM_OF_TICKET > 1 GROUP BY V.NAME
medium gold: SELECT  T1.NAME FROM VISITOR AS T1 JOIN VISIT AS T2 ON T1.ID   =   T2.VISITOR_ID GROUP BY T1.ID HAVING COUNT ( * )   >  1

eval_err_num:315
medium pred: SELECT V.ID, V.NAME, V.AGE FROM VISITOR V INNER JOIN VISIT T ON V.ID = T.VISITOR_ID WHERE T.NUM_OF_TICKET > 1 GROUP BY V.ID, V.NAME, V.AGE
medium gold: SELECT  T1.NAME, T1.ID, T1.AGE FROM VISITOR AS T1 JOIN VISIT AS T2 ON T1.ID   =   T2.VISITOR_ID GROUP BY T1.ID HAVING COUNT ( * )   >  1

eval_err_num:316
medium pred: SELECT V.NAME, V.LEVEL_OF_MEMBERSHIP FROM VISITOR V WHERE V.AGE > 20
medium gold: SELECT  NAME, LEVEL_OF_MEMBERSHIP FROM VISITOR WHERE AGE > 20

eval_err_num:317
medium pred: SELECT V.NAME, V.AGE FROM VISITOR V INNER JOIN VISIT T ON V.ID = T.VISITOR_ID WHERE T.TOTAL_SPENT > 100
medium gold: SELECT  T1.NAME , T1.AGE FROM VISITOR AS T1 JOIN VISIT AS T2 ON T1.ID  =  T2.VISITOR_ID WHERE T2.TOTAL_SPENT > 100

eval_err_num:318
easy pred: SELECT COUNT(DISTINCT GOVERNMENTFORM) AS TOTAL_FORMS FROM COUNTRY
easy gold: SELECT COUNT ( GOVERNMENTFORM )  FROM COUNTRY

eval_err_num:319
easy pred: SELECT COUNT(*) AS FORMS_ABOVE_AVG FROM COUNTRY WHERE LIFEEXPECTANCY > 72
easy gold: SELECT GOVERNMENTFORM FROM COUNTRY GROUP BY GOVERNMENTFORM HAVING AVG ( LIFEEXPECTANCY )   >  72

eval_err_num:320
medium pred: SELECT GOVERNMENTFORM, SUM(POPULATION) AS TOTAL_POPULATION FROM COUNTRY WHERE LIFEEXPECTANCY > 72 GROUP BY GOVERNMENTFORM
medium gold: SELECT SUM ( POPULATION )  ,  GOVERNMENTFORM FROM COUNTRY GROUP BY GOVERNMENTFORM HAVING AVG ( LIFEEXPECTANCY )   >  72

eval_err_num:321
easy pred: SELECT GOVERNMENTFORM, AVG(LIFEEXPECTANCY) AS AVG_LIFE_EXPECTANCY FROM COUNTRY WHERE LIFEEXPECTANCY > 72 GROUP BY GOVERNMENTFORM
easy gold: SELECT AVG ( LIFEEXPECTANCY )  FROM COUNTRY GROUP BY GOVERNMENTFORM HAVING AVG ( LIFEEXPECTANCY )   >  72

medium pred: SELECT GOVERNMENTFORM, POPULATION FROM COUNTRY WHERE LIFEEXPECTANCY > 72 ORDER BY POPULATION DESC
medium gold: SELECT SUM ( POPULATION )  ,  GOVERNMENTFORM FROM COUNTRY GROUP BY GOVERNMENTFORM HAVING AVG ( LIFEEXPECTANCY )   >  72

eval_err_num:322
extra pred: SELECT AIRLINE, COUNT(*) AS NUMFLIGHTS FROM FLIGHTS JOIN AIRLINES ON FLIGHTS.AIRLINE = AIRLINES.UID GROUP BY AIRLINE ORDER BY NUMFLIGHTS DESC LIMIT 1
extra gold: SELECT T1.AIRLINE FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.UID   =   T2.AIRLINE GROUP BY T1.AIRLINE ORDER BY COUNT ( * )  DESC LIMIT 1

eval_err_num:323
extra pred: SELECT AIRLINE, COUNT(*) AS NUMFLIGHTS FROM FLIGHTS JOIN AIRLINES ON FLIGHTS.AIRLINE = AIRLINES.UID GROUP BY AIRLINE ORDER BY NUMFLIGHTS ASC LIMIT 1
extra gold: SELECT T1.AIRLINE FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.UID   =   T2.AIRLINE GROUP BY T1.AIRLINE ORDER BY COUNT ( * )  ASC LIMIT 1

eval_err_num:324
hard pred: SELECT B.ID, B.NAME FROM BATTLE B INNER JOIN SHIP S ON B.ID = S.LOST_IN_BATTLE INNER JOIN DEATH D ON S.ID = D.CAUSED_BY_SHIP_ID GROUP BY B.ID, B.NAME HAVING COUNT(*) > 10
hard gold: SELECT T1.ID ,  T1.NAME FROM BATTLE AS T1 JOIN SHIP AS T2 ON T1.ID   =   T2.LOST_IN_BATTLE JOIN DEATH AS T3 ON T2.ID   =   T3.CAUSED_BY_SHIP_ID GROUP BY T1.ID HAVING SUM ( T3.KILLED )   >  10

eval_err_num:325
hard pred: SELECT B.ID, B.NAME, B.DATE FROM BATTLE B INNER JOIN SHIP S ON B.ID = S.LOST_IN_BATTLE INNER JOIN DEATH D ON S.ID = D.CAUSED_BY_SHIP_ID GROUP BY B.ID, B.NAME, B.DATE HAVING COUNT(*) > 10
hard gold: SELECT T1.ID ,  T1.NAME ,T1.DATE FROM BATTLE AS T1 JOIN SHIP AS T2 ON T1.ID   =   T2.LOST_IN_BATTLE JOIN DEATH AS T3 ON T2.ID   =   T3.CAUSED_BY_SHIP_ID GROUP BY T1.ID HAVING SUM ( T3.KILLED )   >  10

eval_err_num:326
easy pred: SELECT AVG(PET_AGE) AS AVG_CAT_AGE FROM PETS WHERE PETTYPE = 'CAT'
easy gold: SELECT AVG ( PET_AGE )  FROM PETS WHERE PETTYPE  =  'CAT'

eval_err_num:327
easy pred: SELECT AVG(PET_AGE) AS AVG_DOG_AGE FROM PETS WHERE PETTYPE = 'DOG'
easy gold: SELECT AVG ( PET_AGE )  FROM PETS WHERE PETTYPE  =  'DOG'

eval_err_num:328
easy pred: SELECT MAX(PET_AGE) AS MAX_DOG_AGE FROM PETS WHERE PETTYPE = 'DOG'
easy gold: SELECT MAX ( PET_AGE )  FROM PETS WHERE PETTYPE  =  'DOG'

eval_err_num:329
medium pred: SELECT PETTYPE, MAX(PET_AGE) AS MAX_PET_AGE FROM PETS WHERE PETTYPE IN ('CAT', 'DOG') GROUP BY PETTYPE
medium gold: SELECT MAX ( PET_AGE )  ,  PETTYPE FROM PETS GROUP BY PETTYPE

eval_err_num:330
easy pred: SELECT MAX(PET_AGE) AS MAX_CAT_AGE FROM PETS WHERE PETTYPE = 'CAT'
easy gold: SELECT MAX ( PET_AGE )  FROM PETS WHERE PETTYPE  =  'CAT'

eval_err_num:331
hard pred: SELECT MODEL FROM MODEL_LIST INNER JOIN CAR_MAKERS ON MODEL_LIST.MAKER = CAR_MAKERS.ID INNER JOIN COUNTRIES ON CAR_MAKERS.COUNTRY = COUNTRIES.COUNTRYID WHERE COUNTRIES.COUNTRYNAME = 'GERMANY'
hard gold: SELECT T3.MODEL FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.COUNTRYID   =   T2.COUNTRY JOIN MODEL_LIST AS T3 ON T2.ID   =   T3.MAKER WHERE T1.COUNTRYNAME  =  "GERMANY"

eval_err_num:332
easy pred: SELECT MODELID FROM MODEL_LIST INNER JOIN CAR_MAKERS ON MODEL_LIST.MAKER = CAR_MAKERS.ID WHERE CAR_MAKERS.MAKER = 'BMW'
easy gold: SELECT MODELID FROM MODEL_LIST WHERE MODEL  =  "BMW"

eval_err_num:333
extra pred: SELECT COUNTRIES.COUNTRYID, COUNTRIES.COUNTRYNAME FROM COUNTRIES INNER JOIN CAR_MAKERS ON COUNTRIES.COUNTRYID = CAR_MAKERS.COUNTRY INNER JOIN MODEL_LIST ON CAR_MAKERS.ID = MODEL_LIST.MAKER WHERE COUNTRIES.COUNTRYID IN ( SELECT COUNTRY FROM CAR_MAKERS GROUP BY COUNTRY HAVING COUNT(*) > 3 ) OR MODEL_LIST.MODEL = 'FLAT'
extra gold: SELECT T1.COUNTRYID ,  T1.COUNTRYNAME FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.COUNTRYID   =   T2.COUNTRY GROUP BY T1.COUNTRYID HAVING COUNT ( * )   >  3 UNION SELECT T1.COUNTRYID ,  T1.COUNTRYNAME FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.COUNTRYID   =   T2.COUNTRY JOIN MODEL_LIST AS T3 ON T2.ID   =   T3.MAKER WHERE T3.MODEL   =   'FIAT'

eval_err_num:334
extra pred: SELECT P.CELL_NUMBER FROM PROFESSIONALS P JOIN TREATMENTS T ON P.PROFESSIONAL_ID = T.PROFESSIONAL_ID GROUP BY P.CELL_NUMBER ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.CELL_NUMBER FROM PROFESSIONALS AS T1 JOIN TREATMENTS AS T2 ON T1.PROFESSIONAL_ID   =   T2.PROFESSIONAL_ID GROUP BY T1.PROFESSIONAL_ID ORDER BY COUNT ( * )   DESC LIMIT 1

eval_err_num:335
medium pred: SELECT T.PROFESSIONAL_ID FROM TREATMENTS T GROUP BY T.PROFESSIONAL_ID HAVING COUNT(DISTINCT T.TREATMENT_TYPE_CODE) >= 2
medium gold: SELECT T1.PROFESSIONAL_ID  FROM PROFESSIONALS AS T1 JOIN TREATMENTS AS T2 ON T1.PROFESSIONAL_ID   =   T2.PROFESSIONAL_ID GROUP BY T1.PROFESSIONAL_ID HAVING COUNT ( * )    >=    2

eval_err_num:336
easy pred: SELECT COUNT(DISTINCT T.PROFESSIONAL_ID) FROM TREATMENTS T GROUP BY T.PROFESSIONAL_ID HAVING COUNT(*) = 1
easy gold: SELECT COUNT ( * )  FROM  ( SELECT *  FROM PROFESSIONALS AS T1 JOIN TREATMENTS AS T2 ON T1.PROFESSIONAL_ID   =   T2.PROFESSIONAL_ID GROUP BY T1.PROFESSIONAL_ID HAVING COUNT ( * )    =  1 ) 

eval_err_num:337
easy pred: SELECT P.PARAGRAPH_TEXT FROM PARAGRAPHS P JOIN ( SELECT DOCUMENT_ID FROM PARAGRAPHS GROUP BY DOCUMENT_ID HAVING COUNT(*) BETWEEN 1 AND 2 ) D ON P.DOCUMENT_ID = D.DOCUMENT_ID
easy gold: SELECT PARAGRAPH_TEXT FROM PARAGRAPHS GROUP BY DOCUMENT_ID HAVING COUNT ( * )  BETWEEN 1 AND 2

eval_err_num:338
medium pred: I'M SORRY, AVAILABLE FOR WHAT? COULD YOU PLEASE PROVIDE MORE CONTEXT OR INFORMATION?
medium gold: SELECT FNAME, LNAME FROM STUDENT WHERE SEX   =   'F'

eval_err_num:339
hard pred: SELECT P.WEIGHT FROM PETS P JOIN HAS_PET HP ON P.PETID = HP.PETID JOIN STUDENT S ON HP.STUID = S.STUID WHERE S.SEX = 'F'
hard gold: SELECT T3.WEIGHT FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID   =   T2.STUID JOIN PETS AS T3 ON T2.PETID   =   T3.PETID WHERE T1.SEX   =   'F'

medium pred: SELECT ID FROM CARS_DATA WHERE HORSEPOWER = (SELECT MIN(HORSEPOWER) FROM CARS_DATA)
medium gold: SELECT ID FROM CARS_DATA ORDER BY HORSEPOWER LIMIT 1

extra pred: SELECT ID FROM CARS_DATA WHERE HORSEPOWER < (SELECT AVG(HORSEPOWER) FROM CARS_DATA)
extra gold: SELECT T1.ID FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.ID   =   T2.MAKEID WHERE T1.HORSEPOWER <  ( SELECT AVG ( HORSEPOWER )  FROM CARS_DATA ) 

extra pred: SELECT CAR_NAMES.MAKE, MODEL_LIST.MODEL, CARS_DATA.ID FROM CARS_DATA JOIN CAR_NAMES ON CARS_DATA.ID = CAR_NAMES.MAKEID JOIN MODEL_LIST ON CAR_NAMES.MODEL = MODEL_LIST.MODEL WHERE HORSEPOWER < (SELECT AVG(HORSEPOWER) FROM CARS_DATA)
extra gold: SELECT T1.ID ,T2.MODEL FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.ID   =   T2.MAKEID WHERE T1.HORSEPOWER <  ( SELECT AVG ( HORSEPOWER )  FROM CARS_DATA ) 

medium pred: SELECT * FROM TRANSCRIPTS ORDER BY TRANSCRIPT_DATE DESC LIMIT 1
medium gold: SELECT TRANSCRIPT_ID FROM TRANSCRIPTS ORDER BY TRANSCRIPT_DATE DESC LIMIT 1

eval_err_num:340
medium pred: SELECT T.TRANSCRIPT_ID, T.TRANSCRIPT_DATE FROM TRANSCRIPTS T INNER JOIN TRANSCRIPT_CONTENTS TC ON T.TRANSCRIPT_ID = TC.TRANSCRIPT_ID GROUP BY T.TRANSCRIPT_ID HAVING COUNT(TC.STUDENT_COURSE_ID) >= 2
medium gold: SELECT T2.TRANSCRIPT_DATE ,  T1.TRANSCRIPT_ID FROM TRANSCRIPT_CONTENTS AS T1 JOIN TRANSCRIPTS AS T2 ON T1.TRANSCRIPT_ID   =   T2.TRANSCRIPT_ID GROUP BY T1.TRANSCRIPT_ID HAVING COUNT ( * )    >=    2

eval_err_num:341
medium pred: SELECT T.TRANSCRIPT_ID, T.OTHER_DETAILS FROM TRANSCRIPTS T INNER JOIN TRANSCRIPT_CONTENTS TC ON T.TRANSCRIPT_ID = TC.TRANSCRIPT_ID GROUP BY T.TRANSCRIPT_ID HAVING COUNT(TC.STUDENT_COURSE_ID) >= 2
medium gold: SELECT T2.OTHER_DETAILS FROM TRANSCRIPT_CONTENTS AS T1 JOIN TRANSCRIPTS AS T2 ON T1.TRANSCRIPT_ID   =   T2.TRANSCRIPT_ID GROUP BY T1.TRANSCRIPT_ID HAVING COUNT ( * )    >=    2

eval_err_num:342
medium pred: SELECT T.TRANSCRIPT_DATE FROM TRANSCRIPTS T INNER JOIN TRANSCRIPT_CONTENTS TC ON T.TRANSCRIPT_ID = TC.TRANSCRIPT_ID GROUP BY T.TRANSCRIPT_ID HAVING COUNT(TC.STUDENT_COURSE_ID) >= 2
medium gold: SELECT T2.TRANSCRIPT_DATE FROM TRANSCRIPT_CONTENTS AS T1 JOIN TRANSCRIPTS AS T2 ON T1.TRANSCRIPT_ID   =   T2.TRANSCRIPT_ID GROUP BY T1.TRANSCRIPT_ID HAVING COUNT ( * )    >=    2

easy pred: SELECT ID FROM HIGHSCHOOLER
easy gold: SELECT STUDENT_ID FROM FRIEND

eval_err_num:343
medium pred: SELECT SEMESTERS.SEMESTER_NAME, COUNT(STUDENT_ENROLMENT.STUDENT_ENROLMENT_ID) AS ENROLLMENTS FROM SEMESTERS LEFT JOIN STUDENT_ENROLMENT ON SEMESTERS.SEMESTER_ID = STUDENT_ENROLMENT.SEMESTER_ID GROUP BY SEMESTERS.SEMESTER_NAME
medium gold: SELECT T1.SEMESTER_NAME, COUNT ( * )  FROM SEMESTERS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.SEMESTER_ID  =  T2.SEMESTER_ID GROUP BY T2.SEMESTER_ID

eval_err_num:344
extra pred: SELECT SEMESTERS.SEMESTER_NAME, COUNT(STUDENT_ENROLMENT.STUDENT_ENROLMENT_ID) AS ENROLLMENTS FROM SEMESTERS LEFT JOIN STUDENT_ENROLMENT ON SEMESTERS.SEMESTER_ID = STUDENT_ENROLMENT.SEMESTER_ID GROUP BY SEMESTERS.SEMESTER_NAME ORDER BY ENROLLMENTS DESC LIMIT 1
extra gold: SELECT T1.SEMESTER_NAME FROM SEMESTERS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.SEMESTER_ID  =  T2.SEMESTER_ID GROUP BY T2.SEMESTER_ID ORDER BY COUNT ( * )  DESC LIMIT 1

eval_err_num:345
medium pred: SELECT STUDENT_ENROLMENT.STUDENT_ENROLMENT_ID, DEGREE_PROGRAMS.DEGREE_PROGRAM_ID FROM STUDENT_ENROLMENT INNER JOIN DEGREE_PROGRAMS ON STUDENT_ENROLMENT.DEGREE_PROGRAM_ID = DEGREE_PROGRAMS.DEGREE_PROGRAM_ID
medium gold: SELECT STUDENT_ENROLMENT_ID, DEGREE_PROGRAM_ID FROM  STUDENT_ENROLMENT

eval_err_num:346
hard pred: SELECT SEMESTERS.SEMESTER_NAME FROM SEMESTERS LEFT JOIN STUDENT_ENROLMENT ON SEMESTERS.SEMESTER_ID = STUDENT_ENROLMENT.SEMESTER_ID WHERE STUDENT_ENROLMENT.STUDENT_ENROLMENT_ID IS NULL
hard gold: SELECT SEMESTER_NAME FROM SEMESTERS WHERE SEMESTER_ID NOT IN (  SELECT SEMESTER_ID FROM STUDENT_ENROLMENT  ) 

eval_err_num:347
hard pred: SELECT DISTINCT C.NAME FROM COUNTRY C JOIN COUNTRYLANGUAGE CL ON C.CODE = CL.COUNTRYCODE WHERE CL.LANGUAGE <> 'ENGLISH' AND CL.ISOFFICIAL = 'F' ORDER BY C.NAME
hard gold: SELECT NAME FROM COUNTRY WHERE NAME NOT IN  ( SELECT T1.NAME FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE T2.LANGUAGE   =   "ENGLISH" AND T2.ISOFFICIAL   =   "T" ) 

eval_err_num:348
extra pred: SELECT C.NAME, AVG(C.LIFEEXPECTANCY) AS AVGLIFEEXPECTANCY FROM COUNTRY C JOIN COUNTRYLANGUAGE CL ON C.CODE = CL.COUNTRYCODE WHERE CL.LANGUAGE <> 'ENGLISH' AND CL.ISOFFICIAL = 'F' GROUP BY C.NAME ORDER BY AVGLIFEEXPECTANCY DESC
extra gold: SELECT AVG ( LIFEEXPECTANCY )  FROM COUNTRY WHERE NAME NOT IN  ( SELECT T1.NAME FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE T2.LANGUAGE   =   "ENGLISH" AND T2.ISOFFICIAL   =   "T" ) 

eval_err_num:349
medium pred: GOODBYE! FEEL FREE TO ASK ANY MORE QUESTIONS IN THE FUTURE.
medium gold: SELECT AVG ( LIFEEXPECTANCY )  FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE T2.LANGUAGE   =   "ENGLISH" AND T2.ISOFFICIAL   =   "T"

medium pred: SELECT AIRLINE, FLIGHTNO FROM FLIGHTS WHERE SOURCEAIRPORT = 'CVO' AND DESTAIRPORT = 'SNA'
medium gold: SELECT FLIGHTNO FROM FLIGHTS WHERE SOURCEAIRPORT = "CVO" AND DESTAIRPORT = "SNA"

medium pred: SELECT AIRLINE, FLIGHTNO FROM FLIGHTS WHERE SOURCEAIRPORT = 'CVO' AND DESTAIRPORT = 'DFW'
medium gold: SELECT * FROM FLIGHTS WHERE SOURCEAIRPORT = "CVO" AND DESTAIRPORT = "DFW"

eval_err_num:350
medium pred: SELECT "TV_CHANNEL"."ID" FROM "TV_CHANNEL" JOIN "TV_SERIES" ON "TV_CHANNEL"."ID" = "TV_SERIES"."CHANNEL" WHERE "TV_SERIES"."SERIES_NAME" = 'A LOVE OF A LIFETIME'
medium gold: SELECT T1.SERIES_NAME FROM TV_CHANNEL AS T1 JOIN TV_SERIES AS T2 ON T1.ID  =  T2.CHANNEL WHERE T2.EPISODE  =  "A LOVE OF A LIFETIME"

eval_err_num:351
easy pred: SELECT "VIEWERS_M" FROM "TV_SERIES" WHERE "SERIES_NAME" = 'A LOVE OF A LIFETIME'
easy gold: SELECT  VIEWERS_M FROM  TV_SERIES  WHERE EPISODE  =  "A LOVE OF A LIFETIME"

eval_err_num:352
easy pred: SELECT "RATING" FROM "TV_SERIES" WHERE "SERIES_NAME" = 'A LOVE OF A LIFETIME'
easy gold: SELECT  WEEKLY_RANK  FROM  TV_SERIES  WHERE EPISODE  =  "A LOVE OF A LIFETIME"

eval_err_num:353
easy pred: SELECT "AIR_DATE" FROM "TV_SERIES" WHERE "SERIES_NAME" = 'A LOVE OF A LIFETIME'
easy gold: SELECT  AIR_DATE  FROM  TV_SERIES  WHERE EPISODE  =  "A LOVE OF A LIFETIME"

medium pred: SELECT PLAYER_ID FROM PLAYERS ORDER BY BIRTH_DATE ASC LIMIT 1
medium gold: SELECT PLAYER_ID FROM PLAYERS ORDER BY BIRTH_DATE DESC LIMIT 1

medium pred: SELECT PLAYER_ID FROM PLAYERS ORDER BY BIRTH_DATE DESC LIMIT 1
medium gold: SELECT PLAYER_ID FROM PLAYERS ORDER BY BIRTH_DATE LIMIT 1

eval_err_num:354
medium pred: SELECT P.FIRST_NAME, P.COUNTRY_CODE FROM PLAYERS P JOIN ( SELECT PLAYER_ID FROM PLAYERS ORDER BY BIRTH_DATE ASC LIMIT 1 ) YOUNGEST ON P.PLAYER_ID = YOUNGEST.PLAYER_ID JOIN ( SELECT PLAYER_ID FROM PLAYERS ORDER BY BIRTH_DATE DESC LIMIT 1 ) OLDEST ON P.PLAYER_ID = OLDEST.PLAYER_ID
medium gold: SELECT FIRST_NAME, COUNTRY_CODE FROM PLAYERS ORDER BY BIRTH_DATE LIMIT 1

eval_err_num:355
medium pred: SELECT DISTINCT T.NAME FROM TEACHER T JOIN COURSE_ARRANGE CA ON T.TEACHER_ID = CA.TEACHER_ID GROUP BY T.TEACHER_ID HAVING COUNT(DISTINCT CA.COURSE_ID) >= 2
medium gold: SELECT T2.NAME FROM COURSE_ARRANGE AS T1 JOIN TEACHER AS T2 ON T1.TEACHER_ID   =   T2.TEACHER_ID GROUP BY T2.NAME HAVING COUNT ( * )    >=    2

eval_err_num:356
medium pred: I'M SORRY, BUT I NEED MORE INFORMATION TO ANSWER THAT QUESTION. WHICH TEACHER ARE YOU REFERRING TO? PLEASE PROVIDE A NAME OR A TEACHER ID.
medium gold: SELECT T2.AGE, T2.HOMETOWN FROM COURSE_ARRANGE AS T1 JOIN TEACHER AS T2 ON T1.TEACHER_ID   =   T2.TEACHER_ID GROUP BY T2.NAME HAVING COUNT ( * )    >=    2

eval_err_num:357
hard pred: SELECT MAX(T.AGE), CA.GRADE FROM TEACHER T JOIN COURSE_ARRANGE CA ON T.TEACHER_ID = CA.TEACHER_ID WHERE T.AGE = (SELECT MAX(AGE) FROM TEACHER)
hard gold: SELECT T1.GRADE FROM COURSE_ARRANGE AS T1 JOIN TEACHER AS T2 ON T1.TEACHER_ID   =   T2.TEACHER_ID ORDER BY T2.AGE DESC LIMIT 1

eval_err_num:358
easy pred: SELECT SUM("NUM_OF_TICKET") AS "TOTAL_TICKETS_BOUGHT" FROM "VISIT"
easy gold: SELECT MAX ( NUM_OF_TICKET )  FROM VISIT

eval_err_num:359
easy pred: SELECT AVG("NUM_OF_TICKET") AS "AVERAGE_TICKETS_BOUGHT" FROM "VISIT"
easy gold: SELECT AVG ( NUM_OF_TICKET )  FROM VISIT

medium pred: SELECT NAME FROM SINGER WHERE AGE = (SELECT MIN(AGE) FROM SINGER)
medium gold: SELECT NAME FROM SINGER ORDER BY AGE LIMIT 1

eval_err_num:360
easy pred: SELECT NAME FROM COUNTRY WHERE CONTINENT='EUROPE'
easy gold: SELECT NAME FROM COUNTRY WHERE CONTINENT   =   "EUROPE"

eval_err_num:361
medium pred: SELECT * FROM COUNTRY WHERE POPULATION=80000
medium gold: SELECT NAME FROM COUNTRY WHERE CONTINENT   =   "EUROPE" AND POPULATION   =   "80000"

eval_err_num:362
easy pred: SELECT "NAME" FROM "SINGER"
easy gold: SELECT NAME FROM SINGER

eval_err_num:363
easy pred: TO ANSWER YOUR QUESTION, I NEED TO KNOW WHICH QUESTION YOU WANT ME TO ANSWER. PLEASE LET ME KNOW WHICH ONE YOU'RE REFERRING TO.
easy gold: SELECT OTHER_DETAILS FROM DEPARTMENTS WHERE DEPARTMENT_NAME  =  "HISTORY"

eval_err_num:364
easy pred: SELECT COUNT(CYLINDERS) AS NUMBER_OF_CYLINDERS FROM CARS_DATA
easy gold: SELECT SUM ( CYLINDERS )  FROM CARS_DATA

eval_err_num:365
medium pred: SELECT MAX(WEIGHT) AS HIGHEST_WEIGHT FROM CARS_DATA
medium gold: SELECT WEIGHT FROM CARS_DATA ORDER BY WEIGHT DESC LIMIT 1

eval_err_num:366
easy pred: SELECT COUNT(DISTINCT YEAR) AS NUMBER_OF_YEARS FROM CARS_DATA
easy gold: SELECT COUNT ( * )  FROM CARS_DATA

eval_err_num:367
medium pred: SELECT MAX(ACCELERATE) AS HIGHEST_ACCELERATION FROM CARS_DATA
medium gold: SELECT ACCELERATE FROM CARS_DATA ORDER BY ACCELERATE DESC LIMIT 1

eval_err_num:368
medium pred: SELECT MAX(EDISPL) AS HIGHEST_EDISPL FROM CARS_DATA
medium gold: SELECT T1.HORSEPOWER FROM CARS_DATA AS T1 ORDER BY T1.ACCELERATE DESC LIMIT 1

eval_err_num:369
easy pred: SELECT "AGE" FROM "SINGER" WHERE "NAME" = 'JOE SHARP'
easy gold: SELECT AGE FROM SINGER WHERE NAME  =  "JOE SHARP"

eval_err_num:370
easy pred: SELECT COUNT(*) FROM "SINGER" WHERE "COUNTRY" = 'US'
easy gold: SELECT COUNT ( * )  FROM SINGER WHERE COUNTRY  =  "UNITED STATES"

eval_err_num:371
easy pred: SELECT COUNT(*) FROM "SINGER" WHERE "IS_MALE" = TRUE
easy gold: SELECT COUNT ( * )  FROM SINGER WHERE IS_MALE  =  "TRUE"

extra pred: SELECT MODEL FROM MODEL_LIST WHERE MAKER = ( SELECT ID FROM CAR_MAKERS WHERE MAKER = 'GENERAL MOTORS' )
extra gold: SELECT DISTINCT T2.MODEL FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.MODEL   =   T2.MODEL JOIN CAR_MAKERS AS T3 ON T2.MAKER   =   T3.ID JOIN CARS_DATA AS T4 ON T1.MAKEID   =   T4.ID WHERE T3.FULLNAME   =   'GENERAL MOTORS'

eval_err_num:372
extra pred: SELECT MODEL FROM MODEL_LIST WHERE MODELID IN ( SELECT MAKEID FROM CARS_DATA WHERE WEIGHT > 3500 ) AND MAKER = ( SELECT ID FROM CAR_MAKERS WHERE MAKER = 'GENERAL MOTORS' )
extra gold: SELECT DISTINCT T2.MODEL FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.MODEL   =   T2.MODEL JOIN CAR_MAKERS AS T3 ON T2.MAKER   =   T3.ID JOIN CARS_DATA AS T4 ON T1.MAKEID   =   T4.ID WHERE T4.WEIGHT  >  3500

extra pred: SELECT MAKE, MODEL FROM CAR_NAMES WHERE MAKEID = ( SELECT ID FROM CARS_DATA ORDER BY HORSEPOWER DESC LIMIT 1 )
extra gold: SELECT DISTINCT T2.MODEL, T3.MAKER FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.MODEL   =   T2.MODEL JOIN CAR_MAKERS AS T3 ON T2.MAKER   =   T3.ID JOIN CARS_DATA AS T4 ON T1.MAKEID   =   T4.ID WHERE T3.FULLNAME   =   'GENERAL MOTORS' ORDER BY T4.HORSEPOWER DESC LIMIT 1

eval_err_num:373
extra pred: SELECT COUNT(*) FROM CAR_NAMES INNER JOIN CARS_DATA ON CAR_NAMES.MAKEID = CARS_DATA.ID WHERE MAKER = ( SELECT ID FROM CAR_MAKERS WHERE MAKER = 'GENERAL MOTORS' ) AND MPG > 15
extra gold: SELECT COUNT ( * )  FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.MODEL   =   T2.MODEL JOIN CAR_MAKERS AS T3 ON T2.MAKER   =   T3.ID JOIN CARS_DATA AS T4 ON T1.MAKEID   =   T4.ID WHERE T3.FULLNAME   =   'GENERAL MOTORS' AND T4.MPG > 15

eval_err_num:374
extra pred: SELECT MAKE, MODEL FROM CAR_NAMES WHERE MAKEID = ( SELECT ID FROM CARS_DATA WHERE MPG = ( SELECT MAX(MPG) FROM CARS_DATA INNER JOIN MODEL_LIST ON CARS_DATA.ID = MODEL_LIST.MODELID WHERE MAKER = ( SELECT ID FROM CAR_MAKERS WHERE MAKER = 'GENERAL MOTORS' ) ) )
extra gold: SELECT DISTINCT T1.MAKE, T1.MODEL FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.MODEL   =   T2.MODEL JOIN CAR_MAKERS AS T3 ON T2.MAKER   =   T3.ID JOIN CARS_DATA AS T4 ON T1.MAKEID   =   T4.ID WHERE T3.FULLNAME   =   'GENERAL MOTORS' ORDER BY T4.MPG DESC LIMIT 1

medium pred: SELECT MAX(GRADE) FROM HIGHSCHOOLER
medium gold: SELECT GRADE FROM HIGHSCHOOLER ORDER BY GRADE DESC LIMIT 1

medium pred: SELECT MIN(GRADE) FROM HIGHSCHOOLER
medium gold: SELECT GRADE FROM HIGHSCHOOLER ORDER BY GRADE LIMIT 1

easy pred: SELECT COUNTRYNAME FROM COUNTRIES WHERE COUNTRYID IN ( SELECT DISTINCT COUNTRY FROM CAR_MAKERS )
easy gold: SELECT T1.COUNTRYNAME FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.COUNTRYID   =   T2.COUNTRY

hard pred: SELECT COUNTRYNAME FROM COUNTRIES WHERE COUNTRYID NOT IN ( SELECT DISTINCT COUNTRY FROM CAR_MAKERS )
hard gold: SELECT COUNTRYNAME FROM COUNTRIES EXCEPT SELECT T1.COUNTRYNAME FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.COUNTRYID   =   T2.COUNTRY

eval_err_num:375
easy pred: SELECT COUNT(ID) AS TOTAL_STUDENTS FROM HIGHSCHOOLER
easy gold: SELECT COUNT ( ID )  FROM HIGHSCHOOLER

eval_err_num:376
easy pred: SELECT COUNT(*) AS TOTAL_FRIENDS FROM FRIEND
easy gold: SELECT COUNT ( DISTINCT FRIEND_ID )  FROM FRIEND

hard pred: SELECT ID FROM HIGHSCHOOLER WHERE ID NOT IN (SELECT DISTINCT STUDENT_ID FROM FRIEND)
hard gold: SELECT ID FROM HIGHSCHOOLER EXCEPT SELECT FRIEND_ID FROM FRIEND

easy pred: SELECT DISTINCT CITY FROM EMPLOYEE UNION SELECT DISTINCT LOCATION FROM SHOP
easy gold: SELECT CITY FROM EMPLOYEE

medium pred: SELECT COUNT(DISTINCT STUID) FROM HAS_PET
medium gold: SELECT COUNT ( * )  FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID   =   T2.STUID WHERE T1.AGE  >  20

easy pred: SELECT LOSER_NAME FROM MATCHES WHERE LOSER_RANK_POINTS > 3500
easy gold: SELECT DISTINCT LOSER_ID FROM MATCHES WHERE LOSER_RANK_POINTS > 3500

eval_err_num:377
hard pred: SELECT WINNER_NAME, SUM(WINNER_RANK_POINTS) AS TOTAL_RANK_POINTS FROM MATCHES GROUP BY WINNER_NAME ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT WINNER_NAME , WINNER_RANK_POINTS FROM MATCHES GROUP BY WINNER_NAME ORDER BY COUNT ( * )  DESC LIMIT 1

eval_err_num:378
hard pred: SELECT STUDENT_ID, MAX(COUNT_LIKES) AS MAX_LIKES FROM (SELECT STUDENT_ID, COUNT(*) AS COUNT_LIKES FROM LIKES GROUP BY STUDENT_ID) AS LIKES_COUNT GROUP BY STUDENT_ID
hard gold: SELECT COUNT ( * )  FROM  LIKES  GROUP BY STUDENT_ID ORDER BY  COUNT ( * )  DESC LIMIT  1

eval_err_num:379
extra pred: SELECT NAME FROM HIGHSCHOOLER WHERE ID = (SELECT STUDENT_ID FROM (SELECT STUDENT_ID, COUNT(*) AS COUNT_LIKES FROM LIKES GROUP BY STUDENT_ID) AS LIKES_COUNT WHERE COUNT_LIKES=(SELECT MAX(COUNT_LIKES) FROM (SELECT STUDENT_ID, COUNT(*) AS COUNT_LIKES FROM LIKES GROUP BY STUDENT_ID) AS LIKES_COUNT))
extra gold: SELECT T2.NAME FROM LIKES AS T1 JOIN HIGHSCHOOLER AS T2 ON T1.STUDENT_ID  =  T2.ID GROUP BY T1.STUDENT_ID ORDER BY COUNT ( * )  DESC LIMIT 1

medium pred: SELECT FEATURE_TYPE_NAME FROM REF_FEATURE_TYPES WHERE FEATURE_TYPE_CODE = ( SELECT FEATURE_TYPE_CODE FROM OTHER_AVAILABLE_FEATURES WHERE FEATURE_NAME = 'AIRCON' )
medium gold: SELECT T2.FEATURE_TYPE_NAME FROM OTHER_AVAILABLE_FEATURES AS T1 JOIN REF_FEATURE_TYPES AS T2 ON T1.FEATURE_TYPE_CODE   =   T2.FEATURE_TYPE_CODE WHERE T1.FEATURE_NAME   =   "AIRCON"

eval_err_num:380
easy pred: SELECT COUNT(DISTINCT FEATURE_ID) AS 'NUMBER_OF_FEATURES' FROM OTHER_AVAILABLE_FEATURES
easy gold: SELECT COUNT ( * )  FROM  ( SELECT DISTINCT FEATURE_ID FROM OTHER_AVAILABLE_FEATURES  ) 

medium pred: SELECT DESTAIRPORT FROM FLIGHTS WHERE AIRLINE = (SELECT UID FROM AIRLINES WHERE AIRLINE = 'UNITED AIRLINES')
medium gold: SELECT T2.DESTAIRPORT FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.UID  =  T2.AIRLINE WHERE T1.AIRLINE  =  "UNITED AIRLINES"

hard pred: SELECT COUNT(DISTINCT AIRLINE) FROM FLIGHTS WHERE SOURCEAIRPORT = 'APG'
hard gold: SELECT COUNT ( T1.AIRLINE )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.UID  =  T2.AIRLINE WHERE T2.SOURCEAIRPORT LIKE "%APG%"

medium pred: SELECT FLIGHTNO FROM FLIGHTS WHERE AIRLINE = (SELECT UID FROM AIRLINES WHERE AIRLINE = 'DELTA AIRLINES')
medium gold: SELECT T2.FLIGHTNO FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.UID  =  T2.AIRLINE WHERE T1.AIRLINE  =  "DELTA AIRLINES"

eval_err_num:381
hard pred: SELECT COUNT(DISTINCT MODEL) FROM CAR_NAMES INNER JOIN MODEL_LIST ON CAR_NAMES.MODEL = MODEL_LIST.MODEL INNER JOIN CAR_MAKERS ON MODEL_LIST.MAKER = CAR_MAKERS.ID INNER JOIN COUNTRIES ON CAR_MAKERS.COUNTRY = COUNTRIES.COUNTRYID WHERE COUNTRIES.COUNTRYNAME = 'USA'
hard gold: SELECT COUNT ( * )  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.MAKER   =   T2.ID JOIN COUNTRIES AS T3 ON T2.COUNTRY   =   T3.COUNTRYID WHERE T3.COUNTRYNAME   =   'USA'

eval_err_num:382
medium pred: SELECT DISTINCT MAKER FROM CAR_MAKERS INNER JOIN MODEL_LIST ON CAR_MAKERS.ID = MODEL_LIST.MAKER INNER JOIN CAR_NAMES ON MODEL_LIST.MODELID = CAR_NAMES.MODEL INNER JOIN COUNTRIES ON CAR_MAKERS.COUNTRY = COUNTRIES.COUNTRYID WHERE COUNTRIES.COUNTRYNAME = 'USA'
medium gold: SELECT DISTINCT T1.MAKER FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.COUNTRY   =   T2.COUNTRYID WHERE T2.COUNTRYNAME   =   'USA'

eval_err_num:383
medium pred: SELECT COUNT(DISTINCT MODEL) FROM MODEL_LIST INNER JOIN CAR_MAKERS ON MODEL_LIST.MAKER = CAR_MAKERS.ID WHERE CAR_MAKERS.MAKER = 'FORD'
medium gold: SELECT COUNT (  * )  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 WHERE T1.MAKER  =  T2.ID AND T2.MAKER  =  "FORD"

eval_err_num:384
medium pred: SELECT H.NAME FROM HIGHSCHOOLER H WHERE H.ID IN ( SELECT L.STUDENT_ID FROM LIKES L GROUP BY L.STUDENT_ID HAVING COUNT(*)>=2 )
medium gold: SELECT T2.NAME FROM LIKES AS T1 JOIN HIGHSCHOOLER AS T2 ON T1.STUDENT_ID   =   T2.ID GROUP BY T1.STUDENT_ID HAVING COUNT ( * )    >=    2

eval_err_num:385
medium pred: SELECT H.NAME FROM HIGHSCHOOLER H WHERE H.ID IN ( SELECT L.STUDENT_ID FROM LIKES L GROUP BY L.STUDENT_ID HAVING COUNT(*)>=1 )
medium gold: SELECT T2.NAME FROM LIKES AS T1 JOIN HIGHSCHOOLER AS T2 ON T1.STUDENT_ID   =   T2.ID GROUP BY T1.STUDENT_ID HAVING COUNT ( * )    >=    1

eval_err_num:386
medium pred: SELECT H.ID FROM HIGHSCHOOLER H WHERE H.ID IN ( SELECT L.STUDENT_ID FROM LIKES L GROUP BY L.STUDENT_ID HAVING COUNT(*)>=2 )
medium gold: SELECT T2.ID FROM LIKES AS T1 JOIN HIGHSCHOOLER AS T2 ON T1.STUDENT_ID   =   T2.ID GROUP BY T1.STUDENT_ID HAVING COUNT ( * )    >=    1

eval_err_num:387
easy pred: I CANNOT PROVIDE A SOLUTION TO THE FIRST QUESTION AS "ASY" IS NOT DEFINED IN THE GIVEN TABLE STRUCTURES. TO ANSWER THE SECOND QUESTION, "ASY" IS NOT DEFINED IN THE GIVEN TABLE STRUCTURES, THEREFORE, I CANNOT PROVIDE A SOLUTION FOR THE DEST AIRPORT OF "ASY".
easy gold: SELECT SOURCEAIRPORT FROM FLIGHTS WHERE DESTAIRPORT   =   "ASY"

eval_err_num:388
easy pred: SELECT AVG(GRADE) AS AVG_GRADE FROM HIGHSCHOOLER
easy gold: SELECT AVG ( GRADE )  FROM HIGHSCHOOLER

easy pred: SELECT NAME FROM HIGHSCHOOLER WHERE NAME LIKE 'A%'
easy gold: SELECT AVG ( GRADE )  FROM HIGHSCHOOLER

eval_err_num:389
easy pred: SELECT MAX(GRADE) AS BEST_GRADE FROM HIGHSCHOOLER
easy gold: SELECT MAX ( GRADE )  FROM HIGHSCHOOLER

eval_err_num:390
medium pred: SELECT P."NAME" FROM "POKER_PLAYER" PP JOIN "PEOPLE" P ON PP."PEOPLE_ID" = P."PEOPLE_ID" ORDER BY PP."FINAL_TABLE_MADE" ASC
medium gold: SELECT T1.NAME FROM PEOPLE AS T1 JOIN POKER_PLAYER AS T2 ON T1.PEOPLE_ID   =   T2.PEOPLE_ID ORDER BY T2.FINAL_TABLE_MADE

eval_err_num:391
medium pred: SELECT P."NATIONALITY" FROM "POKER_PLAYER" PP JOIN "PEOPLE" P ON PP."PEOPLE_ID" = P."PEOPLE_ID" ORDER BY PP."FINAL_TABLE_MADE" ASC
medium gold: SELECT T1.NATIONALITY FROM PEOPLE AS T1 JOIN POKER_PLAYER AS T2 ON T1.PEOPLE_ID   =   T2.PEOPLE_ID ORDER BY T2.FINAL_TABLE_MADE

eval_err_num:392
hard pred: SELECT P."NAME" FROM "POKER_PLAYER" PP JOIN "PEOPLE" P ON PP."PEOPLE_ID" = P."PEOPLE_ID" ORDER BY PP."EARNINGS" DESC LIMIT 1
hard gold: SELECT T1.NAME FROM PEOPLE AS T1 JOIN POKER_PLAYER AS T2 ON T1.PEOPLE_ID   =   T2.PEOPLE_ID ORDER BY T2.EARNINGS DESC LIMIT 1

eval_err_num:393
hard pred: SELECT P."NAME" FROM "POKER_PLAYER" PP JOIN "PEOPLE" P ON PP."PEOPLE_ID" = P."PEOPLE_ID" WHERE PP."EARNINGS" IS NOT NULL ORDER BY PP."EARNINGS" ASC LIMIT 1
hard gold: SELECT T1.NAME FROM PEOPLE AS T1 JOIN POKER_PLAYER AS T2 ON T1.PEOPLE_ID   =   T2.PEOPLE_ID ORDER BY T2.EARNINGS LIMIT 1

eval_err_num:394
hard pred: SELECT PP."BEST_FINISH" FROM "POKER_PLAYER" PP JOIN "PEOPLE" P ON PP."PEOPLE_ID" = P."PEOPLE_ID" WHERE PP."EARNINGS" IS NOT NULL ORDER BY PP."EARNINGS" ASC LIMIT 1
hard gold: SELECT T2.BEST_FINISH FROM PEOPLE AS T1 JOIN POKER_PLAYER AS T2 ON T1.PEOPLE_ID   =   T2.PEOPLE_ID ORDER BY T2.EARNINGS  LIMIT 1

eval_err_num:395
medium pred: SELECT MAX(TRANSCRIPT_DATE) AS LATEST_RELEASE_DATE FROM TRANSCRIPTS
medium gold: SELECT TRANSCRIPT_DATE FROM TRANSCRIPTS ORDER BY TRANSCRIPT_DATE DESC LIMIT 1

medium pred: SELECT TITLE, ORIGINAL_AIR_DATE FROM CARTOON ORDER BY ORIGINAL_AIR_DATE DESC LIMIT 1
medium gold: SELECT TITLE FROM CARTOON ORDER BY ORIGINAL_AIR_DATE LIMIT 1

medium pred: SELECT TV_CHANNEL.SERIES_NAME FROM TV_CHANNEL JOIN CARTOON ON TV_CHANNEL.ID = CARTOON.CHANNEL ORDER BY CARTOON.ORIGINAL_AIR_DATE DESC LIMIT 1
medium gold: SELECT CHANNEL FROM CARTOON ORDER BY ORIGINAL_AIR_DATE LIMIT 1

medium pred: SELECT CARTOON.PRODUCTION_CODE, TV_CHANNEL.SERIES_NAME FROM CARTOON JOIN TV_CHANNEL ON CARTOON.CHANNEL = TV_CHANNEL.ID ORDER BY CARTOON.ORIGINAL_AIR_DATE DESC LIMIT 1
medium gold: SELECT PRODUCTION_CODE ,  CHANNEL, ORIGINAL_AIR_DATE FROM CARTOON ORDER BY ORIGINAL_AIR_DATE DESC LIMIT 1

medium pred: SELECT DOCUMENT_NAME FROM DOCUMENTS WHERE TEMPLATE_ID = 25
medium gold: SELECT T2.DOCUMENT_NAME FROM TEMPLATES AS T1 JOIN DOCUMENTS AS T2 ON T1.TEMPLATE_ID  =  T2.TEMPLATE_ID WHERE T1.TEMPLATE_ID  =  25

eval_err_num:396
hard pred: SELECT REF_TEMPLATE_TYPES.TEMPLATE_TYPE_CODE FROM REF_TEMPLATE_TYPES LEFT JOIN TEMPLATES ON REF_TEMPLATE_TYPES.TEMPLATE_TYPE_CODE = TEMPLATES.TEMPLATE_TYPE_CODE WHERE TEMPLATES.TEMPLATE_TYPE_CODE IS NULL
hard gold: SELECT TEMPLATE_TYPE_CODE FROM TEMPLATES EXCEPT SELECT TEMPLATE_TYPE_CODE FROM TEMPLATES AS T1 JOIN DOCUMENTS AS T2 ON T1.TEMPLATE_ID  =  T2.TEMPLATE_ID

eval_err_num:397
medium pred: SELECT DISTINCT AIRLINE FROM FLIGHTS INNER JOIN AIRLINES ON FLIGHTS.AIRLINE = AIRLINES.UID WHERE SOURCEAIRPORT = 'AHD'
medium gold: SELECT T1.AIRLINE FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.UID   =   T2.AIRLINE WHERE T2.SOURCEAIRPORT   =   " AHD"

medium pred: SELECT NAME FROM STADIUM WHERE AVERAGE = (SELECT MIN(AVERAGE) FROM STADIUM)
medium gold: SELECT NAME FROM STADIUM ORDER BY AVERAGE LIMIT 1

medium pred: SELECT NAME FROM STADIUM WHERE AVERAGE = (SELECT MAX(AVERAGE) FROM STADIUM)
medium gold: SELECT NAME FROM STADIUM ORDER BY AVERAGE DESC LIMIT 1

eval_err_num:398
extra pred: SELECT C.NAME AS AFRICANCOUNTRIES FROM COUNTRY C WHERE C.CONTINENT = 'AFRICA' AND C.POPULATION < (SELECT MIN(POPULATION) FROM COUNTRY WHERE CONTINENT = 'ASIA')
extra gold: SELECT NAME FROM COUNTRY WHERE CONTINENT   =   "AFRICA"  AND POPULATION  <   ( SELECT MIN ( POPULATION )  FROM COUNTRY WHERE CONTINENT   =   "ASIA" ) 

eval_err_num:399
extra pred: SELECT C.NAME AS ASIANCOUNTRIES FROM COUNTRY C WHERE C.CONTINENT = 'ASIA' AND C.POPULATION < (SELECT MIN(POPULATION) FROM COUNTRY WHERE CONTINENT = 'AFRICA')
extra gold: SELECT NAME FROM COUNTRY WHERE CONTINENT   =   "ASIA"  AND POPULATION  <   ( SELECT MIN ( POPULATION )  FROM COUNTRY WHERE CONTINENT   =   "AFRICA" ) 

eval_err_num:400
hard pred: SELECT C.NAME AS COUNTRY, C.LIFEEXPECTANCY FROM COUNTRY C WHERE C.CONTINENT = 'ASIA' ORDER BY C.LIFEEXPECTANCY DESC LIMIT 1
hard gold: SELECT NAME FROM COUNTRY WHERE CONTINENT  =  "ASIA" ORDER BY LIFEEXPECTANCY DESC LIMIT 1

eval_err_num:401
extra pred: SELECT COUNT(*) AS NUM_DOGS_WITHOUT_TREATMENTS FROM DOGS D LEFT JOIN TREATMENTS T ON D.DOG_ID = T.DOG_ID WHERE T.TREATMENT_ID IS NULL
extra gold: SELECT COUNT ( * )  FROM DOGS WHERE DOG_ID NOT IN  (  SELECT DOG_ID FROM TREATMENTS  ) 

eval_err_num:402
extra pred: SELECT COUNT(*) AS NUM_ABANDONED_DOGS_WITHOUT_TREATMENTS FROM DOGS D LEFT JOIN TREATMENTS T ON D.DOG_ID = T.DOG_ID WHERE T.TREATMENT_ID IS NULL AND D.ABANDONED_YN = 'Y'
extra gold: SELECT COUNT ( * )  FROM DOGS WHERE ABANDONED_YN  =  1 AND DOG_ID NOT IN  (  SELECT DOG_ID FROM TREATMENTS  ) 

eval_err_num:403
medium pred: SELECT D.DOG_ID, T.TREATMENT_TYPE_CODE FROM DOGS D LEFT JOIN TREATMENTS T ON D.DOG_ID = T.DOG_ID WHERE D.ABANDONED_YN = 'Y'
medium gold: SELECT T1.DOG_ID, T2.TREATMENT_TYPE_CODE FROM DOGS AS T1 JOIN TREATMENTS AS T2 ON T1.DOG_ID  =  T2.DOG_ID WHERE ABANDONED_YN  =  1

eval_err_num:404
easy pred: SINCE THE TABLE STRUCTURE DOES NOT CONTAIN INFORMATION ABOUT INDIVIDUALS, WE CANNOT ANSWER THIS QUESTION. THE "EMPLOYEE" TABLE ONLY CONTAINS COLUMNS FOR "EMPLOYEE_ID", "NAME", "AGE", AND "CITY". HOWEVER, WE DO NOT HAVE ANY ROWS OF DATA IN THE TABLE YET.
easy gold: SELECT AGE FROM EMPLOYEE WHERE NAME  =  "GEORGE CHUTER"

eval_err_num:405
easy pred: SINCE THE TABLE STRUCTURE DOES NOT CONTAIN ANY DATA, WE CANNOT ANSWER THESE QUESTIONS. THE "EMPLOYEE" TABLE CONTAINS COLUMNS FOR "EMPLOYEE_ID", "NAME", "AGE", AND "CITY", BUT WE HAVE NOT INSERTED ANY DATA INTO THE TABLE YET. THE "EVALUATION" TABLE CONTAINS COLUMNS FOR "EMPLOYEE_ID", "YEAR_AWARDED", AND "BONUS", BUT WE ALSO HAVE NOT INSERTED ANY DATA INTO THIS TABLE YET. THEREFORE, WE CANNOT ANSWER EITHER OF THESE QUESTIONS.
easy gold: SELECT CITY FROM EMPLOYEE WHERE NAME  =  "LEE MEARS"

extra pred: SELECT DEGREE_PROGRAM_ID, DEGREE_SUMMARY_NAME FROM DEGREE_PROGRAMS WHERE DEGREE_PROGRAM_ID = ( SELECT DEGREE_PROGRAM_ID FROM STUDENT_ENROLMENT GROUP BY DEGREE_PROGRAM_ID ORDER BY COUNT(STUDENT_ID) DESC LIMIT 1 )
extra gold: SELECT T1.DEGREE_PROGRAM_ID ,  T1.DEGREE_SUMMARY_NAME FROM DEGREE_PROGRAMS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.DEGREE_PROGRAM_ID   =   T2.DEGREE_PROGRAM_ID GROUP BY T1.DEGREE_PROGRAM_ID ORDER BY COUNT ( * )  DESC LIMIT 1

eval_err_num:406
extra pred: SELECT COURSE_ID, COUNT(STUDENT_ENROLMENT_ID) AS NUM_STUDENTS FROM STUDENT_ENROLMENT_COURSES WHERE STUDENT_ENROLMENT_ID IN ( SELECT STUDENT_ENROLMENT_ID FROM STUDENT_ENROLMENT WHERE DEGREE_PROGRAM_ID = 9 ) GROUP BY COURSE_ID ORDER BY NUM_STUDENTS DESC LIMIT 1
extra gold: SELECT T1.DEGREE_PROGRAM_ID  FROM DEGREE_PROGRAMS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.DEGREE_PROGRAM_ID   =   T2.DEGREE_PROGRAM_ID GROUP BY T1.DEGREE_PROGRAM_ID ORDER BY COUNT ( * )  DESC LIMIT 1

eval_err_num:407
easy pred: SELECT COUNT(STUDENT_ID) AS NUM_STUDENTS FROM STUDENT_ENROLMENT WHERE DEGREE_PROGRAM_ID = 9
easy gold: SELECT COUNT ( * )  FROM STUDENT_ENROLMENT WHERE DEGREE_PROGRAM_ID  =  "9"

eval_err_num:408
medium pred: BASED ON THE TABLE STRUCTURES PROVIDED, THERE'S NO COLUMN THAT SPECIFIES WHETHER A STUDENT IN `STUDENT_ENROLMENT` IS PURSUING A MASTER'S DEGREE OR NOT. THEREFORE, I'M AFRAID I CANNOT ANSWER YOUR QUESTION WITH THE GIVEN DATABASE SCHEMA.
medium gold: SELECT COUNT ( * )  FROM DEGREE_PROGRAMS WHERE DEGREE_SUMMARY_NAME  =  "MASTER" AND DEGREE_PROGRAM_ID  =  "9"

eval_err_num:409
extra pred: SELECT DEGREE_PROGRAM_ID, DEGREE_SUMMARY_NAME, COUNT(STUDENT_ID) AS NUM_STUDENTS FROM STUDENT_ENROLMENT JOIN DEGREE_PROGRAMS ON STUDENT_ENROLMENT.DEGREE_PROGRAM_ID = DEGREE_PROGRAMS.DEGREE_PROGRAM_ID GROUP BY STUDENT_ENROLMENT.DEGREE_PROGRAM_ID ORDER BY NUM_STUDENTS ASC LIMIT 1
extra gold: SELECT T1.DEGREE_PROGRAM_ID ,  T1.DEGREE_SUMMARY_NAME FROM DEGREE_PROGRAMS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.DEGREE_PROGRAM_ID   =   T2.DEGREE_PROGRAM_ID GROUP BY T1.DEGREE_PROGRAM_ID ORDER BY COUNT ( * )  LIMIT 1

eval_err_num:410
easy pred: SELECT COUNT(STUDENT_ID) AS NUM_STUDENTS FROM STUDENT_ENROLMENT WHERE DEGREE_PROGRAM_ID = 3
easy gold: SELECT COUNT ( * )  FROM STUDENT_ENROLMENT WHERE DEGREE_PROGRAM_ID  =  "3"

eval_err_num:411
easy pred: SELECT SUM(COST_OF_TREATMENT) AS TOTAL_COST_OF_TREATMENT FROM TREATMENTS
easy gold: SELECT SUM ( COST_OF_TREATMENT )  FROM TREATMENTS

eval_err_num:412
hard pred: SELECT PROFESSIONALS.FIRST_NAME, PROFESSIONALS.LAST_NAME, MIN(TREATMENTS.COST_OF_TREATMENT) AS LOWEST_COST_OF_TREATMENT FROM TREATMENTS JOIN PROFESSIONALS ON TREATMENTS.PROFESSIONAL_ID = PROFESSIONALS.PROFESSIONAL_ID GROUP BY PROFESSIONALS.FIRST_NAME, PROFESSIONALS.LAST_NAME
hard gold: SELECT T1.FIRST_NAME, T1.LAST_NAME FROM PROFESSIONALS AS T1 JOIN TREATMENTS AS T2 ON T1.PROFESSIONAL_ID  =  T2.PROFESSIONAL_ID ORDER BY T2.COST_OF_TREATMENT ASC LIMIT 1

eval_err_num:413
medium pred: SELECT TREATMENTS.DOG_ID, MIN(TREATMENTS.COST_OF_TREATMENT) AS LOWEST_COST_OF_TREATMENT FROM TREATMENTS GROUP BY TREATMENTS.DOG_ID
medium gold: SELECT DOG_ID FROM TREATMENTS ORDER BY COST_OF_TREATMENT ASC LIMIT 1

medium pred: SELECT CONTID FROM CONTINENTS
medium gold: SELECT CONTID ,  CONTINENT  FROM CONTINENTS

eval_err_num:414
medium pred: SELECT CONTINENTS.CONTINENT, COUNT(COUNTRIES.COUNTRYID) AS NUMBEROFCOUNTRIES FROM CONTINENTS LEFT JOIN COUNTRIES ON CONTINENTS.CONTID = COUNTRIES.CONTINENT GROUP BY CONTINENTS.CONTINENT
medium gold: SELECT T1.CONTINENT ,  COUNT ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.CONTID   =   T2.CONTINENT GROUP BY T1.CONTID

eval_err_num:415
extra pred: SELECT CONTINENTS.CONTINENT, COUNT(COUNTRIES.COUNTRYID) AS NUMBEROFCOUNTRIES FROM CONTINENTS LEFT JOIN COUNTRIES ON CONTINENTS.CONTID = COUNTRIES.CONTINENT GROUP BY CONTINENTS.CONTINENT ORDER BY NUMBEROFCOUNTRIES DESC LIMIT 1
extra gold: SELECT T1.CONTINENT ,  COUNT ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.CONTID   =   T2.CONTINENT GROUP BY T1.CONTID ORDER BY COUNT ( * )  DESC LIMIT 1

eval_err_num:416
medium pred: SELECT D.DOCUMENT_ID, D.DOCUMENT_NAME, COUNT(P.PARAGRAPH_ID) AS NUM_PARAGRAPHS FROM DOCUMENTS D LEFT JOIN PARAGRAPHS P ON D.DOCUMENT_ID = P.DOCUMENT_ID GROUP BY D.DOCUMENT_ID, D.DOCUMENT_NAME
medium gold: SELECT T1.DOCUMENT_ID ,  T2.DOCUMENT_NAME ,  COUNT ( * )  FROM PARAGRAPHS AS T1 JOIN DOCUMENTS AS T2 ON T1.DOCUMENT_ID   =   T2.DOCUMENT_ID GROUP BY T1.DOCUMENT_ID

eval_err_num:417
easy pred: SELECT PARAGRAPH_TEXT FROM PARAGRAPHS WHERE OTHER_DETAILS IS NOT NULL
easy gold: SELECT PARAGRAPH_TEXT FROM PARAGRAPHS WHERE OTHER_DETAILS !=  "NULL"

eval_err_num:418
easy pred: SELECT "TITLE" FROM "CARTOON" WHERE "WRITTEN_BY" = 'TODD CASEY'
easy gold: SELECT * FROM CARTOON WHERE WRITTEN_BY  =  'TODD CASEY'

eval_err_num:419
easy pred: SELECT "TITLE" FROM "CARTOON" WHERE "WRITTEN_BY" = 'TODD CASEY' AND "CHANNEL" LIKE '%CARTOON%'
easy gold: SELECT TITLE FROM CARTOON WHERE WRITTEN_BY  =  'TODD CASEY'

eval_err_num:420
medium pred: SELECT "CARTOON"."TITLE", "TV_CHANNEL"."SERIES_NAME" FROM "CARTOON" INNER JOIN "TV_CHANNEL" ON "CARTOON"."CHANNEL" = "TV_CHANNEL"."ID" WHERE "CARTOON"."WRITTEN_BY" = 'TODD CASEY' AND "TV_CHANNEL"."CONTENT" = 'CARTOON'
medium gold: SELECT T1.ID FROM TV_CHANNEL AS T1 JOIN CARTOON AS T2 ON T1.ID  =  T2.CHANNEL WHERE T2.WRITTEN_BY  =  'TODD CASEY'

eval_err_num:421
medium pred: SELECT SUM(TOTAL_SPENT) FROM VISIT INNER JOIN VISITOR ON VISIT.VISITOR_ID = VISITOR.ID WHERE VISITOR.LEVEL_OF_MEMBERSHIP = 1
medium gold: SELECT SUM ( T2.TOTAL_SPENT )  FROM VISITOR AS T1 JOIN VISIT AS T2 ON T1.ID   =   T2.VISITOR_ID WHERE T1.LEVEL_OF_MEMBERSHIP   =   1

easy pred: SELECT COUNT(*) FROM VISITOR WHERE LEVEL_OF_MEMBERSHIP = 1
easy gold: SELECT COUNT ( ID )  FROM VISITOR WHERE LEVEL_OF_MEMBERSHIP  =  1

eval_err_num:422
medium pred: SELECT VISITOR.LEVEL_OF_MEMBERSHIP, SUM(TOTAL_SPENT) FROM VISIT INNER JOIN VISITOR ON VISIT.VISITOR_ID = VISITOR.ID GROUP BY VISITOR.LEVEL_OF_MEMBERSHIP
medium gold: SELECT  T1.LEVEL_OF_MEMBERSHIP, SUM ( TOTAL_SPENT )  FROM VISITOR AS T1 JOIN VISIT AS T2 ON T1.ID   =   T2.VISITOR_ID GROUP BY LEVEL_OF_MEMBERSHIP

easy pred: SELECT LAST_NAME FROM PLAYERS WHERE PLAYER_ID = 200003 AND FIRST_NAME = 'JUSTINE'
easy gold: SELECT LAST_NAME FROM PLAYERS WHERE PLAYER_ID  =  200003

eval_err_num:423
medium pred: SELECT COUNT(PARAGRAPH_ID) FROM PARAGRAPHS INNER JOIN DOCUMENTS ON PARAGRAPHS.DOCUMENT_ID = DOCUMENTS.DOCUMENT_ID WHERE DOCUMENTS.DOCUMENT_NAME = 'WELCOME TO NY'
medium gold: SELECT COUNT ( * )  FROM PARAGRAPHS AS T1 JOIN DOCUMENTS AS T2 ON T1.DOCUMENT_ID   =   T2.DOCUMENT_ID WHERE T2.DOCUMENT_NAME   =   'WELCOME TO NY'

eval_err_num:424
medium pred: SELECT PARAGRAPH_TEXT FROM PARAGRAPHS INNER JOIN DOCUMENTS ON PARAGRAPHS.DOCUMENT_ID = DOCUMENTS.DOCUMENT_ID WHERE DOCUMENTS.DOCUMENT_NAME = 'WELCOME TO NY'
medium gold: SELECT T1.PARAGRAPH_TEXT FROM PARAGRAPHS AS T1 JOIN DOCUMENTS AS T2 ON T1.DOCUMENT_ID   =   T2.DOCUMENT_ID WHERE T2.DOCUMENT_NAME   =   'WELCOME TO NY'

eval_err_num:425
medium pred: SELECT PARAGRAPH_ID FROM PARAGRAPHS INNER JOIN DOCUMENTS ON PARAGRAPHS.DOCUMENT_ID = DOCUMENTS.DOCUMENT_ID WHERE DOCUMENTS.DOCUMENT_NAME = 'WELCOME TO NY'
medium gold: SELECT T1.PARAGRAPH_ID FROM PARAGRAPHS AS T1 JOIN DOCUMENTS AS T2 ON T1.DOCUMENT_ID   =   T2.DOCUMENT_ID WHERE T2.DOCUMENT_NAME   =   'WELCOME TO NY'

eval_err_num:426
medium pred: SELECT PLAYERS.FIRST_NAME, SUM(RANKINGS.RANKING_POINTS) AS TOTAL_POINTS FROM PLAYERS JOIN RANKINGS ON PLAYERS.PLAYER_ID = RANKINGS.PLAYER_ID GROUP BY PLAYERS.FIRST_NAME
medium gold: SELECT SUM ( RANKING_POINTS )  ,  T1.FIRST_NAME FROM PLAYERS AS T1 JOIN RANKINGS AS T2 ON T1.PLAYER_ID   =   T2.PLAYER_ID GROUP BY T1.FIRST_NAME

medium pred: SELECT PLAYERS.FIRST_NAME, RANKINGS.RANKING FROM PLAYERS JOIN RANKINGS ON PLAYERS.PLAYER_ID = RANKINGS.PLAYER_ID WHERE RANKINGS.RANKING = 1
medium gold: SELECT DISTINCT T1.FIRST_NAME FROM PLAYERS AS T1 JOIN RANKINGS AS T2 ON T1.PLAYER_ID   =   T2.PLAYER_ID WHERE T2.RANKING  =  1

hard pred: SELECT NAME, POPULATION FROM COUNTRY WHERE CONTINENT = 'AFRICA' ORDER BY POPULATION DESC LIMIT 1
hard gold: SELECT NAME FROM COUNTRY WHERE CONTINENT  =  "AFRICA" ORDER BY POPULATION DESC LIMIT 1

hard pred: SELECT NAME, POPULATION FROM COUNTRY WHERE CONTINENT = 'ASIA' ORDER BY POPULATION DESC LIMIT 1
hard gold: SELECT NAME FROM COUNTRY WHERE CONTINENT   =   "ASIA"  ORDER BY POPULATION DESC LIMIT 1

extra pred: SELECT COUNT(*) FROM COUNTRY WHERE CONTINENT = 'ASIA' AND POPULATION > (SELECT POPULATION FROM COUNTRY WHERE NAME = 'NIGERIA')
extra gold: SELECT COUNT ( NAME )  FROM COUNTRY WHERE CONTINENT   =   "ASIA"  AND POPULATION >  ( SELECT POPULATION FROM COUNTRY WHERE NAME  =  'NIGERIA' ) 

extra pred: SELECT NAME, POPULATION FROM COUNTRY WHERE CONTINENT = 'ASIA' AND POPULATION > (SELECT POPULATION FROM COUNTRY WHERE NAME = 'NIGERIA')
extra gold: SELECT NAME FROM COUNTRY WHERE CONTINENT   =   "ASIA"  AND POPULATION >  ( SELECT POPULATION FROM COUNTRY WHERE NAME  =  'NIGERIA' ) 

hard pred: SELECT DISTINCT CITY.NAME FROM CITY JOIN COUNTRY ON CITY.COUNTRYCODE = COUNTRY.CODE WHERE COUNTRY.CONTINENT = 'ASIA'
hard gold: SELECT DISTINCT T3.NAME FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE JOIN CITY AS T3 ON T1.CODE   =   T3.COUNTRYCODE WHERE T1.CONTINENT   =   "ASIA"

hard pred: SELECT DISTINCT CITY.NAME FROM CITY JOIN COUNTRY ON CITY.COUNTRYCODE = COUNTRY.CODE WHERE COUNTRY.CONTINENT = 'ASIA' AND CITY.POPULATION > 200000
hard gold: SELECT DISTINCT T3.NAME FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE JOIN CITY AS T3 ON T1.CODE   =   T3.COUNTRYCODE WHERE T3.POPULATION >200000

hard pred: SELECT AVG(POPULATION) FROM CITY WHERE COUNTRYCODE = 'CHN'
hard gold: SELECT AVG ( T3.POPULATION )  FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE JOIN CITY AS T3 ON T1.CODE   =   T3.COUNTRYCODE WHERE T1.NAME  =  "CHINA"

hard pred: SELECT AVG(CITY.POPULATION) FROM CITY JOIN COUNTRYLANGUAGE ON CITY.COUNTRYCODE = COUNTRYLANGUAGE.COUNTRYCODE WHERE COUNTRYLANGUAGE.LANGUAGE = 'DUTCH' AND COUNTRYLANGUAGE.ISOFFICIAL = 'T'
hard gold: SELECT AVG ( T3.POPULATION )  FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE JOIN CITY AS T3 ON T1.CODE   =   T3.COUNTRYCODE WHERE T2.LANGUAGE  =  "DUTCH"

medium pred: SELECT NAME, LEVEL_OF_MEMBERSHIP FROM VISITOR ORDER BY LEVEL_OF_MEMBERSHIP DESC
medium gold: SELECT NAME FROM VISITOR WHERE LEVEL_OF_MEMBERSHIP  >  4 ORDER BY LEVEL_OF_MEMBERSHIP DESC

eval_err_num:427
medium pred: SELECT PLAYERS.FIRST_NAME, AVG(RANKINGS.RANKING) AS AVG_RANKING FROM PLAYERS JOIN RANKINGS ON PLAYERS.PLAYER_ID = RANKINGS.PLAYER_ID GROUP BY PLAYERS.PLAYER_ID, PLAYERS.FIRST_NAME
medium gold: SELECT AVG ( RANKING )  ,  T1.FIRST_NAME FROM PLAYERS AS T1 JOIN RANKINGS AS T2 ON T1.PLAYER_ID   =   T2.PLAYER_ID GROUP BY T1.PLAYER_ID

eval_err_num:428
medium pred: SELECT PLAYERS.FIRST_NAME, PLAYERS.LAST_NAME, AVG(RANKINGS.RANKING) AS AVG_RANKING FROM PLAYERS JOIN RANKINGS ON PLAYERS.PLAYER_ID = RANKINGS.PLAYER_ID GROUP BY PLAYERS.PLAYER_ID, PLAYERS.FIRST_NAME, PLAYERS.LAST_NAME
medium gold: SELECT AVG ( RANKING )  ,  T1.FIRST_NAME, T1.LAST_NAME FROM PLAYERS AS T1 JOIN RANKINGS AS T2 ON T1.PLAYER_ID   =   T2.PLAYER_ID GROUP BY T1.PLAYER_ID

eval_err_num:429
medium pred: SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS FULL_NAME FROM PLAYERS WHERE HAND = 'L'
medium gold: SELECT  T1.FIRST_NAME, T1.LAST_NAME FROM PLAYERS AS T1 WHERE T1.HAND  =  "L"

eval_err_num:430
hard pred: SELECT PLAYERS.LAST_NAME, AVG(RANKINGS.RANKING) AS AVG_RANKING FROM PLAYERS JOIN RANKINGS ON PLAYERS.PLAYER_ID = RANKINGS.PLAYER_ID WHERE PLAYERS.HAND = 'L' GROUP BY PLAYERS.PLAYER_ID, PLAYERS.LAST_NAME
hard gold: SELECT AVG ( RANKING )  ,  T1.LAST_NAME FROM PLAYERS AS T1 JOIN RANKINGS AS T2 ON T1.PLAYER_ID   =   T2.PLAYER_ID WHERE T1.HAND  =  "L" GROUP BY T1.FIRST_NAME

eval_err_num:431
hard pred: SELECT AVG(H.GRADE) FROM HIGHSCHOOLER H JOIN FRIEND F ON H.ID=F.STUDENT_ID OR H.ID=F.FRIEND_ID
hard gold: SELECT AVG ( GRADE )  FROM HIGHSCHOOLER WHERE ID IN  ( SELECT T1.STUDENT_ID FROM FRIEND AS T1 JOIN HIGHSCHOOLER AS T2 ON T1.STUDENT_ID   =   T2.ID ) 

eval_err_num:432
hard pred: SELECT H.NAME FROM HIGHSCHOOLER H LEFT JOIN FRIEND F ON H.ID=F.STUDENT_ID OR H.ID=F.FRIEND_ID WHERE F.STUDENT_ID IS NULL
hard gold: SELECT * FROM HIGHSCHOOLER WHERE ID NOT IN  ( SELECT STUDENT_ID FROM FRIEND ) 

eval_err_num:433
hard pred: SELECT H.NAME, H.GRADE FROM HIGHSCHOOLER H LEFT JOIN FRIEND F ON H.ID=F.STUDENT_ID OR H.ID=F.FRIEND_ID WHERE F.STUDENT_ID IS NULL
hard gold: SELECT GRADE FROM HIGHSCHOOLER WHERE ID NOT IN  ( SELECT STUDENT_ID FROM FRIEND ) 

eval_err_num:434
hard pred: SELECT H.NAME FROM HIGHSCHOOLER H LEFT JOIN FRIEND F ON H.ID=F.STUDENT_ID OR H.ID=F.FRIEND_ID WHERE F.STUDENT_ID IS NULL
hard gold: SELECT NAME FROM HIGHSCHOOLER WHERE ID NOT IN  ( SELECT STUDENT_ID FROM FRIEND ) 

eval_err_num:435
hard pred: SELECT DISTINCT H.NAME FROM HIGHSCHOOLER H JOIN FRIEND F ON H.ID=F.STUDENT_ID OR H.ID=F.FRIEND_ID
hard gold: SELECT NAME FROM HIGHSCHOOLER WHERE ID IN  ( SELECT STUDENT_ID FROM FRIEND ) 

eval_err_num:436
easy pred: I'M SORRY, BUT I DO NOT KNOW WHICH STUDENT YOU ARE REFERRING TO. PLEASE PROVIDE MORE INFORMATION OR CONTEXT TO YOUR QUESTION.
easy gold: SELECT GRADE FROM HIGHSCHOOLER WHERE NAME  =  "KYLE"

hard pred: SELECT NAME FROM STADIUM
hard gold: SELECT NAME FROM STADIUM WHERE STADIUM_ID NOT IN  ( SELECT STADIUM_ID FROM CONCERT ) 

medium pred: SELECT NAME FROM STADIUM WHERE CAPACITY = (SELECT MAX(CAPACITY) FROM STADIUM)
medium gold: SELECT NAME FROM STADIUM ORDER BY HIGHEST DESC LIMIT 1

eval_err_num:437
hard pred: SELECT CITIZENSHIP, COUNT(*) AS NUM_SINGERS FROM SINGER GROUP BY CITIZENSHIP ORDER BY NUM_SINGERS DESC LIMIT 1
hard gold: SELECT CITIZENSHIP FROM SINGER GROUP BY CITIZENSHIP ORDER BY COUNT ( * )  DESC LIMIT 1

eval_err_num:438
hard pred: SELECT CITIZENSHIP, COUNT(*) AS NUM_SINGERS FROM SINGER GROUP BY CITIZENSHIP ORDER BY NUM_SINGERS ASC LIMIT 1
hard gold: SELECT CITIZENSHIP FROM SINGER GROUP BY CITIZENSHIP ORDER BY COUNT ( * )  ASC LIMIT 1

hard pred: SELECT MAX(EARNINGS) FROM POKER_PLAYER WHERE PEOPLE_ID = ( SELECT PEOPLE_ID FROM PEOPLE ORDER BY HEIGHT DESC LIMIT 1 )
hard gold: SELECT T2.MONEY_RANK FROM PEOPLE AS T1 JOIN POKER_PLAYER AS T2 ON T1.PEOPLE_ID   =   T2.PEOPLE_ID ORDER BY T1.HEIGHT DESC LIMIT 1

eval_err_num:439
extra pred: SELECT DEGREE_PROGRAM_ID, COUNT(STUDENT_ID) AS NUM_STUDENTS_ENROLLED FROM STUDENT_ENROLMENT GROUP BY DEGREE_PROGRAM_ID ORDER BY NUM_STUDENTS_ENROLLED ASC LIMIT 1
extra gold: SELECT T1.DEGREE_SUMMARY_NAME FROM DEGREE_PROGRAMS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.DEGREE_PROGRAM_ID   =   T2.DEGREE_PROGRAM_ID GROUP BY T1.DEGREE_SUMMARY_NAME ORDER BY COUNT ( * )  DESC LIMIT 1

easy pred: SELECT DEGREE_PROGRAM_ID FROM DEGREE_PROGRAMS WHERE DEGREE_SUMMARY_NAME = 'ARCHITECTO'
easy gold: SELECT DEGREE_PROGRAM_ID FROM DEGREE_PROGRAMS WHERE DEGREE_SUMMARY_DESCRIPTION  =  'ARCHITECTO'

eval_err_num:440
medium pred: SELECT DP.DEGREE_SUMMARY_NAME FROM DEGREE_PROGRAMS DP INNER JOIN STUDENT_ENROLMENT SE ON DP.DEGREE_PROGRAM_ID = SE.DEGREE_PROGRAM_ID INNER JOIN STUDENTS S ON SE.STUDENT_ID = S.STUDENT_ID WHERE S.FIRST_NAME = 'TIMMOTHY'
medium gold: SELECT T2.DEGREE_PROGRAM_ID FROM STUDENTS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.STUDENT_ID  =  T2.STUDENT_ID WHERE T1.FIRST_NAME  =  "TIMMOTHY"

easy pred: SELECT PET_AGE FROM PETS WHERE PETTYPE = 'DOG' LIMIT 2
easy gold: SELECT PET_AGE  FROM PETS WHERE PETTYPE = "DOG"

extra pred: SELECT WEIGHT FROM PETS WHERE PETTYPE = 'DOG' AND PET_AGE = 1 ORDER BY WEIGHT LIMIT 1
extra gold: SELECT WEIGHT  FROM PETS WHERE PETTYPE = "DOG" AND PET_AGE  =   ( SELECT MIN ( PET_AGE )  FROM PETS WHERE PETTYPE = "DOG" ) 

eval_err_num:441
medium pred: SELECT LAST_NAME FROM STUDENTS INNER JOIN ADDRESSES ON STUDENTS.CURRENT_ADDRESS_ID = ADDRESSES.ADDRESS_ID WHERE ADDRESSES.STATE_PROVINCE_COUNTY = 'NORTH CAROLINA'
medium gold: SELECT T1.LAST_NAME FROM STUDENTS AS T1 JOIN ADDRESSES AS T2 ON T1.CURRENT_ADDRESS_ID   =   T2.ADDRESS_ID WHERE T2.STATE_PROVINCE_COUNTY   =   'NORTHCAROLINA'

eval_err_num:442
medium pred: SELECT FIRST_NAME, LAST_NAME FROM STUDENTS INNER JOIN ADDRESSES ON STUDENTS.CURRENT_ADDRESS_ID = ADDRESSES.ADDRESS_ID WHERE ADDRESSES.STATE_PROVINCE_COUNTY = 'NORTH CAROLINA'
medium gold: SELECT T1.FIRST_NAME FROM STUDENTS AS T1 JOIN ADDRESSES AS T2 ON T1.CURRENT_ADDRESS_ID   =   T2.ADDRESS_ID WHERE T2.STATE_PROVINCE_COUNTY   =   'NORTHCAROLINA'

eval_err_num:443
extra pred: SELECT LAST_NAME FROM STUDENTS INNER JOIN ADDRESSES ON STUDENTS.CURRENT_ADDRESS_ID = ADDRESSES.ADDRESS_ID WHERE ADDRESSES.STATE_PROVINCE_COUNTY = 'NORTH CAROLINA' AND STUDENTS.STUDENT_ID NOT IN ( SELECT STUDENT_ID FROM STUDENT_ENROLMENT )
extra gold: SELECT T1.LAST_NAME FROM STUDENTS AS T1 JOIN ADDRESSES AS T2 ON T1.CURRENT_ADDRESS_ID   =   T2.ADDRESS_ID WHERE T2.STATE_PROVINCE_COUNTY   =   'NORTHCAROLINA' EXCEPT SELECT DISTINCT T3.LAST_NAME FROM STUDENTS AS T3 JOIN STUDENT_ENROLMENT AS T4 ON T3.STUDENT_ID   =   T4.STUDENT_ID

eval_err_num:444
extra pred: SELECT FIRST_NAME, LAST_NAME FROM STUDENTS INNER JOIN ADDRESSES ON STUDENTS.CURRENT_ADDRESS_ID = ADDRESSES.ADDRESS_ID WHERE ADDRESSES.STATE_PROVINCE_COUNTY = 'NORTH CAROLINA' AND STUDENTS.STUDENT_ID NOT IN ( SELECT STUDENT_ID FROM STUDENT_ENROLMENT )
extra gold: SELECT T1.FIRST_NAME FROM STUDENTS AS T1 JOIN ADDRESSES AS T2 ON T1.CURRENT_ADDRESS_ID   =   T2.ADDRESS_ID WHERE T2.STATE_PROVINCE_COUNTY   =   'NORTHCAROLINA' EXCEPT SELECT DISTINCT T3.LAST_NAME FROM STUDENTS AS T3 JOIN STUDENT_ENROLMENT AS T4 ON T3.STUDENT_ID   =   T4.STUDENT_ID

medium pred: SELECT WINNER_NAME, LOSER_NAME FROM MATCHES WHERE MINUTES = (SELECT MAX(MINUTES) FROM MATCHES)
medium gold: SELECT WINNER_NAME ,  LOSER_NAME FROM MATCHES ORDER BY MINUTES DESC LIMIT 1

medium pred: SELECT WINNER_NAME, LOSER_NAME, SCORE FROM MATCHES WHERE MINUTES = (SELECT MAX(MINUTES) FROM MATCHES)
medium gold: SELECT SCORE FROM MATCHES ORDER BY MINUTES DESC LIMIT 1

easy pred: SELECT MODEL FROM MODEL_LIST
easy gold: SELECT DISTINCT MODEL FROM CAR_NAMES

eval_err_num:445
hard pred: SELECT DISTINCT MODEL FROM MODEL_LIST INNER JOIN CAR_NAMES ON MODEL_LIST.MODELID = CAR_NAMES.MODEL INNER JOIN CARS_DATA ON CAR_NAMES.MAKEID = CARS_DATA.ID WHERE CARS_DATA.YEAR > 1980
hard gold: SELECT DISTINCT T1.MODEL FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.MODEL   =   T2.MODEL JOIN CARS_DATA AS T3 ON T2.MAKEID   =   T3.ID WHERE T3.YEAR  >  1980

hard pred: SELECT GRADE, COUNT(*) FROM HIGHSCHOOLER GROUP BY GRADE ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT GRADE FROM HIGHSCHOOLER GROUP BY GRADE ORDER BY COUNT ( * )  DESC LIMIT 1

medium pred: SELECT FIRST_NAME, LAST_NAME FROM OWNERS WHERE OWNER_ID = 1
medium gold: SELECT T1.FIRST_NAME , T1.LAST_NAME FROM OWNERS AS T1 JOIN DOGS AS T2 ON T1.OWNER_ID   =   T2.OWNER_ID WHERE T1.OWNER_ID   =  1

eval_err_num:446
medium pred: SELECT D.NAME FROM DOGS D INNER JOIN OWNERS O ON D.OWNER_ID = O.OWNER_ID WHERE O.STATE = 'VIRGINIA'
medium gold: SELECT T2.NAME  FROM OWNERS AS T1 JOIN DOGS AS T2 ON T1.OWNER_ID   =   T2.OWNER_ID WHERE T1.STATE   = "VIRGINIA"

extra pred: SELECT COURSE_NAME FROM COURSES WHERE COURSE_ID IN ( SELECT COURSE_ID FROM STUDENT_ENROLMENT_COURSES GROUP BY COURSE_ID ORDER BY COUNT(*) ASC LIMIT 1 )
extra gold: SELECT  T1.COURSE_NAME FROM COURSES AS T1 JOIN STUDENT_ENROLMENT_COURSES AS T2 ON T1.COURSE_ID   =   T2.COURSE_ID GROUP BY T1.COURSE_NAME ORDER BY COUNT ( * )  LIMIT 1

medium pred: SELECT COUNT(*) FROM STUDENT_ENROLMENT_COURSES WHERE COURSE_ID = 14
medium gold: SELECT  COUNT ( * )  FROM COURSES AS T1 JOIN STUDENT_ENROLMENT_COURSES AS T2 ON T1.COURSE_ID   =   T2.COURSE_ID GROUP BY T1.COURSE_NAME HAVING T1.COURSE_ID  =  14

eval_err_num:447
easy pred: SELECT COUNT(DISTINCT COUNTRYCODE) AS COUNTOFCOUNTRYCODES FROM CITY
easy gold: SELECT COUNT ( DISTINCT  LANGUAGE )  FROM COUNTRYLANGUAGE

eval_err_num:448
easy pred: SELECT MAX(PERCENTAGE) AS HIGHESTPERCENTAGE FROM COUNTRYLANGUAGE
easy gold: SELECT MAX ( PERCENTAGE )  FROM COUNTRYLANGUAGE

eval_err_num:449
hard pred: SELECT NAME FROM HIGHSCHOOLER H JOIN FRIEND F ON H.ID = F.STUDENT_ID OR H.ID = F.FRIEND_ID WHERE F.FRIEND_ID = (SELECT ID FROM HIGHSCHOOLER WHERE NAME = 'KYLE') OR F.STUDENT_ID = (SELECT ID FROM HIGHSCHOOLER WHERE NAME = 'KYLE')
hard gold: SELECT T3.NAME FROM FRIEND AS T1 JOIN HIGHSCHOOLER AS T2 ON T1.STUDENT_ID  =  T2.ID JOIN HIGHSCHOOLER AS T3 ON T1.FRIEND_ID  =  T3.ID WHERE T2.NAME  =  "KYLE"

eval_err_num:450
hard pred: SELECT NAME FROM HIGHSCHOOLER H JOIN FRIEND F ON H.ID = F.STUDENT_ID OR H.ID = F.FRIEND_ID WHERE (F.FRIEND_ID = (SELECT ID FROM HIGHSCHOOLER WHERE NAME = 'JORDAN') OR F.STUDENT_ID = (SELECT ID FROM HIGHSCHOOLER WHERE NAME = 'JORDAN')) AND H.ID != (SELECT ID FROM HIGHSCHOOLER WHERE NAME = 'JORDAN')
hard gold: SELECT T3.NAME FROM FRIEND AS T1 JOIN HIGHSCHOOLER AS T2 ON T1.STUDENT_ID  =  T2.ID JOIN HIGHSCHOOLER AS T3 ON T1.FRIEND_ID  =  T3.ID WHERE T2.NAME  =  "JORDAN"

eval_err_num:451
hard pred: SELECT NAME FROM HIGHSCHOOLER H JOIN FRIEND F ON H.ID = F.STUDENT_ID OR H.ID = F.FRIEND_ID WHERE F.FRIEND_ID = (SELECT ID FROM HIGHSCHOOLER WHERE NAME = 'GABRIEL') OR F.STUDENT_ID = (SELECT ID FROM HIGHSCHOOLER WHERE NAME = 'GABRIEL')
hard gold: SELECT T3.NAME FROM FRIEND AS T1 JOIN HIGHSCHOOLER AS T2 ON T1.STUDENT_ID  =  T2.ID JOIN HIGHSCHOOLER AS T3 ON T1.FRIEND_ID  =  T3.ID WHERE T2.NAME  =  "GABRIEL"

hard pred: SELECT COUNTRYNAME FROM COUNTRIES WHERE CONTINENT = (SELECT CONTID FROM CONTINENTS WHERE CONTINENT = 'EUROPE')
hard gold: SELECT DISTINCT T1.COUNTRYNAME FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.CONTINENT   =   T2.CONTID JOIN CAR_MAKERS AS T3 ON T1.COUNTRYID   =   T3.COUNTRY WHERE T2.CONTINENT   =   'EUROPE'

eval_err_num:452
extra pred: SELECT COUNTRIES.COUNTRYNAME, COUNT(CAR_MAKERS.ID) AS NUMCARMAKERS FROM CAR_MAKERS INNER JOIN COUNTRIES ON CAR_MAKERS.COUNTRY = COUNTRIES.COUNTRYID WHERE COUNTRIES.CONTINENT = (SELECT CONTID FROM CONTINENTS WHERE CONTINENT = 'EUROPE') GROUP BY COUNTRIES.COUNTRYNAME
extra gold: SELECT T1.COUNTRYNAME, COUNT ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.CONTINENT   =   T2.CONTID JOIN CAR_MAKERS AS T3 ON T1.COUNTRYID   =   T3.COUNTRY WHERE T2.CONTINENT   =   'EUROPE' GROUP BY T1.COUNTRYNAME

eval_err_num:453
extra pred: SELECT COUNTRIES.COUNTRYNAME, COUNT(CAR_MAKERS.ID) AS NUMCARMAKERS FROM CAR_MAKERS INNER JOIN COUNTRIES ON CAR_MAKERS.COUNTRY = COUNTRIES.COUNTRYID WHERE COUNTRIES.CONTINENT = (SELECT CONTID FROM CONTINENTS WHERE CONTINENT = 'EUROPE') GROUP BY COUNTRIES.COUNTRYNAME HAVING COUNT(CAR_MAKERS.ID) >= 3
extra gold: SELECT T1.COUNTRYNAME FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.CONTINENT   =   T2.CONTID JOIN CAR_MAKERS AS T3 ON T1.COUNTRYID   =   T3.COUNTRY WHERE T2.CONTINENT   =   'EUROPE' GROUP BY T1.COUNTRYNAME HAVING COUNT ( * )    >=    3

eval_err_num:454
extra pred: SELECT CAR_MAKERS.COUNTRY, COUNT(CAR_MAKERS.ID) AS NUMCARMAKERS FROM CAR_MAKERS INNER JOIN COUNTRIES ON CAR_MAKERS.COUNTRY = COUNTRIES.COUNTRYID WHERE COUNTRIES.CONTINENT = (SELECT CONTID FROM CONTINENTS WHERE CONTINENT = 'EUROPE') GROUP BY CAR_MAKERS.COUNTRY
extra gold: SELECT T1.COUNTRYNAME, COUNT ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.CONTINENT   =   T2.CONTID JOIN CAR_MAKERS AS T3 ON T1.COUNTRYID   =   T3.COUNTRY WHERE T2.CONTINENT   =   'EUROPE' GROUP BY T1.COUNTRYNAME HAVING COUNT ( * )    >=    3

eval_err_num:455
hard pred: SELECT COUNT(CAR_MAKERS.ID) AS NUMCARMAKERS FROM CAR_MAKERS INNER JOIN COUNTRIES ON CAR_MAKERS.COUNTRY = COUNTRIES.COUNTRYID WHERE COUNTRIES.CONTINENT = (SELECT CONTID FROM CONTINENTS WHERE CONTINENT = 'EUROPE')
hard gold: SELECT COUNT ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.CONTINENT   =   T2.CONTID JOIN CAR_MAKERS AS T3 ON T1.COUNTRYID   =   T3.COUNTRY WHERE T2.CONTINENT   =   'EUROPE'

eval_err_num:456
hard pred: SELECT COUNT(CAR_MAKERS.ID) AS NUMCARMAKERS FROM CAR_MAKERS INNER JOIN COUNTRIES ON CAR_MAKERS.COUNTRY = COUNTRIES.COUNTRYID WHERE COUNTRIES.CONTINENT = (SELECT CONTID FROM CONTINENTS WHERE CONTINENT = 'AMERICA')
hard gold: SELECT COUNT ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.CONTINENT   =   T2.CONTID JOIN CAR_MAKERS AS T3 ON T1.COUNTRYID   =   T3.COUNTRY WHERE T2.CONTINENT   =   'AMERICA'

eval_err_num:457
hard pred: SELECT COUNTRIES.COUNTRYNAME, COUNT(CAR_MAKERS.ID) AS NUMCARMAKERS FROM CAR_MAKERS INNER JOIN COUNTRIES ON CAR_MAKERS.COUNTRY = COUNTRIES.COUNTRYID WHERE COUNTRIES.CONTINENT = (SELECT CONTID FROM CONTINENTS WHERE CONTINENT = 'AMERICA') GROUP BY COUNTRIES.COUNTRYNAME
hard gold: SELECT T3.FULLNAME FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.CONTINENT   =   T2.CONTID JOIN CAR_MAKERS AS T3 ON T1.COUNTRYID   =   T3.COUNTRY WHERE T2.CONTINENT   =   'AMERICA'

extra pred: SELECT COUNT(*) FROM VISITOR WHERE ID NOT IN ( SELECT VISITOR_ID FROM VISIT JOIN MUSEUM ON VISIT.MUSEUM_ID = MUSEUM.MUSEUM_ID WHERE OPEN_YEAR > '2010' )
extra gold: SELECT COUNT ( * )  FROM VISITOR WHERE ID NOT IN  ( SELECT T2.VISITOR_ID FROM MUSEUM AS T1 JOIN VISIT AS T2 ON T1.MUSEUM_ID   =   T2.MUSEUM_ID WHERE T1.OPEN_YEAR  >  2010 ) 

extra pred: SELECT NAME, LEVEL_OF_MEMBERSHIP FROM VISITOR WHERE ID NOT IN ( SELECT VISITOR_ID FROM VISIT JOIN MUSEUM ON VISIT.MUSEUM_ID = MUSEUM.MUSEUM_ID WHERE OPEN_YEAR > '2010' ) LIMIT 3
extra gold: SELECT NAME, LEVEL_OF_MEMBERSHIP FROM VISITOR WHERE ID NOT IN  ( SELECT T2.VISITOR_ID FROM MUSEUM AS T1 JOIN VISIT AS T2 ON T1.MUSEUM_ID   =   T2.MUSEUM_ID WHERE T1.OPEN_YEAR  >  2010 ) 

eval_err_num:458
extra pred: SELECT COUNT(*) AS TEMPORARY_NO_DOG_OWNERS FROM OWNERS WHERE OWNER_ID NOT IN ( SELECT OWNER_ID FROM DOGS WHERE DATE_DEPARTED IS NULL )
extra gold: SELECT COUNT ( * )  FROM OWNERS WHERE OWNER_ID NOT IN  (  SELECT OWNER_ID FROM DOGS  ) 

eval_err_num:459
extra pred: SELECT FIRST_NAME, LAST_NAME FROM OWNERS WHERE OWNER_ID NOT IN ( SELECT OWNER_ID FROM DOGS WHERE DATE_DEPARTED IS NULL )
extra gold: SELECT COUNT ( * )  FROM OWNERS WHERE OWNER_ID NOT IN  (  SELECT OWNER_ID FROM DOGS  ) 

medium pred: SELECT TITLE, MIN(ORIGINAL_AIR_DATE) FROM CARTOON
medium gold: SELECT TITLE  FROM CARTOON ORDER BY ORIGINAL_AIR_DATE LIMIT 1

medium pred: SELECT TITLE, MAX(ORIGINAL_AIR_DATE) FROM CARTOON
medium gold: SELECT TITLE  FROM CARTOON ORDER BY ORIGINAL_AIR_DATE DESC LIMIT 1

medium pred: SELECT CARTOON.TITLE, CARTOON.CHANNEL FROM CARTOON WHERE CARTOON.ORIGINAL_AIR_DATE = (SELECT MAX(CARTOON.ORIGINAL_AIR_DATE) FROM CARTOON)
medium gold: SELECT CHANNEL FROM CARTOON ORDER BY ORIGINAL_AIR_DATE DESC LIMIT 1

medium pred: SELECT CARTOON.PRODUCTION_CODE FROM CARTOON WHERE CARTOON.ORIGINAL_AIR_DATE = (SELECT MAX(CARTOON.ORIGINAL_AIR_DATE) FROM CARTOON)
medium gold: SELECT PRODUCTION_CODE FROM CARTOON ORDER BY ORIGINAL_AIR_DATE DESC LIMIT 1

medium pred: SELECT DISTINCT CITIZENSHIP FROM SINGER WHERE BIRTH_YEAR > 1955
medium gold: SELECT CITIZENSHIP FROM SINGER WHERE BIRTH_YEAR  <  1945 OR BIRTH_YEAR  >  1955

extra pred: SELECT * FROM SINGER WHERE CITIZENSHIP = 'UNITED STATES' AND BIRTH_YEAR > 1955
extra gold: SELECT * FROM SINGER WHERE BIRTH_YEAR  <  1945 AND CITIZENSHIP  =  'UNITED STATES' UNION SELECT * FROM SINGER WHERE BIRTH_YEAR  >  1955 AND CITIZENSHIP  =  'UNITED STATES'

extra pred: SELECT * FROM SINGER WHERE CITIZENSHIP = 'FRANCE' AND BIRTH_YEAR > 1955
extra gold: SELECT * FROM SINGER WHERE BIRTH_YEAR  <  1945 AND CITIZENSHIP  =  'FRANCE' UNION SELECT * FROM SINGER WHERE BIRTH_YEAR  >  1955 AND CITIZENSHIP  =  'FRANCE'

eval_err_num:460
extra pred: SELECT * FROM SINGER WHERE CITIZENSHIP = 'CHILE' AND (BIRTH_YEAR < 1945 OR BIRTH_YEAR > 1955)
extra gold: SELECT * FROM SINGER WHERE BIRTH_YEAR  <  1945 AND CITIZENSHIP  =  'CHILE' UNION SELECT * FROM SINGER WHERE BIRTH_YEAR  >  1955 AND CITIZENSHIP  =  'CHILE'

easy pred: SELECT COUNT(*) FROM COUNTRYLANGUAGE
easy gold: SELECT COUNT ( DISTINCT LANGUAGE )  FROM COUNTRYLANGUAGE

eval_err_num:461
easy pred: SORRY, BUT THE QUESTION CANNOT BE ANSWERED WITH THE GIVEN TABLE STRUCTURES. THERE IS NO INDICATION IN THE `COUNTRY` OR `CITY` TABLES THAT A COUNTRY OR CITY BELONGS TO THE CARIBBEAN.
easy gold: SELECT SUM ( POPULATION )  FROM COUNTRY WHERE REGION  =  "CARIBBEAN"

eval_err_num:462
easy pred: SELECT C.CONTINENT FROM COUNTRY C WHERE C.LIFEEXPECTANCY < 72 GROUP BY C.CONTINENT
easy gold: SELECT CONTINENT FROM COUNTRY GROUP BY CONTINENT HAVING AVG ( LIFEEXPECTANCY )   <  72

eval_err_num:463
medium pred: SELECT C.CONTINENT, SUM(C.POPULATION) AS TOTALPOPULATION FROM COUNTRY C WHERE C.LIFEEXPECTANCY < 72 GROUP BY C.CONTINENT
medium gold: SELECT SUM ( POPULATION ) ,  CONTINENT FROM COUNTRY GROUP BY CONTINENT HAVING AVG ( LIFEEXPECTANCY )   <  72

eval_err_num:464
medium pred: SELECT C.CONTINENT, AVG(C.LIFEEXPECTANCY) AS AVGLIFEEXPECTANCY FROM COUNTRY C WHERE C.LIFEEXPECTANCY < 72 GROUP BY C.CONTINENT
medium gold: SELECT AVG ( LIFEEXPECTANCY )  ,  CONTINENT FROM COUNTRY GROUP BY CONTINENT HAVING AVG ( LIFEEXPECTANCY )   <  72

eval_err_num:465
medium pred: SELECT C.CONTINENT, AVG(C.LIFEEXPECTANCY) AS AVGLIFEEXPECTANCY, SUM(C.POPULATION) AS TOTALPOPULATION FROM COUNTRY C WHERE C.LIFEEXPECTANCY < 72 GROUP BY C.CONTINENT
medium gold: SELECT SUM ( POPULATION )  ,  AVG ( LIFEEXPECTANCY )  ,  CONTINENT FROM COUNTRY GROUP BY CONTINENT HAVING AVG ( LIFEEXPECTANCY )   <  72

eval_err_num:466
easy pred: I'M SORRY BUT I CANNOT PROVIDE A SOLUTION TO THIS QUESTION AS THERE IS NO RECORD OF A PERSON WITH LAST NAME 'DUBUQUE' IN ANY OF THE TABLES PROVIDED.
easy gold: SELECT FIRST_NAME FROM OWNERS WHERE LAST_NAME  =  "DUBUQUE"

eval_err_num:467
hard pred: SELECT DOCUMENT_ID, COUNT(*) AS NUM_PARAGRAPHS FROM PARAGRAPHS GROUP BY DOCUMENT_ID ORDER BY NUM_PARAGRAPHS ASC LIMIT 1
hard gold: SELECT DOCUMENT_ID FROM PARAGRAPHS GROUP BY DOCUMENT_ID ORDER BY COUNT ( * )  ASC LIMIT 1

eval_err_num:468
hard pred: SELECT DOCUMENT_ID, COUNT(*) AS NUM_PARAGRAPHS FROM PARAGRAPHS GROUP BY DOCUMENT_ID ORDER BY NUM_PARAGRAPHS DESC LIMIT 1
hard gold: SELECT DOCUMENT_ID FROM PARAGRAPHS GROUP BY DOCUMENT_ID ORDER BY COUNT ( * )  DESC LIMIT 1

eval_err_num:469
easy pred: SELECT COUNT(*) AS NUM_PARAGRAPHS FROM PARAGRAPHS WHERE DOCUMENT_ID = 2394
easy gold: SELECT COUNT ( PARAGRAPH_ID )  FROM PARAGRAPHS WHERE DOCUMENT_ID  =  2394

easy pred: SELECT PARAGRAPH_TEXT FROM PARAGRAPHS WHERE DOCUMENT_ID = 2394 LIMIT 3
easy gold: SELECT PARAGRAPH_TEXT FROM PARAGRAPHS WHERE DOCUMENT_ID  =  2394

eval_err_num:470
extra pred: SELECT T.DOG_ID, O.OWNER_ID, O.LAST_NAME, COUNT(*) AS NUM_TREATMENTS FROM TREATMENTS T INNER JOIN DOGS D ON T.DOG_ID = D.DOG_ID INNER JOIN OWNERS O ON D.OWNER_ID = O.OWNER_ID GROUP BY T.DOG_ID, O.OWNER_ID, O.LAST_NAME ORDER BY NUM_TREATMENTS DESC LIMIT 1
extra gold: SELECT T1.OWNER_ID ,  T1.LAST_NAME FROM OWNERS AS T1 JOIN DOGS AS T2 ON T1.OWNER_ID   =   T2.OWNER_ID JOIN TREATMENTS AS T3 ON T2.DOG_ID   =   T3.DOG_ID GROUP BY T1.OWNER_ID ORDER BY COUNT ( * )  DESC LIMIT 1

eval_err_num:471
easy pred: SELECT COUNT(*) AS "MATCH COUNT" FROM MATCHES WHERE YEAR = 2013
easy gold: SELECT COUNT ( * )  FROM MATCHES WHERE YEAR   =   2013

eval_err_num:472
easy pred: SELECT COUNT(*) AS "MATCH COUNT" FROM MATCHES WHERE YEAR = 2016
easy gold: SELECT COUNT ( * )  FROM MATCHES WHERE YEAR   =   2016

eval_err_num:473
easy pred: SELECT LOSER_ID AS "LOSER ID" FROM MATCHES WHERE LOSER_NAME = 'PETRA KVITOVA'
easy gold: SELECT DISTINCT LOSER_ID  FROM  MATCHES WHERE LOSER_NAME   = "PETRA KVITOVA"

eval_err_num:474
hard pred: SELECT "COUNTRY" FROM "TV_CHANNEL" WHERE "ID" NOT IN ( SELECT "CHANNEL" FROM "CARTOON" WHERE "WRITTEN_BY" = 'TODD CASEY' )
hard gold: SELECT COUNTRY FROM TV_CHANNEL EXCEPT SELECT T1.COUNTRY FROM TV_CHANNEL AS T1 JOIN CARTOON AS T2 ON T1.ID  =  T2.CHANNEL WHERE T2.WRITTEN_BY   =   'TODD CASEY'

eval_err_num:475
medium pred: SELECT "DIRECTED_BY" FROM "CARTOON" WHERE "TITLE" = 'THE RISE OF BLUE BEETLE' AND "WRITTEN_BY" = 'MICHAEL JELENIC'
medium gold: SELECT DIRECTED_BY FROM CARTOON WHERE TITLE  =  "THE RISE OF THE BLUE BEETLE!" AND WRITTEN_BY  =  "MICHAEL JELENIC"

eval_err_num:476
easy pred: SELECT "PACKAGE_OPTION" FROM "TV_CHANNEL" WHERE "COUNTRY" = 'ITALY'
easy gold: SELECT PACKAGE_OPTION FROM TV_CHANNEL WHERE COUNTRY  =  "ITALY"

medium pred: SELECT NAME, SONG_RELEASE_YEAR FROM SINGER WHERE AGE = (SELECT MIN(AGE) FROM SINGER)
medium gold: SELECT SONG_NAME ,  SONG_RELEASE_YEAR FROM SINGER ORDER BY AGE LIMIT 1

medium pred: SELECT NAME, SONG_RELEASE_YEAR FROM SINGER WHERE AGE = (SELECT MAX(AGE) FROM SINGER)
medium gold: SELECT SONG_NAME ,  SONG_RELEASE_YEAR FROM SINGER ORDER BY AGE DESC LIMIT 1

medium pred: SELECT NAME FROM SINGER WHERE AGE = (SELECT MIN(AGE) FROM SINGER)
medium gold: SELECT NAME FROM SINGER ORDER BY AGE LIMIT 1

medium pred: SELECT NAME, AGE FROM SINGER WHERE AGE = (SELECT MAX(AGE) FROM SINGER)
medium gold: SELECT NAME, AGE FROM SINGER ORDER BY AGE DESC LIMIT 1

medium pred: SELECT COUNTRY FROM SINGER WHERE AGE = (SELECT MAX(AGE) FROM SINGER)
medium gold: SELECT COUNTRY FROM SINGER ORDER BY AGE DESC LIMIT 1

eval_err_num:477
hard pred: SELECT COUNT(*) FROM STUDENT INNER JOIN HAS_PET ON STUDENT.STUID = HAS_PET.STUID INNER JOIN PETS ON HAS_PET.PETID = PETS.PETID WHERE PETS.PETTYPE = 'DOG'
hard gold: SELECT COUNT ( * )  FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID   =   T2.STUID JOIN PETS AS T3 ON T3.PETID   =   T2.PETID WHERE T3.PETTYPE   =   'DOG'

eval_err_num:478
hard pred: SELECT COUNT(*) FROM STUDENT INNER JOIN HAS_PET ON STUDENT.STUID = HAS_PET.STUID INNER JOIN PETS ON HAS_PET.PETID = PETS.PETID WHERE PETS.PETTYPE = 'CAT'
hard gold: SELECT COUNT ( * )  FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID   =   T2.STUID JOIN PETS AS T3 ON T3.PETID   =   T2.PETID WHERE T3.PETTYPE   =   'CAT'

eval_err_num:479
extra pred: SELECT FNAME FROM STUDENT INNER JOIN HAS_PET ON STUDENT.STUID = HAS_PET.STUID INNER JOIN PETS ON HAS_PET.PETID = PETS.PETID WHERE PETS.PETTYPE = 'DOG' ORDER BY STUDENT.STUID LIMIT 3
extra gold: SELECT DISTINCT T1.FNAME FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.STUID   =   T2.STUID JOIN PETS AS T3 ON T3.PETID   =   T2.PETID WHERE T3.PETTYPE   =   'CAT' OR T3.PETTYPE   =   'DOG'

eval_err_num:480
hard pred: SELECT DISTINCT O.STATE FROM OWNERS O INNER JOIN PROFESSIONALS P ON O.STATE = P.STATE
hard gold: SELECT STATE FROM OWNERS INTERSECT SELECT STATE FROM PROFESSIONALS

medium pred: SELECT FIRST_NAME, ROLE_CODE FROM PROFESSIONALS
medium gold: SELECT DISTINCT T1.FIRST_NAME ,  T3.TREATMENT_TYPE_DESCRIPTION FROM PROFESSIONALS AS T1 JOIN TREATMENTS AS T2 ON T1.PROFESSIONAL_ID   =   T2.PROFESSIONAL_ID JOIN TREATMENT_TYPES AS T3 ON T2.TREATMENT_TYPE_CODE   =   T3.TREATMENT_TYPE_CODE

eval_err_num:481
medium pred: SELECT P.FIRST_NAME, TT.TREATMENT_TYPE_DESCRIPTION FROM PROFESSIONALS P JOIN TREATMENTS T ON P.PROFESSIONAL_ID = T.PROFESSIONAL_ID JOIN TREATMENT_TYPES TT ON T.TREATMENT_TYPE_CODE = TT.TREATMENT_TYPE_CODE
medium gold: SELECT DISTINCT T1.FIRST_NAME ,  T3.TREATMENT_TYPE_DESCRIPTION FROM PROFESSIONALS AS T1 JOIN TREATMENTS AS T2 ON T1.PROFESSIONAL_ID   =   T2.PROFESSIONAL_ID JOIN TREATMENT_TYPES AS T3 ON T2.TREATMENT_TYPE_CODE   =   T3.TREATMENT_TYPE_CODE

eval_err_num:482
easy pred: SELECT COUNT(COURSE_ID) AS COURSEID_COUNT FROM COURSE
easy gold: SELECT COUNT ( COURSE_ID )  FROM COURSE

eval_err_num:483
easy pred: SELECT COUNT(TEACHER_ID) AS TEACHER_COUNT FROM TEACHER
easy gold: SELECT COUNT ( TEACHER_ID )  FROM TEACHER

eval_err_num:484
hard pred: SELECT TEACHER.NAME FROM TEACHER INNER JOIN COURSE_ARRANGE ON TEACHER.TEACHER_ID = COURSE_ARRANGE.TEACHER_ID INNER JOIN COURSE ON COURSE_ARRANGE.COURSE_ID = COURSE.COURSE_ID WHERE COURSE.COURSE = 'MATH'
hard gold: SELECT T3.NAME FROM COURSE_ARRANGE AS T1 JOIN COURSE AS T2 ON T1.COURSE_ID   =   T2.COURSE_ID JOIN TEACHER AS T3 ON T1.TEACHER_ID   =   T3.TEACHER_ID WHERE T2.COURSE   =   "MATH"

eval_err_num:485
hard pred: SELECT C.CONTINENT, COUNT(CM.ID) AS "COUNT OF CAR MAKERS" FROM CONTINENTS C LEFT JOIN COUNTRIES CO ON C.CONTID = CO.CONTINENT LEFT JOIN CAR_MAKERS CM ON CO.COUNTRYID = CM.COUNTRY GROUP BY C.CONTINENT
hard gold: SELECT T1.CONTINENT ,  COUNT ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.CONTID   =   T2.CONTINENT JOIN CAR_MAKERS AS T3 ON T2.COUNTRYID   =   T3.COUNTRY GROUP BY T1.CONTINENT

eval_err_num:486
hard pred: SELECT CM.FULLNAME, CO.COUNTRYNAME FROM CAR_MAKERS CM JOIN COUNTRIES CO ON CM.COUNTRY = CO.COUNTRYID JOIN CONTINENTS C ON CO.CONTINENT = C.CONTID WHERE C.CONTINENT = 'ASIA'
hard gold: SELECT T3.FULLNAME,  T2.COUNTRYNAME FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.CONTID   =   T2.CONTINENT JOIN CAR_MAKERS AS T3 ON T2.COUNTRYID   =   T3.COUNTRY WHERE T1.CONTINENT  =  "ASIA"

eval_err_num:487
hard pred: SELECT CM.FULLNAME, CO.COUNTRYNAME FROM CAR_MAKERS CM JOIN COUNTRIES CO ON CM.COUNTRY = CO.COUNTRYID JOIN CONTINENTS C ON CO.CONTINENT = C.CONTID WHERE C.CONTINENT = 'EUROPE'
hard gold: SELECT T3.FULLNAME,  T2.COUNTRYNAME FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.CONTID   =   T2.CONTINENT JOIN CAR_MAKERS AS T3 ON T2.COUNTRYID   =   T3.COUNTRY WHERE T1.CONTINENT  =  "EUROPE"

eval_err_num:488
hard pred: SELECT CM.FULLNAME, CO.COUNTRYNAME FROM CAR_MAKERS CM JOIN COUNTRIES CO ON CM.COUNTRY = CO.COUNTRYID JOIN CONTINENTS C ON CO.CONTINENT = C.CONTID WHERE C.CONTINENT = 'NORTH AMERICA' OR C.CONTINENT = 'SOUTH AMERICA'
hard gold: SELECT T3.FULLNAME,  T2.COUNTRYNAME FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.CONTID   =   T2.CONTINENT JOIN CAR_MAKERS AS T3 ON T2.COUNTRYID   =   T3.COUNTRY WHERE T1.CONTINENT  =  "AMERICA"

eval_err_num:489
easy pred: SELECT COUNT(DISTINCT PROFESSIONAL_ID) AS NUM_OF_PROFESSIONAL_IDS FROM PROFESSIONALS
easy gold: SELECT COUNT ( DISTINCT PROFESSIONAL_ID )  FROM PROFESSIONALS

medium pred: SELECT PROFESSIONALS.PROFESSIONAL_ID, PROFESSIONALS.FIRST_NAME, TREATMENTS.TREATMENT_TYPE_CODE FROM PROFESSIONALS JOIN TREATMENTS ON PROFESSIONALS.PROFESSIONAL_ID = TREATMENTS.PROFESSIONAL_ID
medium gold: SELECT T1.PROFESSIONAL_ID, T1.FIRST_NAME ,  T3.TREATMENT_TYPE_CODE FROM PROFESSIONALS AS T1 JOIN TREATMENTS AS T2 ON T1.PROFESSIONAL_ID   =   T2.PROFESSIONAL_ID JOIN TREATMENT_TYPES AS T3 ON T2.TREATMENT_TYPE_CODE   =   T3.TREATMENT_TYPE_CODE

extra pred: SELECT PROFESSIONALS.PROFESSIONAL_ID, PROFESSIONALS.FIRST_NAME, TREATMENTS.TREATMENT_TYPE_CODE FROM PROFESSIONALS JOIN TREATMENTS ON PROFESSIONALS.PROFESSIONAL_ID = TREATMENTS.PROFESSIONAL_ID ORDER BY TREATMENTS.DATE_OF_TREATMENT DESC LIMIT 5
extra gold: SELECT T1.PROFESSIONAL_ID, T1.FIRST_NAME, T3.TREATMENT_TYPE_CODE FROM PROFESSIONALS AS T1 JOIN TREATMENTS AS T2 ON T1.PROFESSIONAL_ID   =   T2.PROFESSIONAL_ID JOIN TREATMENT_TYPES AS T3 ON T2.TREATMENT_TYPE_CODE   =   T3.TREATMENT_TYPE_CODE ORDER BY T2.DATE_OF_TREATMENT DESC LIMIT 5

hard pred: SELECT NAME FROM BATTLE WHERE ID NOT IN (SELECT LOST_IN_BATTLE FROM SHIP WHERE LOCATION = 'ENGLISH CHANNEL')
hard gold: SELECT NAME  FROM BATTLE EXCEPT SELECT T1.NAME FROM BATTLE AS T1 JOIN SHIP AS T2 ON T1.ID  =  T2.LOST_IN_BATTLE WHERE T2.LOCATION  =  'ENGLISH CHANNEL'

extra pred: SELECT NAME, RESULT FROM BATTLE WHERE ID NOT IN (SELECT LOST_IN_BATTLE FROM SHIP WHERE LOCATION = 'ENGLISH CHANNEL')
extra gold: SELECT NAME , RESULT FROM BATTLE EXCEPT SELECT T1.NAME , T1.RESULT  FROM BATTLE AS T1 JOIN SHIP AS T2 ON T1.ID  =  T2.LOST_IN_BATTLE WHERE T2.LOCATION  =  'ENGLISH CHANNEL'

extra pred: SELECT NAME, RESULT, BULGARIAN_COMMANDER FROM BATTLE WHERE ID NOT IN (SELECT LOST_IN_BATTLE FROM SHIP WHERE LOCATION = 'ENGLISH CHANNEL')
extra gold: SELECT NAME , RESULT , BULGARIAN_COMMANDER FROM BATTLE EXCEPT SELECT T1.NAME , T1.RESULT , T1.BULGARIAN_COMMANDER FROM BATTLE AS T1 JOIN SHIP AS T2 ON T1.ID  =  T2.LOST_IN_BATTLE WHERE T2.LOCATION  =  'ENGLISH CHANNEL'

eval_err_num:490
easy pred: SELECT * FROM DOCUMENTS INNER JOIN TEMPLATES ON DOCUMENTS.TEMPLATE_ID = TEMPLATES.TEMPLATE_ID
easy gold: SELECT * FROM DOCUMENTS AS T1 JOIN TEMPLATES AS T2 ON T1.TEMPLATE_ID   =   T2.TEMPLATE_ID

eval_err_num:491
medium pred: SELECT COUNT(*) FROM DOCUMENTS INNER JOIN TEMPLATES ON DOCUMENTS.TEMPLATE_ID = TEMPLATES.TEMPLATE_ID WHERE TEMPLATES.TEMPLATE_TYPE_CODE = 'PPT'
medium gold: SELECT COUNT ( * )  FROM DOCUMENTS AS T1 JOIN TEMPLATES AS T2 ON T1.TEMPLATE_ID   =   T2.TEMPLATE_ID WHERE T2.TEMPLATE_TYPE_CODE   =   'PPT'

eval_err_num:492
easy pred: SELECT AVG(ACCELERATE) AS AVERAGE_ACCELERATION FROM CARS_DATA
easy gold: SELECT AVG ( ACCELERATE )  FROM CARS_DATA

eval_err_num:493
easy pred: SELECT AVG(HORSEPOWER) AS AVERAGE_HORSEPOWER FROM CARS_DATA
easy gold: SELECT AVG ( HORSEPOWER )  FROM CARS_DATA

eval_err_num:494
extra pred: SELECT MODEL_LIST.MODEL, MAX(CAST(CARS_DATA.HORSEPOWER AS INTEGER)) AS MAX_HORSEPOWER FROM CARS_DATA INNER JOIN CAR_NAMES ON CARS_DATA.ID = CAR_NAMES.MAKEID INNER JOIN MODEL_LIST ON CAR_NAMES.MODEL = MODEL_LIST.MODEL WHERE CARS_DATA.CYLINDERS = 4 GROUP BY MODEL_LIST.MODEL ORDER BY MAX_HORSEPOWER DESC LIMIT 1
extra gold: SELECT T1.MODEL FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MAKEID  =  T2.ID WHERE T2.CYLINDERS  =  4 ORDER BY T2.HORSEPOWER DESC LIMIT 1

medium pred: SELECT DISTINCT LANGUAGE FROM COUNTRYLANGUAGE WHERE COUNTRYCODE = 'COUNTRYCODE' AND ISOFFICIAL = 'T'
medium gold: SELECT COUNT ( DISTINCT T2.LANGUAGE )  FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE  INDEPYEAR  <  1930 AND T2.ISOFFICIAL   =   "T"

eval_err_num:495
medium pred: SELECT COUNT(DISTINCT LANGUAGE) AS 'NUMBER OF UNIQUE OFFICIAL LANGUAGES' FROM COUNTRYLANGUAGE CL JOIN COUNTRY C ON CL.COUNTRYCODE = C.CODE WHERE CL.ISOFFICIAL = 'T' AND C.INDEPYEAR < 1930
medium gold: SELECT COUNT ( DISTINCT T2.LANGUAGE )  FROM COUNTRY AS T1 JOIN COUNTRYLANGUAGE AS T2 ON T1.CODE   =   T2.COUNTRYCODE WHERE  INDEPYEAR  <  1930 AND T2.ISOFFICIAL   =   "T"

                     easy                 medium               hard                 extra                all                  joint_all           
count                417                  320                  163                  107                  1007                 293                 
=====================   EXECUTION ACCURACY     =====================
execution            0.542                0.325                0.117                0.206                0.000                0.133               

====================== EXACT MATCHING ACCURACY =====================
exact match          0.523                0.175                0.061                0.037                0.286                0.078               

---------------------PARTIAL MATCHING ACCURACY----------------------
select               0.892                0.742                0.700                0.765                0.822                0.000               
select(no AGG)       0.896                0.780                0.700                0.765                0.836                0.000               
where                0.860                0.469                0.429                0.290                0.644                0.000               
where(no OP)         0.865                0.504                0.536                0.581                0.694                0.000               
group(no Having)     0.833                1.000                0.875                0.000                0.882                0.000               
group                0.333                0.333                0.875                0.000                0.588                0.000               
order                1.000                0.714                0.900                0.500                0.784                0.000               
and/or               1.000                0.940                0.963                0.840                0.958                0.000               
IUEN                 0.000                0.000                0.000                0.000                0.000                0.000               
keywords             0.923                0.659                0.711                0.531                0.779                0.000               
---------------------- PARTIAL MATCHING RECALL ----------------------
select               0.597                0.369                0.172                0.243                0.418                0.000               
select(no AGG)       0.600                0.388                0.172                0.243                0.425                0.000               
where                0.645                0.315                0.120                0.120                0.387                0.000               
where(no OP)         0.649                0.339                0.150                0.240                0.417                0.000               
group(no Having)     0.385                0.058                0.233                0.000                0.117                0.000               
group                0.154                0.019                0.233                0.000                0.078                0.000               
order                0.800                0.195                0.196                0.027                0.176                0.000               
and/or               0.993                0.990                0.981                0.989                0.990                0.000               
IUEN                 0.000                0.000                0.000                0.000                0.000                0.000               
keywords             0.687                0.302                0.166                0.159                0.373                0.000               
---------------------- PARTIAL MATCHING F1 --------------------------
select               0.716                0.493                0.276                0.369                0.554                1.000               
select(no AGG)       0.718                0.518                0.276                0.369                0.564                1.000               
where                0.737                0.377                0.188                0.170                0.484                1.000               
where(no OP)         0.742                0.406                0.234                0.340                0.521                1.000               
group(no Having)     0.526                0.109                0.368                1.000                0.207                1.000               
group                0.211                0.036                0.368                1.000                0.138                1.000               
order                0.889                0.306                0.321                0.051                0.287                1.000               
and/or               0.996                0.964                0.972                0.908                0.973                1.000               
IUEN                 1.000                1.000                1.000                1.000                1.000                1.000               
keywords             0.788                0.414                0.269                0.245                0.505                1.000               


                     turn 1               turn 2               turn 3               turn 4               turn >4             
count                293                  285                  244                  114                  71                  
=====================   TRUN XECUTION ACCURACY     =====================
execution            0.410                0.354                0.332                0.395                0.338               

====================== TRUN EXACT MATCHING ACCURACY =====================
exact match          0.331                0.281                0.246                0.289                0.254               
