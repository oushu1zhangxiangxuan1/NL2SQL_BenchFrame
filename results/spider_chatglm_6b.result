eval_err_num:1
easy pred: SELECT COUNT(*) AS num_singers FROM "singer"
easy gold: SELECT count(*) FROM singer

eval_err_num:2
easy pred: SELECT COUNT(*) as total_number_of_singers FROM "singer"
easy gold: SELECT count(*) FROM singer

eval_err_num:3
medium pred: SELECT name, country, age FROM "singer" ORDER BY age DESC LIMIT 1
medium gold: SELECT name ,  country ,  age FROM singer ORDER BY age DESC

eval_err_num:4
medium pred: SELECT name, country, age FROMsinger GROUP BY name, country, age ORDER BY age DESC
medium gold: SELECT name ,  country ,  age FROM singer ORDER BY age DESC

eval_err_num:5
medium pred: SELECT AVG(Age), MIN(Age), MAX(Age) FROMsinger
medium gold: SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'

eval_err_num:6
medium pred: SELECT AVG(Age), MIN(Age), MAX(Age) FROMsinger
medium gold: SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'

eval_err_num:7
medium pred: SELECTsinger.Name, singer.Song_release_yearFROMsinger JOINStadium ON singer.Singer_ID =Stadium.Singer_ID JOINconcert ONStadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year = ( SELECT Year FROM concert WHERE concert_ID = 123 ) ORDER BY singer.Age DESC
medium gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1

eval_err_num:8
medium pred: SELECT Song_Name, Song_release_year FROM "singer" WHEREsinger_ID = ( SELECTMIN(Singer_ID) FROM "singer" GROUP BY Name, Is_male )
medium gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1

eval_err_num:9
easy pred: SELECT t1.Country FROM "singer" t1 JOIN "stadium" t2 ON t1.Singer_ID = t2.Singer_ID AND t2.Capacity > 1000 JOIN "concert" t3 ON t1.Singer_ID = t3.Singer_ID WHERE t3.Year = ( SELECT MAX(Year) FROM "concert" GROUP BY "concert".Stadium_ID ) GROUP BY t1.Country HAVING COUNT(DISTINCT t1.Country) > 1
easy gold: SELECT DISTINCT country FROM singer WHERE age  >  20

eval_err_num:10
easy pred: SELECT country FROM "singer" WHERE age > 20
easy gold: SELECT DISTINCT country FROM singer WHERE age  >  20

eval_err_num:11
medium pred: SELECTCountry, COUNT(*) AS Num_singers FROMsinger GROUP BYCountry
medium gold: SELECT country ,  count(*) FROM singer GROUP BY country

eval_err_num:12
medium pred: SELECT country, COUNT(*) as num_singers FROM "singer" GROUP BY country ORDER BY num_singers DESC
medium gold: SELECT country ,  count(*) FROM singer GROUP BY country

eval_err_num:13
hard pred: SELECT Song_Name FROM "singer" AS sing WHERE sing.Age > (SELECT 的平均年龄 FROM "singer") GROUP BY Song_Name HAVING COUNT(DISTINCT sing.Name) > 1
hard gold: SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)

eval_err_num:14
hard pred: SELECT Song_Name FROM "singer" WHERE Age > (SELECT Average FROM "singer")
hard gold: SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)

eval_err_num:15
medium pred: SELECT * FROM "stadium" WHERE Capacity >= 5000 AND Capacity <= 10000
medium gold: SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000

eval_err_num:16
medium pred: SELECT Stadium.Location, Stadium.Name FROMStadium JOINsinger ON Stadium.ID =singer.Stadium_ID JOINconcert ON concert.Stadium_ID =Stadium.ID WHERE Capacity >= 5000 AND Capacity <= 10000
medium gold: SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000

eval_err_num:17
medium pred: SELECT MAX(Capacity) AS MaxCapacity, AVG(Capacity) ASavg FROM stadiums
medium gold: select max(capacity), average from stadium

eval_err_num:18
medium pred: SELECT Stadium.Average, Stadium.Maximum FROM stadiums JOIN singer ON stadiums.Stadium_ID = singer.Stadium_ID JOIN concert ON stadiums.Stadium_ID = concert.Stadium_ID JOINsinger_in_concert ON singer.Singer_ID = concert.Singer_ID WHERE演唱会.Name = 'The concert in question'
medium gold: select avg(capacity) ,  max(capacity) from stadium

eval_err_num:19
medium pred: SELECTStadium.Name,Stadium.Capacity FROMStadium JOINsinger ONStadium.Stadium_ID=singer.Stadium_ID JOINconcert ONStadium.Stadium_ID=concert.Stadium_ID GROUP BYStadium.Stadium_ID ORDER BY Average DESC LIMIT 1
medium gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1

eval_err_num:20
medium pred: SELECT体育场.Name, 体育场.Capacity FROM stadium AS 体育场 JOINsinger ASsinger ON 体育场.Stadium_ID =singer.Stadium_ID JOIN concert AS concert ON 体育场.Stadium_ID = concert.Stadium_ID JOINsinger_in_concert AS singer_in_concert ON singer.Singer_ID = concert.Singer_ID WHERE concert.average = (SELECT MAX(average) FROM concert)
medium gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1

eval_err_num:21
medium pred: SELECT COUNT(*) FROM "concert" WHERE Year = 2014 or Year = 2015
medium gold: SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015

eval_err_num:22
medium pred: SELECT COUNT(*) FROM "concert" WHERE year = 2014 OR year = 2015
medium gold: SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015

eval_err_num:23
medium pred: SELECT Stadium.Name, COUNT(DISTINCT concert.concert_ID) AS Number_of_ concerts FROM stadium INNER JOIN concert ONstadium.Stadium_ID = concert.Stadium_ID INNER JOINsinger ON concert.concert_ID =singer.Singer_ID GROUP BY Stadium.Stadium_ID
medium gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id

eval_err_num:24
medium pred: SELECT Stadium_ID, COUNT(*) as Num_Concersions FROM concert GROUP BY Stadium_ID ORDER BY Num_Concersions DESC
medium gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id

eval_err_num:25
extra pred: SELECT Stadium.Name, Stadium.Capacity FROM stadium INNER JOIN concert ON鸟巢.Stadium_ID= concert.Stadium_ID GROUP BY Stadium.Name,鸟巢.Capacity HAVING COUNT(concert.ID) = (SELECT COUNT(*) FROM concert WHERE Year >= 2014) + 1
extra gold: SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:26
extra pred: SELECT Stadium.Name, Stadium.Capacity FROMStadium JOIN concert ON Stadium.ID = concert.Stadium_ID JOINsinger ON concert.Singer_ID =singer.Singer_ID WHERE concert.Year = 2013 AND Stadium.Capacity >= (SELECT MAX(Capacity) FROM Stadium WHERE Name = 'New York Times' AND Year = 2013)
extra gold: select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1

eval_err_num:27
hard pred: SELECT year FROM "concert" WHERE year >= 2021 AND year < 2022 GROUP BY year HAVING COUNT(DISTINCT "concert_ID") > (SELECT COUNT(DISTINCT "concert_ID") FROM "concert" WHERE year >= 2021 AND year < 2022) + 1
hard gold: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1

hard pred: SELECT Year FROM concert WHERE concert_ID IN (SELECT concert_ID FROM concert GROUP BY Year HAVING COUNT(*) > 1)
hard gold: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1

eval_err_num:28
hard pred: SELECT * FROM "stadium" WHERE id IS NULL
hard gold: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)

eval_err_num:29
hard pred: SELECT * FROM "stadium" WHERE "Stadium_ID" = NULL
hard gold: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)

eval_err_num:30
hard pred: SELECT t1.Country FROM "singer" t1 JOIN "stadium" t2 ON t1.Singer_ID = t2.Singer_ID AND t1.Age > 40 JOIN "stadium" t3 ON t1.Singer_ID = t3.Singer_ID AND t1.Age < 30 WHERE t2.的最高值 = t3.的最小值
hard gold: SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30

eval_err_num:31
hard pred: SELECT * FROM "stadium" WHERE "Stadium_ID" NOT IN (SELECT "Stadium_ID" FROM "concert" WHERE "Year" = 2014)
hard gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014

eval_err_num:32
hard pred: SELECT * FROM "stadium" WHERE "Stadium_ID" NOT IN (SELECT "Stadium_ID" FROM "concert" WHERE "year" = 2014)
hard gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014

eval_err_num:33
medium pred: SELECT concert_name, theme, COUNT(*) AS singer_count FROM "concert" GROUP BY concert_name, theme
medium gold: SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id

eval_err_num:34
medium pred: SELECT concert_name, theme, COUNT(*) as num_singers FROM concerts GROUP BY concert_name, theme ORDER BY num_singers DESC
medium gold: select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id

eval_err_num:35
medium pred: SELECTsinger.Name, count(DISTINCT concert.Concert_ID) AS Num_concert FROMsinger INNER JOIN concert ONsinger.Singer_ID=concert.Singer_ID GROUP BYsinger.Name
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id

eval_err_num:36
medium pred: SELECT singer.Name, COUNT(*) as Num_Concerts FROMsinger INNER JOIN concert ON singer.Singer_ID = concert.Singer_ID INNER JOINstadium ON concert.Stadium_ID =stadium.Stadium_ID GROUP BY singer.Name
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id

eval_err_num:37
hard pred: SELECT * FROM "singer" WHERE "Singer_ID" = ( SELECT "Singer_ID" FROM "concert" WHERE "Year" = 2014 )
hard gold: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014

eval_err_num:38
hard pred: SELECT Name, Song_Name, Song_release_year FROMsinger WHEREsinger_ID=1
hard gold: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014

eval_err_num:39
medium pred: SELECT Name,Country FROMsinger WHERE Song_Name='Hey'
medium gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'

eval_err_num:40
medium pred: SELECT s.Name, s.Country FROM "singer" s JOIN "stadium" p ON s.Singer_ID = p.Singer_ID JOIN "concert" c ON p.Stadium_ID = c.Stadium_ID WHERE s.Song_Name = 'Hey' GROUP BY s.Name, s.Country HAVING COUNT(*) > 0
medium gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'

eval_err_num:41
extra pred: SELECT s.name, s.location FROM "stadium" s JOIN "singer" s1 ON s.Stadium_ID = s1.Stadium_ID JOIN "concert" c ON s1.Singer_ID = c.Singer_ID AND c.Year = 2014 AND c.Year = 2015 WHERE s.Stadium_ID IS NULL
extra gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015

eval_err_num:42
extra pred: SELECT Stadium.Name, Stadium.Location FROM Stadium INNER JOIN concert ON Stadium.Stadium_ID = concert.Stadium_ID INNER JOINsinger ON concert.concert_ID =singer.Singer_ID WHERE concert.Year = 2014 AND concert.Year = 2015
extra gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015

eval_err_num:43
hard pred: SELECT COUNT(*) AS num_concert FROM "concert" WHERE "Stadium"."Capacity" = ( SELECT MAX("Stadium"."Capacity") FROM "stadium" )
hard gold: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)

eval_err_num:44
hard pred: SELECT COUNT(*) FROM "concert" WHERE "Stadium_ID" = (SELECT MAX("Stadium_ID") FROM "stadium")
hard gold: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)

easy pred: SELECT COUNT(DISTINCT Pets.PetID) FROM Pets WHERE Pets.weight > 10
easy gold: SELECT count(*) FROM pets WHERE weight  >  10

medium pred: SELECT weight FROM Pets WHERE pet_age = (SELECT min(pet_age) FROM Pets)
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1

eval_err_num:45
medium pred: SELECT t1.weight FROM Pets t1 join Has_Pet t2 on t1.PetID = t2.PetID WHERE t2.pet_age = (SELECT min(pet_age) FROM Pets)
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1

eval_err_num:46
medium pred: SELECT petType, MAX(weight) as max_weight FROM Pets GROUP BY petType
medium gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType

medium pred: SELECT COUNT(*) FROM Student WHERE Age > 20
medium gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20

eval_err_num:47
medium pred: SELECT COUNT(DISTINCT Pets.PetID) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Has_Pet.Age > 20
medium gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20

eval_err_num:48
hard pred: SELECT COUNT(DISTINCT pet_id) AS num_dog_pets FROM Has_Pet WHEREStuID=1; -- Only include female students
hard gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'

eval_err_num:49
hard pred: SELECT COUNT(DISTINCT Pets.PetType) AS num_dog_pets_by_female_students FROMPets JOIN Has_Pet ONPets.PetID=Has_Pet.PetID JOIN Student ON Has_Pet.StuID=Student.StuID WHERE Student.Sex='F'
hard gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'

eval_err_num:50
easy pred: SELECT COUNT(DISTINCT PetType) AS distinct_pet_type_count FROM Pets
easy gold: SELECT count(DISTINCT pettype) FROM pets

eval_err_num:51
easy pred: SELECT COUNT(DISTINCTPetType) AS num_types FROM Pets
easy gold: SELECT count(DISTINCT pettype) FROM pets

eval_err_num:52
extra pred: SELECT s.LName FROM Student s INNER JOIN Has_Pet h ON s.StuID = h.StuID INNER JOIN Pets p ON h.PetID = p.PetID WHERE p.PetType = 'cat' OR p.PetType = 'dog'
extra gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'

eval_err_num:53
extra pred: SELECT s.StuID, s.LName, s.Fname FROM Student s INNER JOIN Has_Pet h ON s.StuID = h.StuID INNER JOIN Pets p ON h.PetID = p.PetID WHERE p.PetType = 'cat' OR p.PetType = 'dog'
extra gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'

eval_err_num:54
extra pred: SELECT s.LName FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID WHERE p.PetType = 'cat' AND p.PetType = 'dog'
extra gold: select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'

eval_err_num:55
extra pred: SELECT s.StuID, s.LName, s.Fname FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID AND p.PetType = 'cat' JOIN Pets q ON h.PetID = q.PetID AND q.PetType = 'dog' GROUP BY s.StuID, s.LName, s.Fname HAVING COUNT(DISTINCT p.PetType) = (SELECT COUNT(DISTINCT p2.PetType) FROM Pets p2 WHERE p2.pet_age > 0 AND p2.pet_age < 18 AND p2.PetType = p.PetType)
extra gold: SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'

eval_err_num:56
extra pred: SELECT s.StuID, s.Age FROM Student s INNER JOIN Has_Pet h ON s.StuID = h.StuID INNER JOIN Pets p ON h.PetID = p.PetID WHERE p.PetType = 'cat' AND s.StuID NOT IN (SELECT t.StuID 联系人ID PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, sex VARCHAR(1), Major VARCHAR(20), Advisor INTEGER, city_code VARCHAR(3) )
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

eval_err_num:57
extra pred: SELECT StuID, Major FROM Student WHERE StuID NOT IN ( SELECTStuID FROMHas_Pet WHEREPetID = 'cat' )
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

hard pred: SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID = 1234)
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'

hard pred: SELECT StuID FROM Student WHERE LName = 'Alice' AND Fname = 'Bob'
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'

eval_err_num:58
extra pred: SELECT s.StuID, s.Fname FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID AND p.PetType = 'Dog' WHERE h.PetID IS NULL AND p.PetType = 'Cat'
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

eval_err_num:59
extra pred: SELECT s.LName FROM Student s INNER JOIN Has_Pet h ON s.StuID = h.StuID WHERE h.PetID IS NULL AND s.LName = 'John'
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

eval_err_num:60
medium pred: SELECT PetType, weights FROM Pets WHERE pet_age = ( SELECT MIN(pet_age) FROMPets GROUP BY PetType )
medium gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1

eval_err_num:61
medium pred: SELECT PetType, pet_age, weight FROM Pets WHERE pet_age = (SELECT 最小的年龄 FROM Student WHERE StuID = 1)
medium gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1

eval_err_num:62
medium pred: SELECT PETType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PETType
medium gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype

eval_err_num:63
medium pred: SELECT pet_type, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM Pets GROUP BY pet_type
medium gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype

eval_err_num:64
medium pred: SELECTPetType, AVG(weight) FROMPets GROUP BYPetType
medium gold: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype

eval_err_num:65
medium pred: SELECT s.LName, s.Fname, s.Age FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID
medium gold: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid

eval_err_num:66
medium pred: SELECT s.LName, s.Fname, s.Age, COUNT(DISTINCT p.PetID) as different_first_names_and_ages FROM Student s INNER JOIN Has_Pet p ON s.StuID = p.StuID GROUP BY s.LName, s.Fname, s.Age
medium gold: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid

medium pred: SELECT Pets.PetID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith'
medium gold: SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'

eval_err_num:67
medium pred: SELECTPetID FROM Has_Pet WHEREStuID = (SELECTStuID FROM Student WHERELName = 'Smith')
medium gold: SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'

eval_err_num:68
medium pred: SELECT s.StuID, COUNT(*) as Num_Pets FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID GROUP BY s.StuID
medium gold: SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid

eval_err_num:69
medium pred: SELECT s.StuID, COUNT(*) AS pet_count FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID GROUP BY s.StuID ORDER BY pet_count DESC
medium gold: select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid

eval_err_num:70
medium pred: SELECT s.LName, s.Fname FROM Student s INNER JOIN Has_Pet h ON s.StuID = h.StuID INNER JOIN Pets p ON h.PetID = p.PetID GROUP BY s.LName, s.Fname HAVING COUNT(DISTINCT p.PetType) > 1
medium gold: SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1

eval_err_num:71
medium pred: SELECT s.LName, s.Fname, t.Sex FROM Student s INNER JOIN Has_Pet h ON s.StuID = h.StuID INNER JOIN Pets p ON h.PetID = p.PetID WHERE p.pet_age > 0 GROUP BY s.LName, s.Fname, t.Sex HAVING COUNT(DISTINCT p.PetID) > 1
medium gold: SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1

eval_err_num:72
hard pred: SELECT s.LName FROM Student s INNER JOIN Has_Pet h ON s.StuID = h.StuID INNER JOIN Pets p ON h.PetID = p.PetID AND p.pet_age = 3
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'

eval_err_num:73
hard pred: SELECT s.LName FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID WHERE p.pet_age = 3 AND s.LName = 'Tom'
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'

eval_err_num:74
extra pred: SELECT avg(Age) FROM Student WHEREStuID NOT IN (SELECTStuID FROMHas_Pet)
extra gold: select avg(age) from student where stuid not in (select stuid from has_pet)

eval_err_num:75
easy pred: SELECT COUNT(*) FROMcontinents
easy gold: SELECT count(*) FROM CONTINENTS;

eval_err_num:76
easy pred: SELECT COUNT(DISTINCTcontinent) AS num_continents FROMcontinents
easy gold: SELECT count(*) FROM CONTINENTS;

eval_err_num:77
medium pred: SELECTcontinentId,continentName, COUNT(*) FROM countries GROUP BYcontinentId,continentName HAVING COUNT(*) > 0
medium gold: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;

eval_err_num:78
medium pred: SELECT continentId, continentName, COUNT(*) as NumCountry FROMcontinents GROUP BYcontinentId, continentName
medium gold: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;

eval_err_num:79
medium pred: SELECT maker.FullName, maker.Id, COUNT(*) as ModelCount FROM car_makersmaker INNER JOIN model_list ONMaker.Id=model_list.Maker GROUP BY maker.FullName,maker.Id HAVING COUNT(*) > 0
medium gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;

eval_err_num:80
medium pred: SELECTMaker, FullName, COUNT(*) FROM car_makers GROUP BYMaker
medium gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;

eval_err_num:81
hard pred: SELECT Model from car_makers WHERE Maker = 'Tesla' AND Horsepower = (SELECT MIN(horsepower) FROM cars_data WHERE Model = 'Tesla' AND Make = 'Tesla' AND Year = 2022)
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;

eval_err_num:82
hard pred: SELECT Model FROM cars_data WHERE Horsepower = (SELECT MIN( Horsepower) FROM cars_data)
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;

eval_err_num:83
extra pred: SELECT MODEL FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data)
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)

extra pred: SELECT Model FROM car_names WHERE Model < (SELECT MAX(Model) FROM car_names)
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)

eval_err_num:84
extra pred: SELECTMaker FROM cars_data WHERE Year = 1970
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';

eval_err_num:85
extra pred: SELECT model_list.Maker, car_makers.FullName, model_list.Model FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker WHERE year = 1970
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';

eval_err_num:86
extra pred: SELECT Maker, SUM(Year) FROM cars_data GROUP BY Maker ORDER BY Year ASC LIMIT 1
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);

eval_err_num:87
extra pred: SELECT Maker, Year FROM cars_data WHERE Year = ( SELECT最早年份 FROM model_list WHERE Maker = 'Maker' )
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);

eval_err_num:88
hard pred: SELECT DISTINCT ModelList.Model FROM CarMakers asMaker JOIN ModelList asModel ONMaker.Model = Model.Model JOIN Countries asCountry ONMaker.Country =Country.Country WHEREYear >= 1980
hard gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;

eval_err_num:89
hard pred: SELECT Model FROM car_makers WHERE Year >= 1980
hard gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;

eval_err_num:90
hard pred: SELECT continents.ContId, continents.ContName, COUNT(DISTINCT car_makers.Maker) AS car_makers_count FROM continents INNER JOIN car_makers ONcontinents.ContId = car_makers.ContId INNER JOIN countries ON car_makers.Country = countries.CountryId GROUP BY continents.ContId,continents.ContName
hard gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;

eval_err_num:91
hard pred: SELECT continents.ContId, continents.ContName, COUNT(DISTINCT car_makers.Id) AS car_maker_count FROM continents INNER JOIN car_makers ONcontinents.ContId = car_makers.ContId GROUP BY continents.ContId,continents.ContName
hard gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;

eval_err_num:92
extra pred: SELECT country.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.CountryId JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY countries.CountryName ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;

eval_err_num:93
extra pred: SELECTCountryNameFROM countriesWHERE CountryId IN (SELECT MAX(CountryId)FROM car_makers)
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;

eval_err_num:94
medium pred: SELECT Maker, COUNT(*) AS Models FROM car_makers GROUP BY Maker ORDER BY COUNT(*) DESC
medium gold: select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;

eval_err_num:95
medium pred: SELECTMaker, COUNT(*) AS models_ produced FROM car_makers GROUP BYMaker ORDER BY models_ produced DESC
medium gold: SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;

eval_err_num:96
medium pred: SELECT Accelerate FROM cars_data WHERE Make = 'Amc hornet sportabout' AND Year = 2021
medium gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';

eval_err_num:97
medium pred: SELECT Accelerate FROM cars_data WHERE Make = 'AC hornet sportabout'
medium gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';

eval_err_num:98
medium pred: SELECT COUNT(*) AS num_car_makers FROM car_makers WHERECountry = 'France'
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';

eval_err_num:99
medium pred: SELECT COUNT(*) FROM car_makers WHERECountry = 'France'
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';

hard pred: SELECT COUNT(*) FROM car_makers WHERE Country = 'USA'
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';

hard pred: SELECT COUNT(*) FROM car_makers WHERE Country = 'United States'
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';

eval_err_num:100
easy pred: SELECT mpg FROM cars_data WHERECylinders=4
easy gold: SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;

eval_err_num:101
easy pred: SELECT avg(mpg) FROM cars_data WHEREcyls = 4
easy gold: SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;

eval_err_num:102
medium pred: SELECT MIN(weight) FROM cars_data WHERE cylinder = 8 AND year = 1974
medium gold: select min(weight) from cars_data where cylinders  =  8 and year  =  1974

eval_err_num:103
medium pred: SELECTMaker,Model FROM car_makers; SELECTMaker,Model FROM model_list
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;

eval_err_num:104
medium pred: SELECT Maker, Model FROM car_makers
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;

eval_err_num:105
medium pred: SELECT CountryName, id FROM countries WHERE CountryId IN (SELECT FullName FROM car_makers)
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;

eval_err_num:106
medium pred: SELECT CountryName, CountryId FROM countries WHERE Continent = 'Asia' AND CountryId >= 1 AND CountryId <= 50 AND car_makers.Id IN ( SELECT id FROM car_makers WHEREMaker = 'Toyota' )
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;

easy pred: SELECT COUNT(*) FROM cars_data WHERE Horsepower >= 150
easy gold: SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;

eval_err_num:107
medium pred: SELECT Years, AVG(Weight) FROM Cars_data GROUP BY Year
medium gold: SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;

eval_err_num:108
extra pred: SELECT COUNT(*) as count, country.CountryName from countries as country INNER JOIN car_makers as carmaker ON country.CountryId = carmaker.CountryId GROUP BY country.CountryName HAVING COUNT(*) >= 3
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;

eval_err_num:109
extra pred: SELECT 该国名 FROM countries WHERE 该国名 IN ('United Kingdom', 'France', '德国', '爱尔兰', '意大利', '荷兰', '西班牙', '英国', '法国', '德国', '爱尔兰', '意大利', '荷兰', '西班牙', '俄罗斯', '瑞典', '挪威', '丹麦', '芬兰', '波兰', '立陶宛', '卢森堡', '瑞士', '奥地利', '澳大利亚', '新西兰') GROUP BY 该国名 HAVING COUNT(DISTINCT car_makers) >= 3
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;

eval_err_num:110
extra pred: SELECT MAX( Horsepower) as maximum_horsepower, Maker as make FROM "cars_data" WHERE "Cylinders" = 3
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;

eval_err_num:111
extra pred: SELECT MAX( Horsepower) AS largest_ Horsepower FROM ( SELECT Model, MAX(cylinders) AS max_cylinders, Edispl, Horsepower, Weight, Accelerate, Year FROM cars_data GROUP BY Model, max_cylinders ) max_cylinders_table WHERE max_cylinders = 3
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;

eval_err_num:112
hard pred: SELECT Model FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data)
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;

eval_err_num:113
hard pred: SELECT Model FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data)
hard gold: select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;

eval_err_num:114
easy pred: SELECT t1. Horsepower FROM cars_data t1 INNER JOIN model_list t2 ON t1.Model = t2.Model WHERE t1.Year = 1980 AND t2.Maker = 'Tesla'
easy gold: select avg(horsepower) from cars_data where year  <  1980;

eval_err_num:115
medium pred: SELECT t1.Edispl FROM "cars_data" t1 INNER JOIN "model_list" t2 ON t1.Model = t2.Model WHERE t2.Maker = 'Volvo'
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';

eval_err_num:116
medium pred: SELECT AVG(Edispl) FROM cars_data WHERE make = 'Volvo'
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';

eval_err_num:117
medium pred: SELECT MAX(Accelerate) AS maximum_Accelerate FROM cars_data WHERE Cylinders = ( SELECT MAX(Cylinders) FROM cars_data GROUP BY make )
medium gold: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;

eval_err_num:118
medium pred: SELECT MAX(Accelerate) FROM cars_data WHERE Cylinders in (1, 2, 3, 4, 5)
medium gold: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;

eval_err_num:119
hard pred: SELECT ModelList.Model FROM car_makers ASMaker JOIN model_list ONMaker.Model=model_list.Model JOIN countries ONMaker.Country= countries.Continent JOIN table_of_car_names ONMaker.Maker=table_of_car_names.Maker WHERE table_of_car_names.Make=('Model1', 'Model2', 'Model3') AND table_of_car_names.Make IN ('Model1', 'Model2', 'Model3') AND table_of_car_names.Country='Country1' AND table_of_car_names.Country IN ('Country2', 'Country3') AND table_of_car_names.Year='Year1' ORDER BY ModelList.Model DESC
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;

eval_err_num:120
hard pred: SELECT Maker, COUNT(DISTINCT Model) AS num_ versions FROM car_makers JOIN model_list ON Maker = Model GROUP BY Maker ORDER BY COUNT(DISTINCT Model) DESC LIMIT 1
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;

eval_err_num:121
easy pred: SELECT COUNT(DISTINCT car_names) FROM car_makers WHERE Maker = 'Tesla' AND Cylinders > 4
easy gold: SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;

easy pred: SELECT COUNT(*) FROM car_makers WHERE Maker = 'Apple'
easy gold: SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;

medium pred: SELECT COUNT(*) FROM car_makers WHERE Maker = 'American Motor Company'
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';

eval_err_num:122
medium pred: SELECT COUNT(*) AS NumCar Models FROM car_makers WHEREMaker='American Motor Company'
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';

eval_err_num:123
medium pred: SELECTMaker, ModelList.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHEREModel < 3
medium gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;

eval_err_num:124
medium pred: SELECT car_names.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(DISTINCT model_list.Model) > 3
medium gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;

eval_err_num:125
extra pred: SELECT Model FROM car_makers WHEREMaker=' General Motors' AND Model >= 3500
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;

eval_err_num:126
extra pred: SELECT Model FROM car_makers WHERE Maker = 'General Motors' OR weight > 3500
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;

easy pred: SELECT Year FROM Cars_data WHERE Weight >= 3000 AND Weight <= 4000
easy gold: select distinct year from cars_data where weight between 3000 and 4000;

easy pred: SELECT Year FROM Cars_data WHERE Weight < 4000 AND Weight > 3000
easy gold: select distinct year from cars_data where weight between 3000 and 4000;

medium pred: SELECT horsepower FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data)
medium gold: SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;

medium pred: SELECT horsepower FROM cars_data WHERE weight < (SELECT max(weight) FROM cars_data) AND accelerate > 0.5
medium gold: SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;

eval_err_num:127
extra pred: SELECT Model, Accelerate, Cylinders, Edispl, Horsepower, Weight, Year FROM "Cars_data" WHERE Model = 'volvo' ORDER BY Accelerate DESC LIMIT 1
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;

eval_err_num:128
extra pred: SELECT Model_list.Model, COUNT(*) as Numcylinders, MIN(Accelerate) as Accelerate, Edispl, Horsepower, Weight, Year FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.Id JOIN continents ON countries.ContId =continents.ContId WHERE car_makers.Maker = 'Volvo' AND model_list.Model = 'S40' ANDcontinents.ContId = 'Asia' GROUP BY Model_list.Model ORDER BY Numcylinders DESC, Accelerate DESC, Edispl DESC, Horsepower DESC,Weight DESC,Year DESC LIMIT 1
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;

eval_err_num:129
hard pred: SELECT COUNT(*) as num_cars, SUM(Accelerate) as accelerate FROM cars_data GROUP BY num_cars HAVING SUM(Accelerate) > (SELECT MAX( Horsepower) FROM cars_data)
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );

eval_err_num:130
hard pred: SELECT COUNT(*) AS num_cars FROM ( SELECT Model, COUNT(*) AS num_cylinders, MAX( Horsepower) AS max_ Horsepower FROM cars_data GROUP BY Model ) subquery WHERE Accelerate > (SELECT MAX(Accelerate) FROM subquery)
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );

eval_err_num:131
medium pred: SELECT COUNT(*) as NumCarMakers FROM car_makers WHERE Country != 'null' GROUP BY Country HAVING COUNT(*) > 2
medium gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2

eval_err_num:132
medium pred: SELECT COUNT(DISTINCT countries.CountryName) as NumCountry FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker WHERE model_list.Model != ""::text
medium gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2

eval_err_num:133
easy pred: SELECT COUNT(*) FROM cars_data WHEREcylinders>6
easy gold: SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;

eval_err_num:134
extra pred: SELECT Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN cars_data ON model_list.Model = cars_data.Id WHERE cars_data.Cylinders = 4 AND cars_data. Horsepower = ( SELECT MAX( Horsepower) FROM cars_data WHERE Cylinders = 4 )
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;

eval_err_num:135
extra pred: SELECT Model FROM car_makers WHERE id IN ( SELECT id FROM model_list WHERE Model IN ('Model 1', 'Model 2', 'Model 3', 'Model 4') GROUP BY Model HAVING COUNT(*) = (SELECT COUNT(*) FROM model_list WHERE Model = 'Model 4') )
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;

eval_err_num:136
extra pred: SELECT makeid, makename FROM cars_data WHERE Horsepower > (SELECT MIN( Horsepower) FROM cars_data) AND Cylinders <= 3
extra gold: SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;

eval_err_num:137
extra pred: SELECT MakeId, Model FROM "cars_data" WHERE Id NOT IN ( SELECT MakeId FROM "cars_data" WHERE Horsepower < 4 )
extra gold: select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;

eval_err_num:138
medium pred: SELECT MAX(mpg) FROM "cars_data" WHERE "cylinders" = 8 OR "Year" = 1980
medium gold: select max(mpg) from cars_data where cylinders  =  8 or year  <  1980

eval_err_num:139
medium pred: SELECT MAX(mpg) AS maximum_mpg FROM cars_data WHERE (Cylinders = 8 OR Year <= 1980)
medium gold: select max(mpg) from cars_data where cylinders  =  8 or year  <  1980

eval_err_num:140
extra pred: SELECT Model from model_list WHERE Model < 3500 AND Maker不等于 ' Ford Motor Company'
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';

extra pred: SELECT Model FROM model_list WHERE Model < 3500
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';

eval_err_num:141
hard pred: SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.CountryId JOIN model_list ON car_makers.Id = model_list.Maker WHERE model_list.Model not in (SELECT Model FROM cars_data)
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;

eval_err_num:142
hard pred: SELECTCountryNameFROM countries WHERE CountryId NOT IN (SELECTCountryId FROM car_makers)
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;

eval_err_num:143
extra pred: SELECT CarMaker.Id, CarMaker.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE model_list.Model > 3 GROUP BY CarMaker.Id, CarMaker.Maker HAVING COUNT(DISTINCT model_list.Model) > 2
extra gold: select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;

eval_err_num:144
extra pred: SELECT car_makers.Id, car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.Model) >= 2 && COUNT(DISTINCT car_names.Model) >= 3
extra gold: SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;

eval_err_num:145
extra pred: SELECT Country.CountryId, Country.CountryName FROM countries AS country INNER JOIN car_makers AS maker ON country.CountryId = maker.FullName INNER JOIN model_list AS model ON maker.Id = model.Maker WHERE model.Model = 'Fiat' OR (maker.Id IN (SELECT id FROM car_makers WHERE country = 'China') AND model.Maker = 'Fiat') GROUP BY Country.CountryId, Country.CountryName HAVING COUNT(DISTINCT maker.Id) > 3
extra gold: SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';

eval_err_num:146
extra pred: SELECT CountryId, CountryName FROM Countries, car_makers, model_list WHERE CountryId IN ( SELECT CountryId FROM countries GROUP BYCountryId HAVING COUNT(DISTINCT ModelList.Model) > 3 ) AND ModelList.Model = 'Fiat'
extra gold: select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';

eval_err_num:147
easy pred: SELECT country FROM airlines WHERE name = 'Jetblue Airways'
easy gold: SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"

eval_err_num:148
easy pred: The abbreviation of Airline "JetBlue Airways" is "JTB."
easy gold: SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"

eval_err_num:149
easy pred: The abbreviation for Jetblue Airways is "JBTS."
easy gold: SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"

eval_err_num:150
medium pred: SELECT airline, abbreviation FROM airports WHERE country = 'United States'
medium gold: SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"

eval_err_num:151
easy pred: SELECT COUNT(DISTINCT airline) as total_amount_of_airlines
easy gold: SELECT count(*) FROM AIRLINES

eval_err_num:152
easy pred: SELECT COUNT(*) as num_airports FROM airports
easy gold: SELECT count(*) FROM AIRPORTS

eval_err_num:153
easy pred: SELECT COUNT(*) as num_flights FROM flights WHERE airline = 'ABC Air' AND FlightNo > 0
easy gold: SELECT count(*) FROM FLIGHTS

eval_err_num:154
easy pred: SELECT COUNT(*) FROMFlights
easy gold: SELECT count(*) FROM FLIGHTS

eval_err_num:155
easy pred: SELECT airline FROM airports WHERE abbreviation = 'UAL'
easy gold: SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"

eval_err_num:156
easy pred: SELECT COUNT(DISTINCT airline) AS num_airlines FROM airlines
easy gold: SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"

medium pred: SELECT City,Country FROM airports WHERE AirportCode = 'A Alton'
medium gold: SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"

medium pred: SELECT City,Country FROM airports WHERE AirportCode = 'Alton'
medium gold: SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"

easy pred: SELECT AirportCode, AirportName FROM airports WHERE City = 'Aberdeen'
easy gold: SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"

eval_err_num:157
easy pred: SELECT COUNT(DISTINCT flight.Airline) AS NumOfFlights FROM Flight INNER JOIN airports ON flight.SourceAirport = airports.AirportCode WHERE机场Code = 'APG'
easy gold: SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"

eval_err_num:158
easy pred: SELECT COUNT(DISTINCT Airline) AS NumOfFlights INTO ATO FROM Flights
easy gold: SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"

medium pred: SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'New York City'
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"

eval_err_num:159
medium pred: SELECT COUNT(*) AS num_flights FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'New York'
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"

eval_err_num:160
medium pred: SELECT COUNT(*) FROMFlights WHERESourceAirport = 'Aberdeen City' AND DestAirport = 'Aberdeen City'
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"

eval_err_num:161
medium pred: SELECT COUNT(DISTINCTDISTINCT airline) AS NumOfFlightsArrivingInAberdeen FROM Flights
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"

eval_err_num:162
hard pred: SELECT COUNT(DISTINCT flights.Airline) AS NumOfFlights FROM Flights INNER JOIN airports ON flights.Airline = airports.AirlineCode INNER JOIN airports ON airports.AirportCode = Flights.SourceAirport INNER JOIN airports ON airports.AirportCode = flights.DestAirport WHERE airports.City = 'Aberdeen' AND airports. destCity = 'Ashley'
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"

hard pred: SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"

medium pred: SELECT COUNT(DISTINCT FlightNo) FROM Flights WHERE Airline = 'JetBlue Airways'
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"

eval_err_num:163
medium pred: SELECT COUNT(*) FROM flights WHERE airlines = 'Jetblue Airways'
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"

eval_err_num:164
medium pred: SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND AirportCode = 'ASY'
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"

eval_err_num:165
medium pred: SELECT COUNT(*) AS NumOfFlights FROMFlights WHERE SourceAirport = 'ASY' AND DestAirport = 'ASY'
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"

eval_err_num:166
medium pred: SELECT COUNT(*) as Num FROM airlines WHERE airline = 'United Airlines' AND airport = 'AHD'
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"

eval_err_num:167
medium pred: SELECT COUNT(*) AS num_UA_flights FROM flights WHERE airlines = 'UA' AND SourceAirport = 'AHD'
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"

eval_err_num:168
hard pred: SELECT COUNT(*) FROM flights AS t1 join airports AS a1 on t1.AirportCode = a1.AirportCode AND t1.City = 'Aberdeen'
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"

eval_err_num:169
hard pred: SELECT COUNT(*) AS num_UA_ flights_arriving_ Aberdeen FROM flights WHERE airline = 'UA' AND destAirport = 'Aberdeen'
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"

eval_err_num:170
extra pred: SELECT City FROM Flights GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1

eval_err_num:171
extra pred: SELECT City FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE country = 'United States') ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1

eval_err_num:172
extra pred: SELECT City FROM flights GROUP BY City HAVING COUNT(*) > 1
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1

eval_err_num:173
extra pred: SELECT City as most_ frequent_source_Airport FROM flights GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1

eval_err_num:174
extra pred: SELECT AirportCode FROM Flights WHERE FlightNo = ( SELECT MAX(FlightNo) FROM Flights )
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1

eval_err_num:175
extra pred: SELECT AirportCode FROM Flights WHERE FlightNo > 1
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1

eval_err_num:176
extra pred: SELECT AirportCode FROM Flights WHERE FlightNo IN (SELECTFlightNo FROM Flights WHERE AirportCode = (SELECT AirportCode FROM airports)) GROUP BY AirportCode HAVING COUNT(*) = (SELECT COUNT(*) FROMFlights WHEREAirportCode = (SELECT AirportCode FROM airports))
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1

eval_err_num:177
extra pred: SELECT AirportCode FROM Flights GROUP BY AirportCode ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1

extra pred: SELECT airline FROM Flights GROUP BY airline HAVING COUNT(*) > (SELECT COUNT(*) FROM Flights)
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1

eval_err_num:178
extra pred: SELECT AIRLINE AS 'Airline' FROM 'flights' GROUP BY AIRLINE ORDER BY COUNT(*) DESC
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1

eval_err_num:179
extra pred: SELECT airline, country FROM flights WHERE flightNo IN ( SELECT flightNo FROM flights GROUP BY airline, country ORDER BY COUNT(*) DESC LIMIT 1 )
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1

eval_err_num:180
extra pred: SELECT airline.Abbreviation, Airports.CountryAbbrev, COUNT(*) as num_flights FROM airlines INNER JOIN airports ON airlines.uid = airports.uid GROUP BY airline.Abbreviation, airports.CountryAbbrev HAVING COUNT(*) < (SELECT COUNT(*) FROM flights)
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1

medium pred: SELECT airline FROM flights WHERE SourceAirport = 'AHD'
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"

medium pred: SELECT airline FROM flights WHERE SourceAirport = 'AHD'
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"

eval_err_num:181
medium pred: SELECT airline FROM airports WHERE AirportCode = 'AHD'
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"

eval_err_num:182
medium pred: SELECT airline FROM airlines JOIN airports ON airlines.uid = airports.uid WHERE airports.AirportCode = 'AHD'
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"

eval_err_num:183
extra pred: SELECT Airlines.uid FROM Airlines INNER JOIN airports ON Airlines.uid = airports.uid INNER JOIN Flights ON airports.AirportCode = Flights.SourceAirport INNER JOIN Flights ON airlines.AirportCode = Flights.DestAirport WHERE airports.AirportCode = 'APG' AND Flights. FlightNo = '123'
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"

eval_err_num:184
extra pred: SELECT airline FROM airports WHERE AirportCode = 'APG' AND AirportCode = 'CVO'
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"

eval_err_num:185
extra pred: SELECT airline FROM flights WHERE SourceAirport = 'CVO' AND DestAirport NOT IN ('APG', 'CVO')
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"

eval_err_num:186
extra pred: SELECT airline FROM airlines WHERE uid NOT IN (SELECT uid FROM airports WHERE AirportCode = 'APG')
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"

eval_err_num:187
medium pred: SELECT airline FROM flights GROUP BY airlineHAVING COUNT(DISTINCT FlightNo) >= 10
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10

eval_err_num:188
medium pred: SELECT airline FROM flights GROUP BY airlineHAVING COUNT(DISTINCT flightNo) >= 10
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10

eval_err_num:189
medium pred: SELECT airline FROM airlines WHEREuid NOT IN ( SELECT uid FROM airports GROUP BY uid HAVING COUNT(*) <= 200 )
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200

eval_err_num:190
medium pred: SELECT airline FROM airlines WHERE uid NOT IN ( SELECT uid FROM flights GROUP BY airline HAVING COUNT( FlightNo) <= 200 )
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200

medium pred: SELECT FlightNo FROM flights WHERE airline = 'United Airlines'
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"

eval_err_num:191
medium pred: SELECT FlightNo FROM Flights WHERE Airlines = 'United Airlines' AND FlightNo > 0
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"

easy pred: SELECT flightNo FROM flights WHERE SourceAirport = 'APG' AND DestAirport = 'LAX'
easy gold: SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"

easy pred: SELECT FlightNo FROM flights WHERE SourceAirport = 'APG' AND DestAirport = 'LAX'
easy gold: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"

medium pred: SELECT FlightNo FROM flights WHERE SourceAirport = 'Aberdeen'
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"

medium pred: SELECT FlightNo FROM Flights WHERE SourceAirport = 'Aberdeen'
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"

eval_err_num:192
medium pred: SELECTFlightNo FROMFlights WHERECity='Aberdeen' AND目的地机场='Aberdeen' ANDSource机场='Aberdeen'
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"

medium pred: SELECT FlightNo FROM flights WHERE DestAirport = 'Aberdeen'
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"

hard pred: SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' OR DestAirport = 'Aberdeen'
hard gold: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"

hard pred: SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' OR DestAirport = 'Aberdeen'
hard gold: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"

eval_err_num:193
hard pred: SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT AirportCode FROM flights)
hard gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)

eval_err_num:194
hard pred: SELECT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT AirportCode FROM flights WHERE flightNo > 0)
hard gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)

easy pred: SELECT Name, Age FROM employee ORDER BY Age DESC, Name ASC
easy gold: SELECT name FROM employee ORDER BY age

easy pred: SELECT Name, Age FROM employee ORDER BY Age ASC
easy gold: SELECT name FROM employee ORDER BY age

eval_err_num:195
medium pred: SELECT employee.City, COUNT(*) as Num_Employees FROM employee JOIN shop ON employee.Employee_ID = shop.Employee_ID JOINhiring ON employee.Employee_ID = hiring.Employee_ID GROUP BY employee.City ORDER BY Num_Employees DESC
medium gold: SELECT count(*) ,  city FROM employee GROUP BY city

eval_err_num:196
medium pred: SELECT city, COUNT(*) as num_employees FROM employee GROUP BY city
medium gold: SELECT count(*) ,  city FROM employee GROUP BY city

medium pred: SELECT City FROM employee GROUP BY City HAVING COUNT(DISTINCT Employee_ID) > 1
medium gold: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1

medium pred: SELECT City FROM employee WHERE Employee_ID < 30 GROUP BY City HAVING COUNT(DISTINCT Employee_ID) > 1
medium gold: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1

eval_err_num:197
medium pred: SELECT location, COUNT(*) AS num_shops FROM "shop" GROUP BY location ORDER BY location
medium gold: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION

eval_err_num:198
medium pred: SELECT location, COUNT(*) as num_shops FROM "shop" GROUP BY location ORDER BY location, COUNT(*) DESC
medium gold: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION

eval_err_num:199
medium pred: SELECT Manager_name, District FROM "shop" ORDER BY Number_products DESC LIMIT 1
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1

eval_err_num:200
medium pred: SELECT manager_name, District FROM `shop` WHERE Shop_ID = ( SELECT Shop_ID FROM `hiring` ORDER BY Number_products DESC LIMIT 1 )
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1

eval_err_num:201
medium pred: SELECT s.Shop_ID, MAX(s.Number_products) as Max_products, MIN(s.Number_products) as Min_products FROM "shop" s GROUP BY s.Shop_ID
medium gold: SELECT min(Number_products) ,  max(Number_products) FROM shop

eval_err_num:202
medium pred: SELECT s.Name, MIN(s.Number_products) AS minimum_products, MAX(s.Number_products) AS maximum_products FROM "shop" s GROUP BY s.Name
medium gold: SELECT min(Number_products) ,  max(Number_products) FROM shop

eval_err_num:203
medium pred: SELECT Shop.Name, Shop.Location, Shop.District FROM Shop JOINhiring ON Shop.Shop_ID =hiring.Shop_ID JOINemployee ONShop.Shop_ID =employee.Shop_ID ORDER BY Number_products DESC
medium gold: SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC

eval_err_num:204
medium pred: SELECT Shop_ID, Name, Location, District FROM "shop" ORDER BY Number_products DESC
medium gold: SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC

eval_err_num:205
hard pred: SELECT s.Name FROM shop s WHERE s.Number_products > (SELECT AVG(Number_products) FROM shop)
hard gold: SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)

eval_err_num:206
hard pred: SELECT Shop_ID FROM "shop" WHERE "Number_products" > (SELECT AVG("Number_products") FROM "shop")
hard gold: SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)

eval_err_num:207
extra pred: SELECT employee.Name FROM employee JOINshop ON employee.Employee_ID =shop.Shop_ID JOINhiring ONshop.Shop_ID =hiring.Shop_ID JOINevaluation ONemployee.Employee_ID = Evaluation.Employee_ID GROUP BY Evaluation.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1

eval_err_num:208
extra pred: SELECT Employee.Name as EmployeeName FROM employee JOIN shop ON employee.Employee_ID = shop.Employee_ID JOIN hiring ON shop.Shop_ID = hiring.Shop_ID JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Year_awarded = ( SELECT MAX(Year_awarded) FROM evaluation ) ORDER BY evaluation.Year_awarded DESC
extra gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1

hard pred: SELECT Employee_ID FROM evaluation ORDER BY Bonus DESC LIMIT 1
hard gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1

hard pred: SELECT Employee_ID FROM evaluation WHERE Year_awarded = '2022'
hard gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1

hard pred: SELECT Name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation WHERE Year_awarded = '2022' )
hard gold: SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)

eval_err_num:209
extra pred: SELECT t1.Name AS Shop_Name FROM "shop" t1 INNER JOIN "hiring" t2 ON t1.Shop_ID = t2.Shop_ID GROUP BY t1.Name ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:210
extra pred: SELECT t1.Name AS Shop_Name FROM "shop" t1 JOIN "hiring" t2 ON t1.Shop_ID = t2.Shop_ID JOIN "employee" t3 ON t2.Employee_ID = t3.Employee_ID GROUP BY t1.Name ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:211
hard pred: SELECT t1.Name FROM "shop" t1 WHERE t1.Shop_ID NOT IN ( SELECT Shop_ID FROM "hiring" WHERE Employee_ID IS NULL )
hard gold: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)

eval_err_num:212
hard pred: SELECT t1.Name FROM "shop" t1 WHERE t1.Shop_ID = ( SELECT Shop_ID FROM "hiring" WHERE NOT EXISTS ( SELECT * FROM "employee" e WHERE e.Employee_ID = hiring.Employee_ID AND t1.Name = e.Name ) )
hard gold: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)

eval_err_num:213
medium pred: SELECT Shop_ID, COUNT(*) AS Num_Employees FROMHiring GROUP BY Shop_ID ORDER BY Num_Employees DESC
medium gold: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name

eval_err_num:214
medium pred: SELECT shop.Name, COUNT(*) AS Num_Employees FROM shop GROUP BY shop.Name
medium gold: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name

eval_err_num:215
easy pred: SELECT SUM(Bonus) AS total_ Bonus FROM evaluation
easy gold: SELECT sum(bonus) FROM evaluation

eval_err_num:216
easy pred: SELECT SUM( Bonus ) AS total_bonus FROM evaluation GROUP BY Employee_ID
easy gold: SELECT sum(bonus) FROM evaluation

eval_err_num:217
hard pred: SELECT district FROM "shop" WHERE (SELECT COUNT(*) FROM "shop" WHEREShop_ID<3000) AND (SELECT COUNT(*) FROM "shop" WHEREShop_ID>10000)
hard gold: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000

eval_err_num:218
hard pred: SELECT District FROM "shop" WHERE (SELECT COUNT(*) FROM "shop" WHERE Shop_ID <= 3000 AND Name = 'Shop Name') > 0 AND (SELECT COUNT(*) FROM "shop" WHERE Shop_ID >= 10000 AND Name = 'Shop Name') > 0
hard gold: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000

eval_err_num:219
easy pred: SELECT COUNT(DISTINCT `Location`) AS `Different_store_locations` FROM `shop`
easy gold: SELECT count(DISTINCT LOCATION) FROM shop

eval_err_num:220
easy pred: SELECT COUNTDISTINCT ("Location") AS distinct_store_locations FROM "shop"
easy gold: SELECT count(DISTINCT LOCATION) FROM shop

eval_err_num:221
easy pred: SELECT COUNT(*) AS num_documents FROM Documents
easy gold: SELECT count(*) FROM Documents

easy pred: SELECT COUNT(DISTINCT Template_Type_Code) FROM Templates
easy gold: SELECT count(DISTINCT template_id) FROM Documents

eval_err_num:222
easy pred: SELECT COUNT(DISTINCT Template_Type_Code) AS Number_of_templates FROM Templates WHERE Template_Type_Code IN ( SELECTTemplate_Type_Code FROM Ref_Template_Types )
easy gold: SELECT count(DISTINCT template_id) FROM Documents

eval_err_num:223
medium pred: SELECT COUNT(*) FROM Documents WHERE Template_Type_Code = 'PPT'
medium gold: SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'

eval_err_num:224
medium pred: SELECT COUNT(*) FROM Documents WHERE Template_Type_Code = 'PPT'
medium gold: SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'

eval_err_num:225
medium pred: SELECT Document_ID, COUNT(*) AS Num_Times FROM Templates WHERE Template_Type_Code = 'document' GROUP BY Document_ID
medium gold: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id

eval_err_num:226
extra pred: SELECT Template_ID,Template_Type_Code FROM Templates WHEREVERSION_Number = ( SELECT COUNT(*) FROM documents WHERETemplate_ID IN ( SELECTTemplate_ID FROM Paragraphs ) ) AND Date_Effective_To >=当前日期
extra gold: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:227
extra pred: SELECTTemplate_ID,Template_Type_Code FROM( SELECTTemplate_ID,Count(*) as Num_Docs,AVG(Template_Type_Code) as Average_Type_Code FROMDocuments GROUP BYTemplate_ID,Template_Type_Code )Template_Numbers GROUP BYTemplate_ID,Template_Type_Code ORDER BYNum_Docs DESC LIMIT 1
extra gold: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:228
easy pred: SELECT Template_ID FROM Templates WHERETemplate_ID IN ( SELECTTemplate_ID FROM Documents GROUP BYTemplate_ID HAVING COUNT(DISTINCT Document_ID) > 1 )
easy gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1

easy pred: SELECT Template_ID FROM Templates WHERE Version_Number > 1 AND Date_Effective_From >= '2022-01-01' AND Date_Effective_To <= '2022-01-01'
easy gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1

eval_err_num:229
hard pred: SELECTTemplate_ID FROMTemplates WHERETemplate_ID NOT IN ( SELECTTemplate_ID FROMDocuments GROUP BYTemplate_ID HAVING COUNT(*) = 0 )
hard gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents

eval_err_num:230
hard pred: SELECTTemplate_IDFROMDocumentsWHERETemplate_ID NOT IN (SELECTTemplate_IDFROMTemplates)
hard gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents

medium pred: SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates GROUP BY Template_ID, Version_Number, Template_Type_Code
medium gold: SELECT template_id ,  version_number ,  template_type_code FROM Templates

eval_err_num:231
medium pred: SELECTTemplate_ID,Version_Number,Template_Type_Code FROMTemplates GROUP BYTemplate_ID,Version_Number,Template_Type_Code
medium gold: SELECT template_id ,  version_number ,  template_type_code FROM Templates

eval_err_num:232
easy pred: SELECT DISTINCTTemplate_Type_CodeFROMTemplates
easy gold: SELECT DISTINCT template_type_code FROM Templates

easy pred: SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code = 'Template1'; SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code = 'Template2'; SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code = 'Template3'
easy gold: SELECT DISTINCT template_type_code FROM Templates

eval_err_num:233
medium pred: SELECTTemplate_ID FROMTemplate WHERETemplate_Type_Code='PP' ORTemplate_Type_Code='PPT'
medium gold: SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"

eval_err_num:234
easy pred: SELECT COUNT(*) FROM Templates WHERETemplate_Type_Code='CV'
easy gold: SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"

eval_err_num:235
medium pred: SELECTTemplate_Type_Code, COUNT(*)FROM TemplatesGROUP BYTemplate_Type_Code
medium gold: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code

eval_err_num:236
hard pred: SELECTTemplate_Type_Code FROMRef_Template_Types GROUP BYTemplate_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1

eval_err_num:237
hard pred: SELECTTemplate_Type_CodeFROMtemplatesGROUP BYTemplate_Type_CodeORDER BY COUNT(*) DESCLIMIT 1
hard gold: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1

eval_err_num:238
easy pred: SELECTTemplate_Type_Code FROMRef_Template_Types WHERETemplate_Type_Code < 3
easy gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3

eval_err_num:239
easy pred: SELECTTemplate_Type_CodeFROMRef_Template_TypesWHERETemplate_Type_Code < 3
easy gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3

eval_err_num:240
medium pred: The smallest version number and its template type code is 1. The Template_Type_Code column has a type of CHAR(15), and the default character set is ASCII. The default version number is also 1. The Templates table has the following columns: - Template_ID: INTEGER NOT NULL PRIMARY KEY - Version_Number: INTEGER NOT NULL - Template_Type_Code: CHAR(15) NOT NULL - Date_Effective_From: DATETIME NOT NULL - Date_Effective_To: DATETIME NOT NULL - Template_Details: VARCHAR(255) NOT NULL In this table, the version number is always 1, and the template type code is always CHAR(15).
medium gold: SELECT min(Version_Number) ,  template_type_code FROM Templates

medium pred: SELECT Template_ID, Template_Type_Code FROM Templates ORDER BY Version_Number DESC LIMIT 1
medium gold: SELECT min(Version_Number) ,  template_type_code FROM Templates

eval_err_num:241
medium pred: SELECTTemplate_Type_CodeFROMDocumentsWHEREDocument_Name='Data base'
medium gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"

eval_err_num:242
medium pred: SELECT Template_Type_Code FROM Templates WHERE Template_Name = 'Data base'
medium gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"

eval_err_num:243
medium pred: SELECT Document_Name FROM Documents WHERETemplate_Type_Code=' BK'
medium gold: SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"

eval_err_num:244
medium pred: SELECT Document_Name FROM Documents WHERE Template_Type_Code = ' BK'
medium gold: SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"

eval_err_num:245
medium pred: SELECT t.Template_Type_Code, COUNT(*) AS Num_Documents FROM Templates t JOIN Ref_Template_Types t1 ON t.Template_Type_Code = t1.Template_Type_Code GROUP BY t.Template_Type_Code
medium gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code

eval_err_num:246
medium pred: SELECTTemplate_Type_Code, COUNT(*)FROMDocumentsWHERETemplate_Type_CodeIN( SELECTTemplate_Type_Code FROMRef_Template_Types )
medium gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code

eval_err_num:247
extra pred: SELECTTemplate_Type_CodeFROMDocumentsORDER BYCOUNT(*) DESCLIMIT1
extra gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1

eval_err_num:248
extra pred: SELECTTemplate_Type_CodeFROMRef_Template_TypesWHERETemplate_Type_Description='CommonTemplate'
extra gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1

eval_err_num:249
hard pred: SELECTTemplate_Type_CodeFROMRef_Template_TypesWHERETemplate_Type_CodeNOT IN( SELECTTemplate_Type_CodeFROMDocuments )
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id

eval_err_num:250
hard pred: SELECT Template_Type_Code FROM Ref_Template_Types WHERETemplate_Type_Code NOT IN ( SELECTTemplate_Type_Code FROM Templates WHERETemplate_ID IS NULL )
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id

eval_err_num:251
medium pred: SELECTTemplate_Type_Code,Template_Type_DescriptionFROMRef_Template_Types
medium gold: SELECT template_type_code ,  template_type_description FROM Ref_template_types

eval_err_num:252
easy pred: SELECT t1.Template_Type_Description FROM Ref_Template_Types t1 INNER JOIN Templates t2 ON t1.Template_Type_Code = t2.Template_Type_Code AND t1.Version_Number = t2.Version_Number AND t1.Date_Effective_From <= t2.Date_Effective_To
easy gold: SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"

eval_err_num:253
easy pred: SELECT t1.Template_Type_Description FROM Ref_Template_Types t1 INNER JOIN Templates t2 ON t1.Template_Type_Code = t2.Template_Type_Code AND t2.Template_ID = t1.Template_ID INNER JOIN Documents d1 ON t2.Template_Type_Code = d1.Template_Type_Code AND d1.Template_ID = t2.Template_ID INNER JOIN Paragraphs p1 ON d1.Document_ID = p1.Document_ID WHERE t1.Template_Type_Code = 'AD'
easy gold: SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"

eval_err_num:254
easy pred: The template type code for template type description "Book" is "Book."
easy gold: SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"

eval_err_num:255
easy pred: SELECT Template_Type_Code FROM Ref_Template_Types WHERETemplate_Type_Description='Book'
easy gold: SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"

eval_err_num:256
medium pred: SELECT DISTINCT t.Template_Type_Description FROM Templates t INNER JOIN Ref_Template_Types t1 ON t.Template_Type_Code = t1.Template_Type_Code INNER JOIN documents d ON t.Template_ID = d.Template_ID WHERE d.Document_Name IS NOT NULL
medium gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID

eval_err_num:257
medium pred: SELECT t.Template_Type_Description FROM Ref_Template_Types t INNER JOIN Templates t1 ON t.Template_Type_Code = t1.Template_Type_Code INNER JOIN Documents d ON t1.Template_ID = d.Template_ID INNER JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_ID = 1
medium gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID

eval_err_num:258
medium pred: SELECTTemplate_IDFROMTemplatesWHERETemplate_Type_Description='Presentation'
medium gold: SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"

eval_err_num:259
medium pred: SELECT Templates.Template_ID FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code INNER JOIN Document ON Templates.Template_ID = Document.Template_ID WHERE Document.Template_Type_Description = 'Presentation'
medium gold: SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"

eval_err_num:260
easy pred: SELECT COUNT(*) AS total_paragraphs FROM Paragraphs
easy gold: SELECT count(*) FROM Paragraphs

eval_err_num:261
medium pred: SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID INNER JOIN Ref_Template_Types ON Paragraphs.Template_ID = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Name = 'Summer Show'
medium gold: SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'

eval_err_num:262
medium pred: SELECT COUNT(*) FROM Paragraphs WHERE Document_Name = 'Summer Show'
medium gold: SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'

eval_err_num:263
medium pred: SELECT Paragraphs.Paragraph_Text, Paragraphs.Other_Details FROM Paragraphs INNER JOIN Document ON Paragraphs.Document_ID = Document.Document_ID INNER JOIN Ref_Template_Types ON Document.Template_ID = Ref_Template_Types.Template_ID WHERE Paragraphs.Paragraph_Text = 'Korea '
medium gold: select other_details from paragraphs where paragraph_text like 'korea'

eval_err_num:264
medium pred: SELECT Paragraphs.Paragraph_Text, Paragraphs.Other_Details FROM Paragraphs INNER JOIN Ref_Template_Types ON Paragraphs.Paragraph_Text = Ref_Template_Types.Template_Type_Code INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Paragraphs.Document_ID = ( SELECT Document_ID FROM Documents WHERE Paragraph_Text = 'Korea' )
medium gold: select other_details from paragraphs where paragraph_text like 'korea'

eval_err_num:265
medium pred: SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID JOIN Ref_Template_Types ON Paragraphs.Template_ID = Ref_Template_Types.Template_Type_Code WHERE Document_Name = 'Welcome to NY'
medium gold: SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'

eval_err_num:266
medium pred: SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID JOIN Ref_Template_Types ON Paragraphs.Template_ID = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Name = 'Welcome to NY' AND Ref_Template_Types.Template_Type_Description = 'Template for welcome message'
medium gold: SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'

eval_err_num:267
medium pred: SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID JOIN Ref_Template_Types ON Paragraphs.Template_ID = Ref_Template_Types.Template_Type_Code WHERE Document_Name = 'Customer reviews' AND Template_Type_Code = 'C'
medium gold: SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"

eval_err_num:268
medium pred: SELECT Document_ID, COUNT(*) as Num_Paragraphs FROM Documents GROUP BY Document_ID ORDER BY Document_ID
medium gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id

eval_err_num:269
medium pred: SELECT Document_ID, COUNT(*) as Num_Paragraphs FROM Documents GROUP BY Document_ID ORDER BY Document_ID
medium gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id

eval_err_num:270
medium pred: SELECT Document_ID, Document_Name, COUNT(*) AS Num_Paragraphs FROM Documents GROUP BY Document_ID, Document_Name
medium gold: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id

eval_err_num:271
medium pred: SELECT Document_ID, Document_Name, COUNT(*) as Num_Paragraphs FROM Documents GROUP BY Document_ID, Document_Name
medium gold: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id

eval_err_num:272
easy pred: SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING COUNT(DISTINCT Paragraph_ID) >= 2
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2

easy pred: SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(DISTINCT Paragraph_ID) > 1
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2

eval_err_num:273
extra pred: SELECT Document_ID, Document_Name FROM Paragraphs GROUP BY Document_ID, Document_Name ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:274
extra pred: SELECT Document_ID, Document_Name FROM Documents WHERE Template_ID = ( SELECT Template_ID FROM Paragraphs ORDER BY Paragraph_Count DESC LIMIT 1 )
extra gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1

hard pred: SELECT Document_ID FROM Paragraphs WHERE Paragraph_ID IN (SELECT Paragraph_ID FROM Paragraphs GROUP BY Paragraph_ID HAVING COUNT(*) <= 1)
hard gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1

hard pred: SELECT Document_ID FROM Paragraphs WHERE Paragraph_ID IN (SELECT Paragraph_ID FROM Paragraphs ORDER BY Paragraph_ID DESC LIMIT 1)
hard gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1

eval_err_num:275
easy pred: SELECT Document_ID FROM Paragraphs WHERE Paragraph_Count >= 2
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2

eval_err_num:276
easy pred: SELECT Document_ID FROM Documents WHERE Paragraph_ID >= 1 AND Paragraph_ID <= 2
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2

hard pred: SELECT Document_ID, Paragraph_Text FROM Paragraphs WHERE Paragraph_Text = 'Brazil' AND Paragraph_Text = ' Ireland'
hard gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'

hard pred: SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil' OR Paragraph_Text = 'Ireland'
hard gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'

easy pred: SELECT * FROM teacher WHERE teacher_id = 1
easy gold: SELECT count(*) FROM teacher

eval_err_num:277
easy pred: The total count of teachers is 50.
easy gold: SELECT count(*) FROM teacher

easy pred: SELECT Name FROM teacher ORDER BY Age DESC
easy gold: SELECT Name FROM teacher ORDER BY Age ASC

eval_err_num:278
medium pred: SELECT t.Name, t.Age, t.Hometown FROM teacher t JOIN course_arrange c ON t.Teacher_ID = c.Teacher_ID JOIN course ON c.Course_ID = t.Course_ID WHERE t.Name = 'Alice' AND t.Hometown = '是北京'
medium gold: SELECT Age ,  Hometown FROM teacher

eval_err_num:279
medium pred: SELECT Teacher_ID, Age, Hometown FROM course INNER JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID GROUP BY Teacher_ID, Age, Hometown HAVING COUNT(DISTINCT Name) > 1
medium gold: SELECT Age ,  Hometown FROM teacher

medium pred: SELECT Name FROM teacher WHERE Age >= 32 AND Age <= 34
medium gold: SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33

eval_err_num:280
medium pred: The hometown of the youngest teacher in the "teacher" table is "Newcastle".
medium gold: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1

eval_err_num:281
medium pred: SELECT * FROM `teacher` WHERE Age = (SELECT MIN(Age) FROM `teacher`)
medium gold: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1

eval_err_num:282
medium pred: SELECT t1.Hometown, COUNT(*) as Num_Teachers FROM teacher t1 INNER JOIN course_arrange t2 ON t1.Teacher_ID = t2.Teacher_ID GROUP BY t1.Hometown ORDER BY Num_Teachers DESC
medium gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown

eval_err_num:283
medium pred: SELECT hometown, COUNT(*) as total_teachers FROM "teacher" GROUP BY hometown ORDER BY total_teachers DESC
medium gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown

eval_err_num:284
hard pred: SELECT hometown FROM "teacher" GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:285
easy pred: SELECT t1.Hometown FROM "teacher" t1 JOIN "teacher" t2 ON t1.Teacher_ID = t2.Teacher_ID AND t1.Hometown = t2.Hometown GROUP BY t1.Hometown HAVING COUNT(DISTINCT t2.Hometown) >= 2
easy gold: SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2

eval_err_num:286
easy pred: SELECT t1.Hometown FROM "teacher" t1 JOIN "course_arrange" t2 ON t1.Teacher_ID = t2.Teacher_ID AND t1.Course_ID = t2.Course_ID WHERE t2.Grade > 0 GROUP BY t1.Hometown HAVING COUNT(DISTINCT t1.Name) > 2
easy gold: SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2

eval_err_num:287
medium pred: SELECT Name, Course_Arrange FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID
medium gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID

eval_err_num:288
medium pred: SELECT name, Course_ID FROM teacher GROUP BY name, Course_ID ORDER BY Course_ID DESC
medium gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID

eval_err_num:289
hard pred: SELECT t.Name, c.Course FROM teacher t JOIN course_arrange c ON t.Teacher_ID = c.Teacher_ID ORDER BY t.Name ASC
hard gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name

eval_err_num:290
hard pred: SELECT t.Name, c.Course FROM "teacher" t JOIN "course" c ON t.Teacher_ID = c.Course_ID ORDER BY t.Name ASC
hard gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name

eval_err_num:291
hard pred: SELECT Name FROM teacher WHERETeacher_ID IN (SELECT Teacher_ID FROM course_arrange WHERE Course_ID = 1)
hard gold: SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"

hard pred: SELECT Name FROM teacher WHERE Teacher_ID = ( SELECT Teacher_ID FROM course_arrange WHERE Course_ID = 'Math' )
hard gold: SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"

eval_err_num:292
medium pred: SELECT t1.Name, COUNT(c1.Course_ID) as Num_Courses FROM teacher t1 LEFT JOIN course_arrange c1 ON t1.Teacher_ID = c1.Teacher_ID GROUP BY t1.Name
medium gold: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name

eval_err_num:293
medium pred: SELECT Name, COUNT(*) AS Course_Count FROM teacher WHERETeacher_ID IN (SELECT Teacher_ID FROM course_arrange) GROUP BY Name
medium gold: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name

eval_err_num:294
medium pred: SELECT name FROM `teacher` WHERETeacher_ID IN (SELECT Teacher_ID FROM `course_arrange` GROUP BY Teacher_IDHAVING COUNT(*) >= 2)
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2

medium pred: SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange WHERE Course_ID >= 2)
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2

eval_err_num:295
easy pred: SELECT COUNT(*) FROM "visit" WHERE "Age" < 30
easy gold: SELECT count(*) FROM visitor WHERE age  <  30

eval_err_num:296
medium pred: SELECT name FROM "visitor" WHERE level_of_ membership > 4 ORDER BY level_of_ membership
medium gold: SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC

eval_err_num:297
easy pred: SELECT AVG(Age) FROM "visit" WHERE "Level_of_ membership" <= 4
easy gold: SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4

eval_err_num:298
medium pred: SELECT name, Level_of_ membership FROM "visitor" WHERE Level_of_ Membership > 4 ORDER BY Age
medium gold: SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC

eval_err_num:299
medium pred: SELECT Museum.museum_ID, Museum.Name FROM museum JOIN visit ON Museum.museum_ID = visit. Museum_ID JOIN visitors ON visit.访客_ID = visitors.ID GROUP BY Museum.museum_ID, Museum.Name ORDER BY COUNT(*) DESC LIMIT 1
medium gold: SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1

eval_err_num:300
easy pred: SELECT AVG(Num_of_Staff) FROM "museum" WHERE Open_Year早于2009
easy gold: SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009

eval_err_num:301
medium pred: SELECT Museum_ID, Open_Year, Num_of_ Staff FROM museum WHERE Name = ' Plaza Museum'
medium gold: SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'

eval_err_num:302
hard pred: SELECT Museum.Name FROM "museum" AS Museum INNER JOIN "visit" AS Visit ON Museum.Num_of_ Staff > (SELECT MIN(Num_of_ Staff) FROM "visit") GROUP BY Museum.Name HAVING COUNT(DISTINCT Visit.ID) > 1
hard gold: SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)

eval_err_num:303
medium pred: SELECT Visitor.ID, Visitor.Name, Visitor.Age FROM visitors INNER JOIN visit ON visitors.ID = visit.visitor_ID INNER JOIN museum ON visit.Museum_ID = museum. Museum_ID WHERE museum. Museum_ID IN ( SELECT Museum_ID FROM museum GROUP BY Museum_ID HAVING COUNT(DISTINCT Museum_ID) > 1 )
medium gold: SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1

eval_err_num:304
extra pred: SELECT Museum.ID, Museum.Name, Level_of_membership, AVG(Total_spent) FROM "museum" AS Museum INNER JOIN "visit" AS V ON Museum.museum_ID = V. Museum_ID INNER JOIN "visitor" AS W ON V.ID = W.visitor_ID GROUP BY Museum. Museum_ID, Museum.Name, Level_of_membership HAVING AVG(Total_spent) > (SELECT AVG(Total_spent) FROM "visit" WHERE Museum_ID = Museum. Museum_ID)
extra gold: SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1

eval_err_num:305
extra pred: SELECT Museum.Museum_ID, Museum.Name FROM Museum JOIN Visitor ON Museum. Museum_ID = Visitor. Museum_ID JOIN Visit ON Visitor.ID = Visit.visitor_ID GROUP BY Museum. Museum_ID, Museum.Name ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1

eval_err_num:306
hard pred: SELECT Museum.Name FROM Museum WHERE Museum.ID NOT IN (SELECT visitor.ID FROM visitor)
hard gold: SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)

eval_err_num:307
hard pred: SELECT visitor.Name, visitor.Age, Museum.Num_of_Ticket FROM visitors INNER JOIN visits ON visitors.ID = visit.visitor_ID INNER JOIN Museum ON visit. Museum_ID = Museum. Museum_ID GROUP BY visitors.ID, visitors.Name, visitors.Age ORDER BY Museum.Num_of_Ticket DESC LIMIT 1
hard gold: SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1

eval_err_num:308
medium pred: SELECT AVG(Num_of_Ticket) AS avg_ticket, MAX(Num_of_Ticket) AS max_ticket FROM "visit" GROUP BY " Museum_ID"
medium gold: SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit

eval_err_num:309
medium pred: SELECT t2.Total_spent FROM "visit" t1 JOIN "museum" t2 ON t1. Museum_ID = t2. Museum_ID AND t1.visitor_ID = t2. ID AND t2.Level_of_membership = 1
medium gold: SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1

eval_err_num:310
extra pred: SELECT visitor.Name FROM museum JOIN visit ON museum. Museum_ID = visit. Museum_ID WHERE Museum_ID >= 2009 AND Museum_ID <= 2011
extra gold: SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011

eval_err_num:311
extra pred: SELECT COUNT(*) AS num_of_ Visitors FROM "visit" WHERE " Museum_ID" NOT IN ( SELECT " Museum_ID" FROM "museum" WHERE "Open_Year" >= 2010 )
extra gold: SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)

eval_err_num:312
medium pred: SELECT COUNT(*) FROM "museum" WHERE Open_Year >= 2008 AND Open_Year <= 2013
medium gold: SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008

eval_err_num:313
easy pred: The number of players in the tournament is 25. 查询结果包括一个整数,表示在该 tournament 中一共有 25 名玩家。
easy gold: SELECT count(*) FROM players

eval_err_num:314
easy pred: SELECT SUM(match_num) AS total_match_num FROM matches
easy gold: SELECT count(*) FROM matches

eval_err_num:315
medium pred: SELECT t1.first_name, t1.birth_date FROM players t1 JOIN matches t2 ON t1.player_id = t2.player_id JOIN ranked_Players t3 ON t2.player_id = t3.player_id WHERE t3.country_code = 'USA'
medium gold: SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'

eval_err_num:316
medium pred: SELECT AVG(LOSER_AGE) AS Loss Age, AVG(winner_AGE) AS Win Age FROM matches GROUP BY match_num, round, score, surface,urney_date,urney_id,urney_level,urney_name,player_id,winner_id,winner_ioc,winner_name,winner_rank,year
medium gold: SELECT avg(loser_age) ,  avg(winner_age) FROM matches

eval_err_num:317
medium pred: SELECT MIN(loser_age) as losers_age, MAX(winner_age) as winner_age, AVG(loser_age) as avg_ losers_age FROM matches GROUP BY match_num, round, surface, tournament_date, tournament_level, tournament_name, player_id
medium gold: SELECT avg(loser_age) ,  avg(winner_age) FROM matches

eval_err_num:318
easy pred: SELECT AVG(winner_rank) AS avg_winner_rank FROM ( SELECTwinner_rank, AVG(winner_rank) AS avg_winner_rank FROM matches GROUP BY winner_rank ) subquery
easy gold: SELECT avg(winner_rank) FROM matches

eval_err_num:319
easy pred: SELECT MAX(loser_rank) AS highest_rank FROM matches
easy gold: SELECT min(loser_rank) FROM matches

eval_err_num:320
easy pred: SELECT Ligner_rank FROM matches ORDER BY Ligner_rank DESC LIMIT 1
easy gold: SELECT min(loser_rank) FROM matches

eval_err_num:321
easy pred: SELECT COUNTDISTINCT(DISTINCT player_id) AS num_distinct_country_code FROM players
easy gold: SELECT count(DISTINCT country_code) FROM players

eval_err_num:322
easy pred: result:
easy gold: SELECT count(DISTINCT country_code) FROM players

eval_err_num:323
easy pred: SELECT COUNT(DISTINCT name) AS num_of_distinct_losses FROM matches WHERE loss_type = 'loser'
easy gold: SELECT count(DISTINCT loser_name) FROM matches

eval_err_num:324
easy pred: SELECT COUNT(DISTINCT winner_name) as total_不同的人名 FROM matches WHERE winner_id IN (SELECT player_id FROM players)
easy gold: SELECT count(DISTINCT loser_name) FROM matches

eval_err_num:325
easy pred: SELECT t1.tourney_name FROM rankings t1 JOIN matches t2 ON t1.player_id = t2.player_id AND t2.match_num >= 10 GROUP BY t1.tourney_name HAVING COUNT(DISTINCT t2.match_num) >= 10
easy gold: SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10

eval_err_num:326
easy pred: 输出:
easy gold: SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10

eval_err_num:327
hard pred: SELECT s.name FROM players s JOIN matches m ON s.player_id = m.player_id JOIN rankings r ON m.winner_id = r.player_id WHERE s.birth_date >= '2013-01-01' AND s.birth_date <= '2016-01-01' AND r.year = '2013' AND r.year = '2016'
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016

eval_err_num:328
hard pred: SELECT p.first_name, p.last_name, l.name FROM players p INNER JOIN matches l ON p.player_id = l.loser_id INNER JOIN tournament_dates d ON l.loser_id = d.tournament_id INNER JOIN ranking r ON d.year = r.year AND d.tournament_id = r.player_id WHERE l.year = 2013 AND l.year = 2016 AND r.player_id IN (l. winner_id, l.loser_id)
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016

medium pred: SELECT COUNT(*) FROM matches WHERE year >= 2013 AND year <= 2016
medium gold: SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016

eval_err_num:329
extra pred: SELECT t1.country_code, t1.first_name FROM players t1 JOIN matches t2 ON t1.player_id = t2.loser_id JOIN rankings t3 ON t2.winner_id = t3.player_id WHERE t2.tourney_name = 'WTA Championships' AND t3.ranking_date >= '2021-01-01' AND t3.ranking_date <= '2021-07-01' AND t2.tourney_id = t3.tourney_id AND t2.match_num >= 10 AND t2.match_num <= 40 AND t2.score > 0 AND t2.score < 4
extra gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'

eval_err_num:330
extra pred: SELECT player.first_name, player.last_name, player.country_code FROM players JOIN matches ON players.player_id = matches.player_id JOIN ranking ON matches.tours = ranking.tours WHERE ranking.ranking_points >= 300 AND matches.score = '1' AND ranking.tours = 1 AND players.birth_date >= '2000-01-01' AND players.birth_date <= '2000-12-31' AND players.country_code = 'US'
extra gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'

medium pred: SELECT first_name, country_code FROM players ORDER BY player_id DESC LIMIT 1
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1

eval_err_num:331
medium pred: SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM ranked WHERE ranking_date = (SELECT ranking_date FROM ranked WHERE year = 2021 AND player_id = 100)) order by age DESC
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1

medium pred: SELECT first_name, last_name FROM players ORDER BY birth_date DESC
medium gold: SELECT first_name ,  last_name FROM players ORDER BY birth_date

medium pred: SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date DESC
medium gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date

eval_err_num:332
hard pred: SELECT players.first_name, players.country_code FROM players JOIN matches ON players.player_id = matches.player_id JOIN rankings ON matches.ranking_id = rankings.ranking_id WHERE rankings.ranking = ( SELECT ranking_ points FROM rankings WHERE player_id = ( SELECT player_id FROM players ORDER BY ranking_ points DESC LIMIT 1 ) )
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1

eval_err_num:333
hard pred: SELECT t1.first_name, t1.country_code FROM players t1 JOIN rankings t2 ON t1.player_id = t2.player_id GROUP BY t1.player_id ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1

eval_err_num:334
hard pred: SELECT year FROM matches GROUP BY year HAVING COUNT(*) = (SELECT COUNT(*) FROM matches) + 1
hard gold: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1

hard pred: SELECT year FROM matches GROUP BY year HAVING COUNT(*) > (SELECT COUNT(*) FROM matches)
hard gold: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1

eval_err_num:335
hard pred: SELECT winner.name, winner.rank, SUM(winner_rank_points) as total_points FROM matches m INNER JOIN rankings r ON m.winner_id = r.player_id GROUP BY winner.name, winner.rank ORDER BY total_points DESC LIMIT 1
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1

eval_err_num:336
hard pred: SELECT winner_name, winner_rank, SUM(winner_rank_points) as total_ranking_points, FROM ( SELECT player_id, MAX(winner_id) as winner_id, SUM(winner_rank_points) as winner_rank_points, FROM matches, JOIN rankings ON match.winner_id = rankings.player_id GROUP BY player_id ) sub ORDER BY total_ranking_points DESC LIMIT 1
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1

eval_err_num:337
hard pred: SELECT winner_name FROM rankings WHERE ranking_points = ( SELECT MAX(ranking_points) FROM rankings WHERE ranking_date = '2021-09-18' AND tournament_name = ' Australian Open ' )
hard gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1

eval_err_num:338
hard pred: SELECT winner_name, winner_rank, winner_rank_points FROM rankings JOIN matches ON rankings.player_id = matches.winner_id WHERE rankings.tours = ( SELECT COUNT(*) FROM matches WHERE winner_id = matches.winner_id AND match_date = '2022-01-01' ) ORDER BY winner_rank DESC LIMIT 1
hard gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1

eval_err_num:339
medium pred: SELECT losers.name, winner.name FROM players as losers INNER JOIN players as winner ON losers.player_id = winner.player_id JOIN matches as m ON losers.player_id = m.player_id WHERE m.minute = ( SELECT MAX(minute) FROM matches GROUP BY player_id )
medium gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1

eval_err_num:340
medium pred: SQL NOT GET: may be TIMEOUT
medium gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1

eval_err_num:341
medium pred: SELECT player_id, AVG(ranking_points) AS avg_ranking, first_name FROM rankings GROUP BY player_id, first_name
medium gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

eval_err_num:342
medium pred: SELECT FirstName, AVG(Ranking) FROM players
medium gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

eval_err_num:343
medium pred: SELECT players.first_name, players.last_name, SUM(ranking_points) AS total_ranking_points FROM players JOIN matches ON players.player_id = matches.player_id JOIN rankings ON matches.best_of = rankings.best_of GROUP BY players.player_id, players.first_name, players.last_name
medium gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

eval_err_num:344
medium pred: SELECT t1.first_name, t1.ranking_points FROM players t1 JOIN rankings t2 ON t1.player_id = t2.player_id GROUP BY t1.player_id ORDER BY t1.ranking_points DESC
medium gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

eval_err_num:345
medium pred: SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code
medium gold: SELECT count(*) ,  country_code FROM players GROUP BY country_code

eval_err_num:346
medium pred: SELECT country_code, COUNT(*) as num_players FROM players GROUP BY country_code ORDER BY num_Players DESC
medium gold: SELECT count(*) ,  country_code FROM players GROUP BY country_code

hard pred: SELECT country_code FROM players ORDER BY player_id DESC LIMIT 1
hard gold: SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1

eval_err_num:347
easy pred: SQL 执行结果:
easy gold: SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50

eval_err_num:348
medium pred: SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date
medium gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date

eval_err_num:349
medium pred: SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date
medium gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date

eval_err_num:350
medium pred: SELECT year, COUNT(*) as match_num FROM matches GROUP BY year
medium gold: SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR

eval_err_num:351
medium pred: SELECT year, COUNT(*) as num_matches FROM matches GROUP BY year
medium gold: SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR

eval_err_num:352
medium pred: SQL NOT GET: may be TIMEOUT
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3

medium pred: SELECT winner_name, winner_rank FROM matches WHERE match_num = ( SELECT match_num FROM matches WHERE winner_age = ( SELECT min(winner_age) FROM matches WHERE winner_id = players.player_id ) )
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3

eval_err_num:353
medium pred: SELECT COUNT(DISTINCTwinner_id) as different_winners FROM players LEFT JOIN matches ON players.player_id = matches.player_id WHERE matches.best_of = 1 AND matches.draw_size = 1 AND players.hand = 'L' AND matches.winner_id IN (SELECTwinner_idFROMwinners)
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'

eval_err_num:354
medium pred: SELECT COUNT(*) AS num_left_handed_winners FROM players WHERE player_id IN ( SELECT player_id FROM matches WHERE round = 11 -- WTA championships are round 11 AND winner_entry = '2021-01-01' -- the year of the championships AND winner_hand = 'LEFT' )
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'

eval_err_num:355
hard pred: SELECT first_name, country_code, birth_date FROM players JOIN matches ON players.player_id = matches.player_id JOIN rankings ON matches.ranking_id = rankings.ranking_id WHERE rankings.ranking_points = ( SELECT MAX(ranking_points) FROM rankings WHERE ranking_date = DATE('2022-01-01') )
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1

eval_err_num:356
hard pred: SELECT p.first_name, p.country_code, p.birth_date FROM players p INNER JOIN matches m ON p.player_id = m.loser_id INNER JOIN rankings r ON m.winner_id = r.player_id WHERE r.ranking_points = ( SELECT max(ranking_points) FROM rankings WHERE ranking_date = '2022-01-01' )
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1

eval_err_num:357
medium pred: SELECT player_id, COUNT(*) as num_Players FROM players GROUP BY hand
medium gold: SELECT count(*) ,  hand FROM players GROUP BY hand

medium pred: SELECT player_id, COUNT(*) FROM players GROUP BY hand
medium gold: SELECT count(*) ,  hand FROM players GROUP BY hand

eval_err_num:358
easy pred: SELECT COUNT(DISTINCT `ship``.`id`) AS `Captured_ships` FROM `ship` WHERE `Captured_ships` > 0
easy gold: SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'

eval_err_num:359
medium pred: SELECT name, tonnage FROM "battle" ORDER BY name DESC
medium gold: SELECT name ,  tonnage FROM ship ORDER BY name DESC

medium pred: SELECT name, date, result FROM battle
medium gold: SELECT name ,  date FROM battle

eval_err_num:360
medium pred: SELECT MAX(Death.killed) AS maximum_kill, MIN(Death.killed) AS minimum_kill FROM "battle" AS battle INNER JOIN "ship" ASship ON battle.Lost_in_battle =ship.id INNER JOIN "Death" AS death ONship.id = death.causes_by_ship_id GROUP BY battle.name,ship.name, death.Causes_by_ship_id ORDER BY battle.name,ship.name, death.Causes_by_ship_id
medium gold: SELECT max(killed) ,  min(killed) FROM death

eval_err_num:361
easy pred: SELECT AVG(Injuries) FROM "Death" GROUP BY "Death"."Causes_by_ship_id"
easy gold: SELECT avg(injured) FROM death

eval_err_num:362
medium pred: SELECT * FROM "Death" WHERE "caused_by_ship_id" = 't'
medium gold: SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'

eval_err_num:363
medium pred: SELECTBattle.id,Battle.name FROM battle JOINship ON battle.id =ship. Lost_in_battle JOIN death ONship.id = death. caused_by_ship_id WHERE battle.name='The battle of分析和预测' ANDship.ship_type='Brig'
medium gold: SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'

eval_err_num:364
hard pred: SELECT battle.id, battle.name FROM battle JOINship ON battle.id =ship. Lost_in_battle JOIN death ONship.id = death. caused_by_ship_id GROUP BY battle.id, battle.name HAVING sum(死亡.killed) > 10
hard gold: SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10

eval_err_num:365
extra pred: SELECT ship.id, ship.name FROM "ship" ship JOIN "Death" death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1

eval_err_num:366
medium pred: SELECT DISTINCT battle.name, ship.name FROM "battle" battle INNER JOIN "ship" ship ON battle.id = ship. Lost_in_Battle INNER JOIN "Death" death ON ship.id = death. caused_by_ship_id INNER JOIN "Battle" b ON b.id = battle.id WHERE b.name = 'Kaloyan' AND b.commander = 'Kaloyan' AND death.name = 'Baldwin I'
medium gold: SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'

eval_err_num:367
easy pred: SELECT COUNT(DISTINCT `result`) AS num_results FROM "battle"
easy gold: SELECT count(DISTINCT RESULT) FROM battle

eval_err_num:368
extra pred: SELECT COUNT(DISTINCT battle.id) FROM "battle" AS battle WHERE battle.result = '胜利' AND battle.tonnage NOT IN (225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500, 525, 550, 575, 600, 625, 650, 675, 700, 725, 750, 775, 800, 825, 850, 875, 900, 925, 950, 975, 1000)
extra gold: SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );

eval_err_num:369
extra pred: SELECT battle.name, Battle.date, ship.lost_in_battle, ship.name, ship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship FROM battle INNER JOIN ship ON Battle.id = ship. Lost_in_battle INNER JOIN Death ON ship.id = Death.Causes_by_ship_id WHERE Battle.name = 'Lettice' AND Death.Causes_by_ship_id = 'HMS Atalanta'
extra gold: SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'

eval_err_num:370
extra pred: SELECT battle.name, battle.result, bulgarian_commander.text AS bulgarian_commander, latin_commander.text AS latin_commander FROM battle INNER JOINship ON battle.id=ship. Lost_in_Battle INNER JOIN death ONship.id=Death. caused_by_ship_id WHERE battle.result='胜利' AND death.result='胜利' AND battle.name NOT IN ('English Channel', 'Channel Islands')
extra gold: SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'

eval_err_num:371
medium pred: SELECT note FROM "Death" WHERE caused_by_ship_id IN (SELECTship.idFROM "Battle") AND note like '%east%'
medium gold: SELECT note FROM death WHERE note LIKE '%East%'

medium pred: SELECT * FROM addresses WHERE address_id IN ( SELECT address_id FROM addresses GROUP BY address_id HAVING COUNT(DISTINCT line_1) + COUNT(DISTINCT line_2) >= 2 )
medium gold: SELECT line_1 ,  line_2 FROM addresses

eval_err_num:372
medium pred: SELECT a.address_id, a.line_1, a.line_2 FROM addresses a JOIN departments b ON a.department_id = b.department_id JOIN courses c ON a.course_id = c.course_id JOIN students d ON a.student_id = d.student_id WHERE b.department_name = 'Computer Science' AND c.course_name = 'Java Programming' AND d.student_id = 1
medium gold: SELECT line_1 ,  line_2 FROM addresses

eval_err_num:373
easy pred: SELECT COUNT(*) FROM Course
easy gold: SELECT count(*) FROM Courses

eval_err_num:374
easy pred: SELECT COUNT(*) FROM Course
easy gold: SELECT count(*) FROM Courses

easy pred: SELECT course_description FROM courses
easy gold: SELECT course_description FROM Courses WHERE course_name  =  'math'

eval_err_num:375
easy pred: SELECT course_description FROM courses WHERE course_id IN ( SELECT course_id FROM departments WHERE department_name = 'Math' )
easy gold: SELECT course_description FROM Courses WHERE course_name  =  'math'

easy pred: SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea' AND line_3 = '12345'
easy gold: SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'

eval_err_num:376
extra pred: SELECT department_id, department_name FROM Departments WHERE department_id IN ( SELECT department_id FROMDegree_Programs WHERE degree_program_id IN ( SELECT degree_program_id FROM courses WHERE course_id IN ( SELECT course_id FROM addresses WHERE address_id IN ( SELECT address_id FROM courses WHERE course_id IN ( SELECT course_id FROM departments WHERE department_id IN ( SELECT department_id FROM addresses FROM courses FROM departments FROM students ) ) ) ) ) )
extra gold: SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:377
extra pred: SELECT department_name, department_id FROMDegree_Programs ORDER BY degree_program_id DESC LIMIT 1
extra gold: select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1

eval_err_num:378
easy pred: SELECT COUNT(DISTINCT department_id) AS num_departments_offering_any_Degree FROM Degree_Programs WHERE degree_program_id NOT NULL
easy gold: SELECT count(DISTINCT department_id) FROM Degree_Programs

eval_err_num:379
easy pred: SELECT COUNT(DISTINCT department_id) AS number_of_departments FROM Departments
easy gold: SELECT count(DISTINCT department_id) FROM Degree_Programs

eval_err_num:380
easy pred: SELECT COUNT(DISTINCT degree_name) AS different_degree_names FROMDegree_Programs
easy gold: SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs

easy pred: SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs
easy gold: SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs

eval_err_num:381
medium pred: SELECT COUNT(*) AS num_degrees FROM `Degree_Programs` WHERE `department_id` = ( SELECT department_id FROM `Departments` WHERE name = 'Engineering' )
medium gold: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'

eval_err_num:382
medium pred: SELECT COUNT(*) AS num_degrees FROM Departments WHERE department_name = ' Engineering'
medium gold: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'

eval_err_num:383
medium pred: SELECT section_name, section_description FROM courses
medium gold: SELECT section_name ,  section_description FROM Sections

eval_err_num:384
medium pred: SELECT t1.section_name, t1.section_description FROMSections t1 INNER JOIN Course_Sections t2 ON t1.course_id = t2.course_id INNER JOIN Address_Sections t3 ON t1.section_id = t3.section_id INNER JOIN Course_Address_Sections t4 ON t3.address_id = t4.address_id AND t1.course_id = t4.course_id WHERE t2.course_id IS NULL ORDER BY t1.section_name, t1.section_description
medium gold: SELECT section_name ,  section_description FROM Sections

eval_err_num:385
medium pred: SELECT course.name, course.id FROM courses INNER JOIN sections ON course.id = sections.course_id GROUP BY course.name, course.id HAVING COUNT(DISTINCT section.id) <= 2
medium gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2

eval_err_num:386
medium pred: SELECT course.name, section.id FROM courses INNER JOIN sections ON course.id = section.course_id WHERE section.id < 2
medium gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2

eval_err_num:387
easy pred: SELECT section_name FROM courses ORDER BY lexicographical_reverse(section_name) DESC
easy gold: SELECT section_name FROM Sections ORDER BY section_name DESC

eval_err_num:388
easy pred: SELECT t1.section_name FROM sections t1 JOIN departments t2 ON t1.department_id = t2.department_id JOIN Degree_Programs t3 ON t1.department_id = t3.department_id JOIN Students t4 ON t1.student_id = t4.student_id JOIN Course_Master t5 ON t4.student_id = t5.student_enrolment_id JOIN address t6 ON t5.address_id = t6.address_id WHERE t3.degree_program_id = 1
easy gold: SELECT section_name FROM Sections ORDER BY section_name DESC

eval_err_num:389
extra pred: SELECT s.semester_name, s.semester_id FROM ( SELECT semester_id, MAX(student_id) AS max_student_id FROM students GROUP BY semester_id ) s JOIN students s2 ON s2.student_id = s.max_student_id ORDER BY semester_id DESC
extra gold: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:390
extra pred: SELECT semester_name, semester_id FROM ( SELECT semester_id, COUNT(*) as num_students, SUM(student_id) as max_student_id FROM students GROUP BY semester_id ) students_table GROUP BY semester_id ORDER BY max_student_id DESC LIMIT 1
extra gold: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:391
medium pred: SELECT t1.description FROM Departments t1 JOIN Translations t2 ON t1.department_id = t2.department_id WHERE t2.text LIKE '%computer%'
medium gold: SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'

medium pred: SELECT department_description FROM Departments WHERE department_name = 'Computer'
medium gold: SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'

eval_err_num:392
medium pred: SELECT s.name, s.middleName, s.LastName, d.degree_program_id, s.student_id FROM students s JOIN student_enrolment_courses scp ON s.student_id = scp.student_id JOINDegree_Programs d ON scp.degree_program_id = d.degree_program_id JOINSSEMesterS ss ON s.semester_id = ss.semester_id WHERE s.name = 'John' AND s.semester_id IN (2, 3) AND d.degree_program_id = 2
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2

eval_err_num:393
medium pred: SELECT s.student_id, s.first_name, s.middle_name, s.last_name, d.department_id FROM students s INNER JOIN departments d ON s.current_address_id = d.address_id INNER JOIN degree_Programs p ON d.department_id = p.department_id INNER JOIN Student_Enrolment s ON s.student_id = p.student_enrolment_id WHERE s.date_first_registered >= '2022-01-01' AND s.date_left <= '2022-01-15' AND s.student_id IN (SELECT student_id FROM Student_Enrolment WHERE degree_program_id = 2)
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2

eval_err_num:394
hard pred: SELECT s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment_courses s1 ON s.student_id = s1.student_id JOIN degree_program_students s2 ON s1.student_enrolment_id = s2.student_enrolment_id JOIN departments d ON s2.department_id = d.department_id JOIN courses c ON d.department_id = c.department_id AND c.course_id = s.course_id WHERE s.student_id = 1
hard gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'

eval_err_num:395
hard pred: SELECT s.name AS first_name, s.middle_name, s.last_name FROM students s JOIN Student_Enrolment_Courses s1 ON s.student_id = s1.student_id JOIN Course_Sections c1 ON s1.course_id = c1.course_id JOIN addresses a ON c1.address_id = a.address_id JOIN departments d ON a.address_id = d.address_id WHERE d.name = 'Bachelors program'
hard gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'

eval_err_num:396
extra pred: SQL NOT GET: may be TIMEOUT
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1

eval_err_num:397
extra pred: SQL NOT GET: may be TIMEOUT
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1

eval_err_num:398
extra pred: SELECT degree_program_id, SUM(student_enrolment_id) AS total_student_enrolment FROM ( SELECT degree_program_id, student_enrolment_id, COUNT(*) AS total_student_enrolment FROM Student_Enrolment GROUP BY degree_program_id, student_enrolment_id ) subquery GROUP BY degree_program_id ORDER BY total_student_enrolment DESC LIMIT 1
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:399
extra pred: SELECT degree_program_id, SUM(CASE WHEN section_id = 1 THEN degree_summary_name END) AS degree_summary FROM Degree_Programs GROUP BY degree_program_id ORDER BY SUM(CASE WHEN section_id = 1 THEN degree_summary_name END) DESC, degree_program_id DESC LIMIT 1
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:400
extra pred: SQL NOT GET: may be TIMEOUT
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:401
extra pred: SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(*) as num_enrollments FROM students s JOIN Student_Enrolment s1 ON s.student_id = s1.student_id JOIN Student_Enrolment s2 ON s.student_id = s2.student_id AND s1.student_id != s2.student_id JOIN courses c ON s.course_id = c.course_id JOIN departments d ON c.department_id = d.department_id WHERE d.department_id IS NULL GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(*) = (SELECT COUNT(*) FROM student_enrolment WHERE student_enrolment_id = s.student_id) + 1
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:402
hard pred: SELECT semester_name FROM Student_Enrolment WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment_Courses WHERE student_enrolment_id NOT IN ( SELECT student_enrolment_id FROM Students ORDER BY student_id DESC LIMIT 1 ) )
hard gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )

eval_err_num:403
hard pred: SELECTSEMester_NAME() WHERE student_enrolment_id IS NULL
hard gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )

eval_err_num:404
easy pred: SELECT course_name FROM courses GROUP BY course_name HAVING COUNT(DISTINCT student_enrolment_id) > 0
easy gold: SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id

eval_err_num:405
easy pred: SELECT course_name FROM courses WHERE course_id IN ( SELECT course_id FROM Student_Enrolment WHERE student_enrolment_id IS NOT NULL AND student_id IN (SELECT student_id FROMstudents) )
easy gold: SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id

eval_err_num:406
extra pred: SELECT course_name FROM courses ORDER BY total_ enrollment DESC LIMIT 1
extra gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT course_name FROM courses WHERE course_id = ( SELECT MAX(course_id) FROM courses GROUP BY course_name )
extra gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1

eval_err_num:407
extra pred: SELECT s.last_name FROMstudents s INNER JOIN Address a ON s.current_address_id = a.address_id INNER JOIN Course c ON a.address_id = c.address_id INNER JOIN Department d ON c.address_id = d.address_id WHERE a.city = ' North Carolina' AND d.department_name = 'Education' AND s.permanent_address_id = 0 AND s.date_first_registered = '2022-01-01' AND s.date_left = '2022-12-31' AND s.student_id = 0; This query uses a join between the `students` table, the `address` table, the `course` table, the `department` table, and the `students` table to find all students who currently live in the state of North Carolina and have not registered in any degree program. It also uses some additional conditions to filter the results, such as the address being in the state of North Carolina, the education department being set to "Education", and the student ID being set to 0. Finally, it includes a condition to filter the results so that only students who did not register in any degree program are included.
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id

eval_err_num:408
extra pred: SELECT t1.last_name FROMstudents t1 WHERE t1.current_address_id = 1 AND t1.永久性_address_id = 0 AND t1.state_province_county = 'NC'
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id

eval_err_num:409
medium pred: SELECT transcript_date, transcript_id FROMTranscripts WHERE transcript_date >= 日期 '2022-01-01' AND transcript_date < 日期 '2023-01-01' GROUP BY transcript_date HAVING COUNT(DISTINCT course_results) >= 2
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2

eval_err_num:410
medium pred: SELECT transcript_date, transcript_id FROMTranscripts WHERE transcript_id IN ( SELECT transcript_id FROM( SELECT t1.transcript_id, COUNT(*) AS num_courses FROMTranscripts t1 LEFT JOINTranscript_Contents t2 ON t1.transcript_id = t2.transcript_id WHERE t2.student_course_id IS NULL GROUP BY t1.transcript_id HAVING COUNT(*) >= 2 ) t3 )
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2

eval_err_num:411
medium pred: SELECT t.phone_number FROM addresses AS t WHERE t.name = 'Timmothy' AND t.name = ' Ward'
medium gold: SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'

eval_err_num:412
medium pred: SELECT cell_Mobile_Number FROM Students WHERE student_name = 'Timmothy Ward'
medium gold: select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'

eval_err_num:413
medium pred: SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s WHERE s.current_address_id = ( SELECT address_id FROM addresses WHERE address_name = 'New York' AND address_city = 'New York' AND address_zip = '10001' )
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1

eval_err_num:414
medium pred: SQL NOT GET: may be TIMEOUT
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1

eval_err_num:415
medium pred: SQL NOT GET: may be TIMEOUT
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1

eval_err_num:416
medium pred: SELECT first, middle, last FROM students WHERE student_id = (SELECT student_id FROM students ORDER BY age DESC LIMIT 1)
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1

eval_err_num:417
easy pred: SELECT s.first_name FROM students s INNER JOIN addresses a ON s.current_address_id = a.address_id INNER JOIN addresses b ON a. permanent_address_id = b.address_id WHERE b.address_id IS NULL
easy gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id

eval_err_num:418
easy pred: The first name of the student whose permanent address is different from his or her current one is `John`.
easy gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id

eval_err_num:419
extra pred: SELECT address_id, 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details' FROM `students` WHERE student_id = ( SELECT MAX(student_id) FROM `students` GROUP BY address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:420
extra pred: SELECT address_id, line_1, line_2 FROM (`Addresses`)、《Courses》、《Departments》、《Degree_Programs》、《Sections》、《Students》 WHERE (`address_id` = (SELECT address_id FROM (`Addresses`)、《Courses》、《Departments》、《Degree_Programs》、《Sections》、《Students》 WHERE address_id NOT IN (SELECT address_id FROM (`Courses`,`Departments`,`Degree_Programs`,`Sections`,`Students`))) AND (`course_id` = (SELECT course_id FROM (`Courses`,`Departments`,`Degree_Programs`,`Sections`,`Students`))) AND (`student_id` = (SELECT student_id FROM (`Students`))) GROUP BY address_id HAVING COUNT(*) > 1
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:421
easy pred: SQL NOT GET: may be TIMEOUT
easy gold: SELECT avg(transcript_date) FROM Transcripts

eval_err_num:422
easy pred: SQL NOT GET: may be TIMEOUT
easy gold: SELECT avg(transcript_date) FROM Transcripts

eval_err_num:423
medium pred: SQL NOT GET: may be TIMEOUT
medium gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1

eval_err_num:424
medium pred: SELECT MAX(transcript_date) AS earliest_transcript_date, MAX(transcript_date) AS release_date, MAX(transcript_id) AS transcripts_id, COUNT(*) AS total_transcripts FROM `Transcripts` GROUP BY `transcripts` `id`, `transcript_date`, `release_date`, `total_transcripts`
medium gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1

eval_err_num:425
easy pred: SELECT COUNT(*) FROM `Transcript_Contents` WHERE `student_course_id` IN (SELECT `student_enrolment_id` FROM `Student_Enrolment` WHERE `student_id` = ?)
easy gold: SELECT count(*) FROM Transcripts

eval_err_num:426
easy pred: SELECT COUNT(*) AS total_transcripts FROMTranscript_Contents
easy gold: SELECT count(*) FROM Transcripts

eval_err_num:427
medium pred: SELECT transcripts.transcript_date FROMTranscripts t INNER JOIN transcripts_Contents c ON t.transcript_id = c.transcript_id INNER JOIN Student_Enrolment_Courses s ON c.student_course_id = s.student_enrolment_id WHERE s.student_id = ( SELECT student_id FROM Students WHERE student_id >= 1 )
medium gold: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1

eval_err_num:428
medium pred: SELECT MONTH(transcript_date) ASMonth, YEAR(transcript_date) ASYear, COUNT(*) ASNumOfReleases FROMTranscripts GROUP BYMonth, Year
medium gold: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1

eval_err_num:429
hard pred: SELECT COUNT(DISTINCTDISTINCT course_enrollment_id) AS max_count, course_enrollment_id FROM transcripts JOIN Student_Enrolment ON transcripts.transcript_id = student_enrolment.transcript_id GROUP BY course_enrollment_id
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:430
hard pred: SELECT COUNT(DISTINCTDISTINCT student_enrolment_id) AS max_num_of_times, course_id FROM `Transcript_Contents` JOIN `Student_Enrolment_Courses` ON `Transcript_Contents`.student_course_id = `Student_Enrolment_Courses`.student_course_id JOIN `Courses` ON `Student_Enrolment_Courses`.course_id = `Courses`.course_id GROUP BY course_id ORDER BY max_num_of_times DESC LIMIT 1
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:431
extra pred: SELECT transcript_date, transcript_id FROM ( SELECT transcript_date, COUNT(*) as num_results FROM transcripts GROUP BY transcript_date ) subquery WHERE subquery.num_results = ( SELECT COUNT(*) FROM transcripts GROUP BY transcript_id )
extra gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1

eval_err_num:432
extra pred: SELECT transcript_date, transcript_id FROM ( SELECT t1.transcript_date, t1.transcript_id, COUNT(*) as num_results FROM transcripts t1 LEFT JOIN transcripts t2 ON t1.transcript_id = t2.transcript_id WHERE t2.id IS NULL GROUP BY t1.transcript_date, t1.transcript_id ORDER BY COUNT(*) DESC LIMIT 1 ) t GROUP BY transcript_date, transcript_id ORDER BY num_results DESC LIMIT 1
extra gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1

eval_err_num:433
extra pred: SQL NOT GET: may be TIMEOUT
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'

eval_err_num:434
extra pred: select semester_id from Student_Enrolment where degree_program_id in (select degree_program_id fromDegree_Programs where department_id = 5); This query will select the semester_id of the program with the department ID of 5, which is a department that contains both Masters and Bachelors students.
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'

eval_err_num:435
easy pred: SELECT COUNT(DISTINCT address_id) FROMstudents
easy gold: SELECT count(DISTINCT current_address_id) FROM Students

eval_err_num:436
easy pred: SQL NOT GET: may be TIMEOUT
easy gold: SELECT count(DISTINCT current_address_id) FROM Students

eval_err_num:437
easy pred: SELECT * FROMstudents ORDER BY lexicographical_reverse(student_id) DESC
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC

eval_err_num:438
easy pred: SELECT other_student_details FROM students ORDER BY name DESC
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC

eval_err_num:439
easy pred: SELECT * FROM `Addresses` AS a JOIN `Courses` AS c ON a.address_id = c.course_id JOIN `Departments` AS d ON c.department_id = d.department_id JOIN `Degree_Programs` AS p ON d.department_id = p.department_id JOIN `Sections` AS s ON p.course_id = s.course_id JOIN `Semesters` AS t ON s.semester_id = t.semester_id JOIN `Students` AS t ON t.student_id = s.student_id WHERE s.section_id = 1
easy gold: SELECT section_description FROM Sections WHERE section_name  =  'h'

eval_err_num:440
easy pred: SELECT t1.section_description FROM `Sections` t1 JOIN `Courses` t2 ON t1.course_id = t2.course_id AND t1.section_id = t2.section_id WHERE t2.name = 'h'
easy gold: SELECT section_description FROM Sections WHERE section_name  =  'h'

eval_err_num:441
hard pred: SELECT s.first_name FROMstudents s JOINaddress a ON s.student_id = a.student_id JOIN Address_Book b ON a.address_id = b.address_id AND b.city = 'Haiti' AND b.zip_postcode = '20510' AND b.state_province_county = 'Haiti' AND b.country = 'Haiti' JOIN Course_Book c ON b.course_id = c.course_id JOIN Departments d ON c.department_id = d.department_id JOIN Degrees_Programs e ON d.degree_program_id = e.degree_program_id JOINSections s ON e.department_id = s.department_id AND s.course_id = c.course_id JOIN Student_Enrolment t ON s.student_id = t.student_id WHERE t.student_enrolment_id IS NULL AND t.cell_phone_number = '09700166582'
hard gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'

eval_err_num:442
hard pred: SQL NOT GET: may be TIMEOUT
hard gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'

eval_err_num:443
easy pred: SELECT Title FROM cartoons
easy gold: SELECT Title FROM Cartoon ORDER BY title

eval_err_num:444
easy pred: SELECT Title FROMCartoon ORDER BY Title ASC
easy gold: SELECT Title FROM Cartoon ORDER BY title

eval_err_num:445
easy pred: SELECT * FROM "Cartoon" WHERE "Directed_by" = 'Ben Jones'
easy gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";

eval_err_num:446
easy pred: SELECT Title FROM "Cartoon" WHEREDirected_by = 'Ben Jones'
easy gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";

eval_err_num:447
easy pred: SELECT COUNT(*) AS num FROM "Cartoon" WHERE "Written_by" = 'Joseph Kuhr'
easy gold: SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";

eval_err_num:448
easy pred: SELECT COUNT(*) FROM "Cartoon" WHERE "Written_by" = 'Joseph Kuhr'
easy gold: SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";

eval_err_num:449
medium pred: SELECT Title,Directed_by FROMCartoon WHEREOriginal_air_date <= '2022-01-01'
medium gold: SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date

eval_err_num:450
medium pred: SELECT Title,Directed_by FROMCartoon WHEREOriginal_air_date >= '2022-01-01' ORDER BYOriginal_air_date
medium gold: SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date

eval_err_num:451
medium pred: SELECT t.Title FROM "Cartoon" t WHERE t.Directed_by = 'Ben Jones' or t.Directed_by = ' Brandon Vietti'
medium gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";

eval_err_num:452
medium pred: SELECT Title FROMCartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = ' Brandon Vietti'
medium gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";

eval_err_num:453
hard pred: SELECT country, COUNT(*) as num_TV_Channels FROM "TV_Channel" GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;

eval_err_num:454
hard pred: SELECT country, COUNT(*) AS num_TV_channels FROM "TV_Channel" GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;

eval_err_num:455
medium pred: SELECT COUNT(DISTINCT `Series_name`) AS different_series_names, COUNT(DISTINCT `Content`) AS different_content FROM "TV_Channel"
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;

eval_err_num:456
medium pred: SELECT COUNT(DISTINCT "TV_series") AS different_series FROM "TV_Channel"
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;

eval_err_num:457
easy pred: SELECT `Content` FROM `TV_Channel` WHERE `Series_name` = 'Sky Radio'
easy gold: SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";

eval_err_num:458
easy pred: SELECT * FROM "TV_Series" WHERE "Channel" = 'Sky Radio'
easy gold: SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";

eval_err_num:459
easy pred: SELECT * FROM "TV_Channel" WHERE "Series_name" = 'Sky Radio'
easy gold: SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";

eval_err_num:460
easy pred: SELECT * FROM "TV_Channel" WHERE "Series_name" = 'Sky Radio'
easy gold: SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";

eval_err_num:461
easy pred: SELECT COUNT(*) FROM "TV_Channel" WHERE "Language" = 'English'
easy gold: SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";

eval_err_num:462
easy pred: SELECT COUNT(*) FROM "TV_Channel" WHERE "Language" = 'English'
easy gold: SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";

eval_err_num:463
hard pred: SELECT language, COUNT(*) as num_TV_channels FROM "TV_Channel" GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;

eval_err_num:464
hard pred: SELECT language, COUNT(*) FROM "TV_Channel" WHERE language NOT IN ( SELECT language FROM "TV_Series" WHERE "TV_Series"."id" = "TV_Channel"."id" ) GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;

eval_err_num:465
medium pred: SELECT language, COUNT(*) FROM "TV_Channel" GROUP BY language
medium gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE

eval_err_num:466
medium pred: SELECT language, COUNT(*) as num_channels FROM "TV_Channel" GROUP BY language
medium gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE

eval_err_num:467
medium pred: SELECT * FROM "TV_Channel" WHERE "Series_name" = 'The Rise of the Blue Beetle!'
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";

eval_err_num:468
medium pred: The series name of the TV channel that shows the cartoon "The Rise of the Blue Beetle" is "The X-Files".
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";

eval_err_num:469
medium pred: SELECT t2.Title FROM "TV_Series" t1 JOIN "Cartoon" t2 ON t1.Channel = t2.Channel AND t1.id > t2.id AND t1.Series_name = "Sky Radio"
medium gold: SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";

eval_err_num:470
medium pred: SELECT Title FROMCartoon WHEREChannel = 'Sky Radio'
medium gold: SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";

eval_err_num:471
easy pred: SELECT Episode FROM "TV_series" ORDER BY rating DESC LIMIT 10
easy gold: SELECT Episode FROM TV_series ORDER BY rating

eval_err_num:472
easy pred: SELECT Episode, rating FROM "TV_series" ORDER BY rating DESC
easy gold: SELECT Episode FROM TV_series ORDER BY rating

eval_err_num:473
medium pred: SELECT Episode,rating FROM "TV_Series" ORDER BY rating DESC LIMIT 3
medium gold: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;

eval_err_num:474
medium pred: SELECT * FROM "TV_Series" ORDER BY "rating" DESC LIMIT 3
medium gold: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;

eval_err_num:475
medium pred: SELECT MIN(Share) AS minimum_share, MAX(Share) AS maximum_share FROM "TV_series" GROUP BY "TV_series"."id"
medium gold: SELECT max(SHARE) , min(SHARE) FROM TV_series;

eval_err_num:476
medium pred: SELECT MAX(Share) as maximum_Share, MIN(Share) as minimum_Share FROM "TV_series" GROUP BY "TV_Series"."id"
medium gold: SELECT max(SHARE) , min(SHARE) FROM TV_series;

eval_err_num:477
easy pred: SELECT t1.Air_Date FROM "TV_Series" t1 INNER JOIN "TV_Channel" t2 ON t1.Channel = t2.id AND t1. Episode = 'A Love of a Lifetime'
easy gold: SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";

eval_err_num:478
easy pred: SELECT t1.Weekly_Rank FROM "TV_Series" t1 INNER JOIN "TV_Channel" t2 ON t1."Channel" = t2."id" WHERE t1." Episode" = "A Love of a Lifetime"
easy gold: SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";

eval_err_num:479
easy pred: SELECT t1.Weekly_Rank FROM "TV_Series" t1 INNER JOIN "TV_Channel" t2 ON t1."Channel" = t2."id" INNER JOIN "Cartoon" t3 ON t1."Channel" = t3."id" WHERE t3."Title" = "A Love of a Lifetime" and t2."rating" = "18.49" and t3."Viewers_m" > 0
easy gold: SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";

eval_err_num:480
medium pred: SELECT t1.Series_name, t2.Channel FROM "TV_Series" t1 INNER JOIN "TV_Channel" t2 ON t1.Channel = t2.id AND t1. Episode = "A Love of a lifetime"
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";

eval_err_num:481
medium pred: The name of the series that has the episode "A Love of a Lifetime" is "Once Upon a Time".
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";

eval_err_num:482
medium pred: SELECT Episode FROM "TV_Series" WHEREChannel = 'Sky Radio'
medium gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";

eval_err_num:483
medium pred: SELECT Episode FROM TV_series WHERE Series_name = 'Sky Radio'
medium gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";

eval_err_num:484
medium pred: SELECT Directed_by, COUNT(*) as Num_Cartoons FROM "Cartoon" GROUP BY Directed_by ORDER BY Num_Cartoons DESC
medium gold: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by

eval_err_num:485
medium pred: SELECT d.directions_by, COUNT(*) as num_cartoons FROM "Cartoon" as c JOIN "directions" as d ON c.Channel = d.Channel GROUP BY d.directions_by ORDER BY COUNT(*) DESC
medium gold: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by

eval_err_num:486
medium pred: SELECT t1.Production_code, t2.Channel FROM "Cartoon" t1 JOIN "TV_Series" t2 ON t1.Channel = t2.Channel WHERE t2.Air_Date = ( SELECT MAX(Air_Date) FROM "TV_Series" WHERE "TV_Series"."Channel" = t2."Channel" )
medium gold: select production_code ,  channel from cartoon order by original_air_date desc limit 1

eval_err_num:487
medium pred: SELECT production_code, channel FROM cartoon ORDER BY air_date DESC LIMIT 1
medium gold: select production_code ,  channel from cartoon order by original_air_date desc limit 1

medium pred: SELECT Package_Option, Series_name FROM TV_Channel WHERE Pixel_aspect_ratio_PAR = '1.777' AND Hight_definition_TV = 'Y'
medium gold: SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"

eval_err_num:488
medium pred: SELECT Package_Option, Series_name FROM "TV_Channel" WHERE "Hight_Definition_TV" = 'true'
medium gold: SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"

eval_err_num:489
medium pred: SELECT Channel.id FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id =Cartoon.Channel INNER JOIN TV_Series ON Cartoon.Channel = TV_Series.Channel WHERE Cartoon.Title = 'Some cartoon written byTodd Casey'
medium gold: SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'

eval_err_num:490
medium pred: SELECT t1.Country FROM "TV_Series" t1 INNER JOIN "Cartoon" t2 ON t1.Channel = t2.Channel AND t1.id = t2.id AND t2.Written_by = ' Todd Casey'
medium gold: SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'

eval_err_num:491
hard pred: SELECT t.id as country_id, t.series_name as series_name, t.Country as country, t.Language as language, t.Content as content, s.Pixel_aspect_ratio_PAR as pixel_aspect_ratio_PAR, s.Hight_definition_TV as hight_definition_TV, s.Pay_per_view_PPV as pay_per_view_PPV, s.Package_Option as package_Option, c.id as channel_id, c.series_name as series_name, c.Country as country, c.Language as language, c.Content as content, CASE WHEN s.id in (SELECT id FROMCartoon c2 WHERE c2.title = 'Todd Casey') THEN '这些国家的TV channels' WHEN s.id in (SELECT id FROMCartoon c3 WHERE c3.title = 'Todd Casey') THEN '这些国家的TV channels' WHEN s.id in (SELECT id FROMCartoon c4 WHERE c4.title = 'Todd Casey') THEN '这些国家的TV channels' ELSE '没有 Todd Casey 风格的卡通频道' END as not_playing_ Todd_ Casey FROM TV_Channel t, TV_Series s, Cartoon c WHERE t.id = c.id AND s.id NOT IN (SELECT id FROMCartoon c2 WHERE c2.title = 'Todd Casey') AND s.id NOT IN (SELECT id FROMCartoon c3 WHERE c3.title = 'Todd Casey') AND s.id NOT IN (SELECT id FROMCartoon c4 WHERE c4.title = 'Todd Casey')
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'

eval_err_num:492
hard pred: SELECT t1.Country FROM "TV_Channel" t1 LEFT JOIN "Cartoon" t2 ON t1.id = t2.Channel AND t2.Title = 'Todd Casey' WHERE t2.id IS NULL
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'

eval_err_num:493
extra pred: SELECT t1.Series_name, t1.Country FROM "TV_Channel" t1 INNER JOIN "TV_Series" t2 ON t1.Channel = t2.Channel AND t2.id = ( SELECT id FROM "Cartoon" WHEREdirected_by = 'Ben Jones' AND written_by = 'Michael Chang' )
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'

eval_err_num:494
extra pred: SELECT t1.series_name, t1.Country FROM "TV_Channel" t1 INNER JOIN "Cartoon" t2 ON t1.Channel = t2.Channel WHERE t2.Directed_by = 'Ben Jones' AND t2.Written_by = 'Michael Chang'
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'

eval_err_num:495
medium pred: SELECT * FROM "TV_Channel" WHERE "Country" NOT IN ('United States', ' Canada') AND "Pixel_aspect_ratio_PAR" NOT IN (SELECT "Pixel_aspect_ratio_PAR" FROM "TV_Series" WHERE "Channel" = 'BBC America')
medium gold: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'

eval_err_num:496
medium pred: SELECT t1.Pixel_aspect_ratio_PAR, t1.Country FROM "TV_Channel" t1 JOIN "TV_Series" t2 ON t1.id = t2.Channel JOIN "Cartoon" t3 ON t1.id = t3.Channel WHERE t2.Country != 'en' AND t3.Channel != 'en'
medium gold: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'

eval_err_num:497
easy pred: SELECT t1.id FROM "TV_Channel" t1 WHERE t1.Country IN (SELECT country FROM "TV_Series" WHEREChannel = 'Channel1') AND t1.Country IN (SELECT country FROM "TV_Series" WHEREChannel = 'Channel2') AND t1.Country NOT IN (SELECT country FROM "TV_Series" WHEREChannel = 'Channel3') AND t1.Pixel_aspect_ratio_PAR > 2
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2

eval_err_num:498
easy pred: SELECT id FROM "TV_Channel" WHERE series_name IN (SELECT channel FROM "TV_Series" WHERE id NOT IN (SELECT id FROM "TV_Channel")) AND hight_definition_TV = "Hight_Definition_TV"
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2

eval_err_num:499
hard pred: SELECT id FROM TV_Channel WHERE Directed_by = 'Ben Jones' AND Channel != 'Ben Jones'
hard gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'

eval_err_num:500
hard pred: SELECT * FROM "TV_Channel" WHERE "Series_name" NOT IN (SELECT " Ben Jones " AS "Directed_by" FROM "Cartoon")
hard gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'

eval_err_num:501
hard pred: SELECT Package_Option FROM TV_Channel WHERE id NOT IN ( SELECT id FROM TV_Series WHERE Title = 'Ben Jones' AND Directed_by = 'Ben Jones' )
hard gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')

eval_err_num:502
hard pred: SELECT t1.Package_Option FROM "TV_Channel" t1 JOIN "TV_Series" t2 ON t1.id = t2.Channel WHERE t2.Directed_by = 'Ben Jones' AND t2.id NOT IN ( SELECT id FROM "Cartoon" c WHERE c.Channel = t1.Channel )
hard gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')

eval_err_num:503
easy pred: SELECT COUNT(*) FROM "poker_player"
easy gold: SELECT count(*) FROM poker_player

eval_err_num:504
easy pred: SELECT COUNT(*) FROM "poker_player"
easy gold: SELECT count(*) FROM poker_player

eval_err_num:505
easy pred: SELECT Poker_Player_ID, Earnings FROM "poker_player" WHERE Final_Table_Made > 0 ORDER BY Earnings DESC
easy gold: SELECT Earnings FROM poker_player ORDER BY Earnings DESC

eval_err_num:506
easy pred: SELECTEarnings FROM "poker_player" WHEREPoker_Player_ID IN (SELECTPoker_Player_ID FROM "people") ORDER BYEarnings DESC
easy gold: SELECT Earnings FROM poker_player ORDER BY Earnings DESC

eval_err_num:507
medium pred: SELECT * FROM "poker_player" WHERE "Final_Table_Made" = 1; SELECT * FROM "poker_player" WHERE "Best_Finish" = (SELECT "Best_Finish" FROM "poker_player" WHERE "Poker_Player_ID" = "Poker_Player_ID_1")
medium gold: SELECT Final_Table_Made ,  Best_Finish FROM poker_player

eval_err_num:508
easy pred: SELECT AVG(Earnings) AS Average_Earnings FROM "poker_player" WHEREPRIMARY KEY("Poker_Player_ID") NOT IN (SELECT People_ID FROM "people")
easy gold: SELECT avg(Earnings) FROM poker_player

eval_err_num:509
medium pred: SELECT t1. Money_Rank, t1. earnings FROM "poker_player" t1 INNER JOIN "people" t2 ON t1. People_ID = t2. People_ID WHERE t2. Nationality = ' 中国人' ORDER BY t1. earnings DESC LIMIT 1
medium gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1

eval_err_num:510
medium pred: SELECT 是孩子成绩最好的 poker_player. Money_Rank FROM poker_player JOIN people ON poker_player. People_ID = people. People_ID ORDER BY poker_player.Earnings DESC LIMIT 1
medium gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1

eval_err_num:511
easy pred: SELECT MAX(Final_Table_Made) AS Max_Final_Table_Made FROM ( SELECT *, COUNT(*) over (ORDER BY Earnings) as num_playing_table, COUNT(*) over (ORDER BY Final_Table_Made) as num_final_table_made FROM "poker_player" WHERE Earnings < 200000 ) table_selection WHERE Final_Table_Made > 0
easy gold: SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000

eval_err_num:512
easy pred: SELECT MAX(Final_Table_Made) FROM "poker_player" WHERE "Poker_Player_ID" IN ( SELECT "Poker_Player_ID" FROM "poker_player" WHERE final_table_Made < 200000 )
easy gold: SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000

eval_err_num:513
easy pred: SELECT * FROM poker_player WHERE name = 'John Doe'
easy gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID

eval_err_num:514
easy pred: SELECT t1.Name FROM "poker_player" t1 INNER JOIN "people" t2 ON t1.People_ID = t2.People_ID WHERE t2.Nationality = ' 中国人'
easy gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID

eval_err_num:515
medium pred: SELECT p.Name FROM poker_player p INNER JOIN people p1 ON p.People_ID = p1.People_ID INNER JOIN people p2 ON p1.People_ID = p2.People_ID AND p2.Height > p1.Height WHERE p.Earnings > 300000
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000

eval_err_num:516
medium pred: SELECT t1.Name FROM "poker_player" t1 INNER JOIN "people" t2 ON t1.People_ID = t2.People_ID AND t1.Earnings > 300000
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000

eval_err_num:517
medium pred: SELECT name FROM "poker_player" ORDER BY Final_Table_Made DESC, name DESC
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made

eval_err_num:518
medium pred: SELECT name FROM poker_player ORDER BY Final_Table_Made DESC LIMIT 10
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made

eval_err_num:519
hard pred: SELECT birth_date FROM "poker_player" WHERE Final_Table_Made = (SELECT min(Final_Table_Made) FROM "poker_player") AND Earnings = (SELECT min(Earnings) FROM "poker_player")
hard gold: SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1

eval_err_num:520
hard pred: SELECT birth_Date FROM "poker_player" WHEREPoker_Player_ID IN (SELECT People_ID FROM "people" ORDER BYEarnings DESC LIMIT 1)
hard gold: SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1

eval_err_num:521
hard pred: SELECT t1. Money_Rank FROM "poker_player" t1 INNER JOIN "people" t2 ON t1.People_ID = t2.People_ID WHERE t2.Height = ( SELECT MAX(height) FROM "people" )
hard gold: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1

eval_err_num:522
hard pred: SELECT Poker_Player_ID, MAX(Money_Rank) as "Money_Rank", MAX(Earnings) as "Earnings" FROM "poker_player", ("Poker_Player_ID") AS source_table WHERE "Poker_Player_ID" = "Poker_Player_ID" AND "Final_Table_Made" = "Final_Table_Made" AND "Height" > ( SELECT MAX(Height) FROM "people" )
hard gold: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1

eval_err_num:523
medium pred: SELECT AVG(Earnings) FROM "poker_player" WHERE "Poker_Player_ID" IN ( SELECT "Poker_Player_ID" FROM "poker_player" WHERE "Height" > 200 )
medium gold: SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200

eval_err_num:524
medium pred: SELECT AVG(Earnings) FROM "poker_player" WHERE "Height" > 200
medium gold: SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200

eval_err_num:525
medium pred: SELECT name FROM "poker_player" ORDER BYEarnings DESC
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC

eval_err_num:526
medium pred: SELECT name FROM "poker_player" WHERE Final_Table_Made = 'ANL-BMR' ORDER BY Earnings DESC
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC

eval_err_num:527
medium pred: SELECT nationality, COUNT(*) as num_people FROM "people" GROUP BY nationality ORDER BY num_people DESC
medium gold: SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality

eval_err_num:528
medium pred: SELECT COUNT(*) as num_of_people_of_Nationality FROM "people" GROUP BY "Nationality"
medium gold: SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality

eval_err_num:529
hard pred: SELECT nationality FROM "people" GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:530
hard pred: SELECT nationality FROM "people" GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:531
easy pred: SELECT nationality FROM "poker_player" WHERE "Poker_Player_ID" IN ( SELECT "People_ID" FROM "people" GROUP BY "Nationality" HAVING COUNT(DISTINCT "Poker_Player_ID") >= 2 )
easy gold: SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2

eval_err_num:532
easy pred: SELECT nationality FROM "poker_player" GROUP BY nationality HAVING COUNT(DISTINCT "people"." People_ID") > 1
easy gold: SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2

eval_err_num:533
medium pred: SELECT Name,Birth_Date FROM "people" ORDER BY Name ASC
medium gold: SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC

eval_err_num:534
medium pred: SELECT Name,Birth_Date FROM "people" ORDER BY Name ASC
medium gold: SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC

eval_err_num:535
easy pred: SELECT Name FROM "people" WHERE Nationality != 'Russia'
easy gold: SELECT Name FROM people WHERE Nationality != "Russia"

eval_err_num:536
easy pred: SELECT Name FROM "people" WHERE Nationality NOT LIKE 'RU%'
easy gold: SELECT Name FROM people WHERE Nationality != "Russia"

eval_err_num:537
hard pred: SELECT Name FROM people WHERE People_ID不等于1
hard gold: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)

hard pred: SELECT Name FROM people WHERE Nationality = '是中国人' OR Nationality = '是美国人' OR Nationality = '是日本人' OR Nationality = '是韩国人'
hard gold: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)

eval_err_num:538
easy pred: SELECT COUNT(DISTINCTDISTINCT nationality) AS distinct_ nationality_count FROM "people"
easy gold: SELECT count(DISTINCT Nationality) FROM people

eval_err_num:539
easy pred: SELECT COUNT(DISTINCT "Nationality") AS "Number_of_Nationalities"
easy gold: SELECT count(DISTINCT Nationality) FROM people

eval_err_num:540
easy pred: SELECT COUNT(*) FROM `Area_CODE_STATE`
easy gold: SELECT count(*) FROM area_code_state

eval_err_num:541
medium pred: SELECT Contestant_number, Contestant_name FROM `votes` ORDER BY Contestant_name DESC
medium gold: SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC

eval_err_num:542
medium pred: SELECT * FROM `VOTES`
medium gold: SELECT vote_id ,  phone_number ,  state FROM votes

eval_err_num:543
medium pred: SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE
medium gold: SELECT max(area_code) ,  min(area_code) FROM area_code_state

eval_err_num:544
easy pred: SELECT DATE_ADD(MAX('created', 'timestamp'), INTERVAL 1 DAY) AS last_date_created FROM `VOTES` WHERE `state` = 'CA'
easy gold: SELECT max(created) FROM votes WHERE state  =  'CA'

eval_err_num:545
easy pred: SELECT Contestant_name FROM `CONTESTANTS` WHERE Contestant_name != 'Jessie Alloway'
easy gold: SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'

medium pred: SELECT DISTINCT state, created FROM votes ORDER BY created DESC
medium gold: SELECT DISTINCT state ,  created FROM votes

eval_err_num:546
medium pred: SELECT Contestant_number, Contestant_name FROM `VOTES` WHERE ` Contestant_number` IN ( SELECT Contestant_number FROM `CONTESTANTS` WHERE ` Contestant_number` >= 2 )
medium gold: SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2

eval_err_num:547
extra pred: SELECT Contestant_number, Contestant_name FROM `VOTES` WHERE `vote_id` = ( SELECT ` Contestant_number` FROM `CONTESTANTS` WHERE ` Contestant_number` IN ( SELECT Contestant_number FROM `VOTES` WHERE `vote_id` = $ vote_id ) )
extra gold: SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1

eval_err_num:548
medium pred: SELECT Contestant_number, COUNT(*) FROM `votes` WHERE `state` = 'NY' or `state` = 'CA'
medium gold: SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'

eval_err_num:549
extra pred: SELECT COUNT(*) FROM `VOTES` WHERE `vote_id` NOT IN (SELECT ` Contestant_number` FROM `CONTESTANTS`)
extra gold: SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )

eval_err_num:550
extra pred: SELECT `area_code` FROM `votes` WHERE `vote_id` IN (SELECT ` Contestant_number` FROM `CONTESTants` WHERE ` Contestant_number` >= (SELECT MAX(` Contestant_number`) FROM `votes`)) GROUP BY `area_code`
extra gold: SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1

eval_err_num:551
medium pred: SELECT DATE_ADD(CREATE_DATE, INTERVAL 1 DAY) AS created_date, 她把电话打到了888-888-8888。 SELECT DATE_ADD(CREATE_DATE, INTERVAL 1 DAY) AS created_date, 她把电话打到了888-888-8888。 SELECT DATE_ADD(CREATE_DATE, INTERVAL 1 DAY) AS created_date, 她把电话打到了888-888-8888。
medium gold: SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'

eval_err_num:552
extra pred: SELECT area_code FROM votes WHERE vote_id IN ( SELECT vote_id FROM ( SELECT * FROM Contestants WHERE Contestant_number = ( SELECT Contestant_number FROM areas_code_state WHERE area_code = '877-XXXX' ) AS candidate ) AS subquery )
extra gold: SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'

eval_err_num:553
medium pred: SELECT Contestant_name FROM `CONTESTANTS` WHERE Contestant_name LIKE '%Al%'
medium gold: select contestant_name from contestants where contestant_name like "%al%"

eval_err_num:554
easy pred: SELECT t1.Name FROM country t1 JOIN countrylanguage t2 ON t1.Code = t2.CountryCode
easy gold: SELECT Name FROM country WHERE IndepYear  >  1950

eval_err_num:555
easy pred: SELECT COUNT(*) FROM `country` WHERE `Code` = '共和国'
easy gold: SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"

eval_err_num:556
easy pred: SELECT COUNT(DISTINCT `code`) AS countries_with_republics FROM `country` WHERE ` GovernmentForm` = ' Republic'
easy gold: SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"

eval_err_num:557
easy pred: SELECT t.SurfaceArea FROM country t, city c, country_language cc WHERE t.Code = cc.CountryCode AND t.Region = cc.Region AND cc.Language = t.Language
easy gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"

eval_err_num:558
easy pred: SELECT sum(t1.SurfaceArea) AS total_surface_area FROM country t1 JOIN countrylanguage t2 ON t1.Code = t2.CountryCode WHERE t2.Language = 'English'
easy gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"

eval_err_num:559
easy pred: `SELECT DISTINCTContinent FROM country;`
easy gold: SELECT Continent FROM country WHERE Name  =  "Anguilla"

eval_err_num:560
easy pred: SELECT t1.Continent FROM `country` t1 WHERE t1.Code = 'Anguilla'
easy gold: SELECT Continent FROM country WHERE Name  =  "Anguilla"

eval_err_num:561
medium pred: SELECT region FROM city WHERE name = 'Kabul'
medium gold: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"

eval_err_num:562
medium pred: SELECT region FROM city WHERE city.id = ( SELECT id FROM sqlite_sequence WHERE name = 'Kabul' )
medium gold: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"

extra pred: SELECT Language FROM countrylanguage WHERE countryCode = 'Aruba'
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1

eval_err_num:563
extra pred: The language spoken in Aruba is English.
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1

eval_err_num:564
medium pred: SELECT city.Name, city. District, city.Population, city.LifeExpectancy, city.GNP, city.GNPOld, country.Name, country.Continent, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.HeadOfState, country.Capital FROM city INNER JOIN country ON city.CountryCode = country.Code INNER JOIN sqlite_sequence ON city. sqlite_sequence = sqlite_sequence.name WHERE city.Name LIKE '% Brazil%' AND sqlite_sequence.seq = 1
medium gold: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"

eval_err_num:565
medium pred: SELECT city.name, city.population, city.lifeExpectancy, FROM city INNER JOIN country ON city.CountryCode = country.Code INNER JOIN sqlite_sequence ON city.ID = sqlite_sequence.name ORDER BY city.name, sqlite_sequence.seq LIMIT 1
medium gold: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"

medium pred: SELECT region, population FROM country WHERE code = 'Angola'
medium gold: SELECT Population ,  Region FROM country WHERE Name  =  "Angola"

eval_err_num:566
medium pred: SELECT region FROM city INNER JOIN country ON city.ID = country.Code WHERE country.Name = 'Angola'; SELECT population FROM city INNER JOIN country ON city.ID = country.Code WHERE country.Name = 'Angola'
medium gold: SELECT Population ,  Region FROM country WHERE Name  =  "Angola"

easy pred: SELECT LifeExpectancy FROM country WHERE Continent = 'Central Africa'
easy gold: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"

eval_err_num:567
easy pred: SELECT LifeExpectancy = (SELECT MAX(LifeExpectancy) FROM city WHERE country_code = 'ZANDE') / 1000 FROM country
easy gold: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"

hard pred: SELECT Name FROM country WHERE LifeExpectancy = (SELECT MAX(LifeExpectancy) FROM country)
hard gold: SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1

eval_err_num:568
hard pred: SELECT t1.Name AS country_name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.Code = t2.CountryCode JOIN city AS t3 ON t1.Code = t3.CountryCode
hard gold: SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1

eval_err_num:569
medium pred: SELECT SUM(population) as total_population, MAX(GNP) as maximum_GNP FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia'
medium gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"

eval_err_num:570
medium pred: SELECT SUM(人口) AS population, MAX(GNP) AS largest_gnp FROM city, country WHERE city.CountryCode = country.Code AND country.Continent = 'Asia'
medium gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"

eval_err_num:571
medium pred: SELECT t1.LifeExpectancy FROM country as t1 JOIN countrylanguage as t2 ON t1.Code = t2.CountryCode JOIN city as t3 ON t1.Code = t3.CountryCode AND t2.Language = t3.Language AND t3.Population > 0 WHERE t1.Continent = ' Africa' AND t2.Language = 'F' AND t3.Population > 0
medium gold: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"

eval_err_num:572
medium pred: SELECT LifeExpectancy = (SELECT t2.LifeExpectancy FROM country as t1 join countrylanguage as t2 on t1.Code = t2.CountryCode WHERE t1.Continent = ' Africa' AND t2.Language = 'Republic') FROM country
medium gold: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"

eval_err_num:573
medium pred: SELECT SUM(地表面积) AS total_surface_area FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHEREContinent = 'Asia' AND Language = 'F'
medium gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"

eval_err_num:574
medium pred: SELECT SUM(SELECT t2.SurfaceArea FROM country as t1 join countrylanguage as t2 on t1.Code = t2.CountryCode WHERE t2.Continent = 'Asia') or SUM(SELECT t3.SurfaceArea FROM country as t1 join countrylanguage as t3 on t1.Code = t3.CountryCode WHERE t3.Continent = ' Europe') AS total_surface_area
medium gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"

easy pred: SELECT population FROM city WHERE name = ' Gelderland'
easy gold: SELECT sum(Population) FROM city WHERE District  =  "Gelderland"

eval_err_num:575
easy pred: SELECT SUM(population) AS total_population FROM city WHERE District = ' Gelderland'
easy gold: SELECT sum(Population) FROM city WHERE District  =  "Gelderland"

eval_err_num:576
medium pred: SELECT AVG(gnp) AS avg_gnp, SUM(population) AS total_population FROM ( SELECT gnp, population, 0 AS id, 'US territory' AS country_code, '0' AS District, 0 AS population, 0 AS iq_year, 0 AS lifeExpectancy, 0 AS GNP, 0 AS GNP_old, 'LocalName' AS government_form, 0 AS HeadOfState, 0 AS Capital, 'Code2' AS Code2 FROM country WHERE code = 'US territory' GROUP BY gnp, population ) t GROUP BY id ORDER BY id
medium gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"

eval_err_num:577
medium pred: SELECT mean_gnp = SELECT sum(t2.gnp) FROM country_table t1 JOIN country_table t2 ON t1.Code = t2.Code AND t1.Continent = 'US' GROUP BY t2.Code; SELECT total_population = SELECT sum(t3.population) FROM city_table t1 JOIN city_table t2 ON t1.ID = t2.ID AND t1.Name = t2.Name JOIN country_table t3 ON t2.CountryCode = t3.Code GROUP BY t1.Name, t2.Name, t3.Code
medium gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"

eval_err_num:578
easy pred: SELECT COUNT(DISTINCT `Language`) AS total_languages FROM `countrylanguage`
easy gold: SELECT count(DISTINCT LANGUAGE) FROM countrylanguage

eval_err_num:579
easy pred: SELECT COUNT(DISTINCT Language) AS num_ languages
easy gold: SELECT count(DISTINCT LANGUAGE) FROM countrylanguage

eval_err_num:580
easy pred: SELECT COUNT(DISTINCT `type`) AS `count` FROM `country` WHERE `Continent` = ' Africa'
easy gold: SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"

eval_err_num:581
easy pred: SELECT COUNT(DISTINCT COLUMN_NAME) AS COUNT_DISTINCT FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'city' AND COLUMN_NAME = ' GovernmentForm'
easy gold: SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"

eval_err_num:582
medium pred: SELECT COUNT(*) AS total_languages FROM countrylanguage WHERE country = 'Aruba'
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"

eval_err_num:583
medium pred: SELECT COUNT(DISTINCT `Language`) AS languages_ spoken FROM `countrylanguage` WHERE `CountryCode` = 'Aruba'
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"

eval_err_num:584
medium pred: SELECT COUNT(DISTINCT language) FROM `countrylanguage`
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"

eval_err_num:585
medium pred: SELECT COUNT(*) AS num_Official_Languages FROM countrylanguage WHERE country_code = ' Afghanistan' AND language = ' English'
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"

eval_err_num:586
extra pred: 查询结果:
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:587
extra pred: SELECT t1.Name as Name, t2.Name asContinent, t3.Name asRegion, t4.Name asSurfaceArea, t5.Name asIndepYear, t6.Name asPopulation, t7.Name asLifeExpectancy, t8.Name asGNP, t9.Name asGNPOld, t10.Name asLocalName, t11.Name asGovernmentForm, t12.Name asHeadOfState, t13.Name asCapital, t14.Name asCode2, t15.Name asCode FROM country t1 INNER JOIN countrylanguage t2 ON t1.Code = t2.CountryCode INNER JOIN country t3 ON t2.CountryCode = t3.Code INNER JOIN city t4 ON t3. District = t4.ID INNER JOIN sqlite_sequence t5 ON t4.Name = t5.name INNER JOIN countrylanguage t6 ON t5.seq = t6.Language GROUP BY t1.Code, t2.Code, t3.Code, t4.ID, t5.seq, t6.Language, t7.Name, t8.Name, t9.Name, t10.Name, t11.Name, t12.Name, t13.Name, t14.Name, t15.Name HAVING COUNT(DISTINCT t6.Language) > (SELECT COUNT(DISTINCT t6.Language) FROM countrylanguage t6 WHERE t6.CountryCode = t1.Code)
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:588
extra pred: SELECT continent FROM countryLanguage WHERE Language >= 'en'
extra gold: SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:589
extra pred: SELECT t1.Continent FROM country AS t1 JOIN countrylanguage AS t2 ON t1.Code = t2.CountryCode GROUP BY t2.Continent HAVING COUNT(*) > 1
extra gold: SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:590
easy pred: SELECT COUNT(*) FROM `countrylanguage` WHERE `Language` = 'nl'
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")

eval_err_num:591
easy pred: SELECT COUNT(*) FROM `country` WHERE `Code` IN ('NL', 'EN')
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")

eval_err_num:592
extra pred: SELECT t1.Name FROM country t1 INNER JOIN countrylanguage t2 ON t1.Code = t2.CountryCode AND t1.Language = t2.Language WHERE t2.IsOfficial = 'F'
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"

eval_err_num:593
extra pred: SELECT `Code` FROM `country` WHERE `Code` IN ('France', '瑞士') AND `Language` = 'English' AND `Language` = 'French'
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"

eval_err_num:594
extra pred: SELECT Name from countrylanguage WHERE Language = 'E' AND Language = 'F'
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"

eval_err_num:595
extra pred: SELECT `name` FROM `country` WHERE `Code` = '法国' AND `Language` = 'EN'
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"

eval_err_num:596
medium pred: SELECT COUNT(DISTINCTContinent) FROM country
medium gold: SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"

eval_err_num:597
medium pred: SELECT COUNT(*) FROM `country` WHERE `Continent` = 'Asia'
medium gold: SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"

eval_err_num:598
hard pred: SELECT * FROM `country` WHERE `Language` = 'NL' || 'EG'
hard gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"

eval_err_num:599
hard pred: SELECT region FROM `city` c INNER JOIN `country` c1 ON c.Code = c1.Code AND c1.Name = 'NL' INNER JOIN `countrylanguage` cpp ON c.Code = cpp.CountryCode AND cpp.Language = 'NL' WHERE cpp.IsOfficial = 'F'
hard gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"

eval_err_num:600
extra pred: SELECT Country.Code FROM Country INNER JOIN countryLanguage ON Country.Code = countryLanguage.CountryCode INNER JOIN sqlite_sequence ON countryLanguage.CountryCode = sqlite_sequence.name WHERE sqlite_sequence.seq = ( SELECT MAX(seq) FROM sqlite_sequence WHERE name = 'SQLite_sequence_1' ) OR sqlite_sequence.seq = ( SELECT MAX(seq) FROM sqlite_sequence WHERE name = 'SQLite_sequence_2' ) OR Language.IsOfficial = 'F'
extra gold: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"

eval_err_num:601
extra pred: SELECT * FROM `city` WHERE `CountryCode` IN (SELECT `Code` FROM `countrylanguage` WHERE `Language` = 'EN' OR `Language` = 'Dutch')
extra gold: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"

extra pred: SELECT language FROM countrylanguage WHERE countryCode = 'Asia' AND Percentage > 0.5
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1

eval_err_num:602
extra pred: SELECT Language FROM country GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1

eval_err_num:603
hard pred: SELECT language FROM `countrylanguage` WHERE `CountryCode` IN (SELECT `Code` FROM `country`) AND `Language` = 'ES'
hard gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1

eval_err_num:604
hard pred: SELECT Language FROM `countrylanguage` WHERE `CountryCode` = 'US' AND `Language` = 'English'
hard gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1

eval_err_num:605
extra pred: SELECT city.name, COUNT(*) as population_in_english FROM city JOIN country ON city.CountryCode = country.Code JOIN sqlite_sequence ON country.Code = sqlite_sequence.name GROUP BY city.name ORDER BY population_in_english DESC LIMIT 1
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1

extra pred: SELECT name, population FROM city ORDER BY population DESC LIMIT 1
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1

eval_err_num:606
hard pred: SELECT Country.Name, Country.Population, Country.LifeExpectancy FROM Country INNER JOIN city ON City.CountryCode = Country.Code INNER JOIN sqlite_sequence ON sqlite_sequence.name = City.ID WHERE sqlite_sequence.seq = ( SELECT MAX(seq) FROM sqlite_sequence )
hard gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1

eval_err_num:607
hard pred: SELECT Country.Name, Country.Population, Country.LifeExpectancy, Country.GNP, Country.GNPOld, Country.LocalName, Country.GovernmentForm, Country.HeadOfState, Country.Capital, Country.Code2 FROM Country WHERE Country.Continent = 'Asia' AND Country.SurfaceArea > ( SELECT Max(SurfaceArea) FROM city WHERE City.CountryCode = Country.Code ) ORDER BY Country.Population DESC, Country.LifeExpectancy DESC
hard gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1

eval_err_num:608
extra pred: SELECT t1.LifeExpectancy FROM country t1 JOIN countrylanguage t2 ON t1.Code = t2.CountryCode AND t2.IsOfficial = 'F'
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")

eval_err_num:609
extra pred: SELECT t1.LifeExpectancy FROM country_language t1 JOIN city_ibfk_1 t2 ON t1.Language = t2.CountryCode AND t1.Country = 'United States' JOIN country t3 ON t1.Language = t3.Code AND t3.Code = 'United States' WHERE t2.Population = 1283868 AND t3.Population > 0 GROUP BY t1.Language, t2.CountryCode, t3.Code HAVING COUNT(*) > 1
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")

eval_err_num:610
extra pred: SELECT SUM(population) FROM city WHERE countryCode NOT IN (SELECT code FROM countryLanguage WHERE language != 'English')
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")

eval_err_num:611
extra pred: SELECT COUNT(*) FROM `city` WHERE `CountryCode` NOT IN (SELECT `Code` FROM `countrylanguage`)
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")

eval_err_num:612
medium pred: SELECT language FROM countryLanguage WHERE Code = 'B' AND Language = 'E'
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"

eval_err_num:613
medium pred: SELECT Language FROM `countrylanguage` WHERE `CountryCode` = 'B暴露于社会大众之中,作为改善社会公共生活,推进社会发展进步的动力。'
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"

eval_err_num:614
medium pred: SELECT COUNT(DISTINCT language) FROM `countrylanguage`
medium gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"

eval_err_num:615
medium pred: SELECT COUNT(DISTINCT language) as total_num_of_ DISTINCT_languages FROM countrylanguage WHERE country_code >= 1930
medium gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"

eval_err_num:616
hard pred: SELECT Code FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHEREContinent = ' Europe')
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")

eval_err_num:617
hard pred: SELECT * FROM `country` WHERE `SurfaceArea` > (SELECT MAX(SurfaceArea) FROM `country` WHEREContinent = ' Europe')
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")

eval_err_num:618
extra pred: SELECT * FROM `city` WHERE `Population` < (SELECT MAX(`Population`) FROM `country` WHERE `Continent` = 'Asia')
extra gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")

eval_err_num:619
extra pred: SELECT * FROM `city` WHERE `Population` < (SELECT MAX(Population) FROM `country` WHERE `Continent` = 'Asia')
extra gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")

eval_err_num:620
extra pred: SELECT Country.Code FROM Country WHERE Population > (SELECT MAX( population) FROM country WHEREContinent = 'Asia')
extra gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  "Africa")

eval_err_num:621
extra pred: SELECT * FROM `city` WHERE `CountryCode` IN (SELECT `Code` FROM `country` WHERE `Population` > (SELECT `population` FROM `city` WHERE `CountryCode` = `city`.`Code`))
extra gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")

eval_err_num:622
hard pred: SELECT Code FROM country WHERE Language != 'English'
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

eval_err_num:623
hard pred: SELECT Code FROM country WHERE Code NOT IN (SELECT Code FROM countryLanguage)
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

eval_err_num:624
easy pred: SELECT t1.Code FROM `country` t1 INNER JOIN `countrylanguage` t2 ON t1.Code = t2.CountryCode WHERE t2.Language != 'English'
easy gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"

eval_err_num:625
easy pred: SELECT Code FROM countrylanguage WHERE Language NOT LIKE '% English %'
easy gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"

eval_err_num:626
hard pred: SELECT Code FROM country WHERE Language != 'English' AND GovernmentForm != 'Republic'
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

eval_err_num:627
hard pred: SELECT Code FROM country WHERE !('English' OR Name IN ('Republic', 'SSR', 'NCR', 'SAR', 'SSRN', 'SGN', 'ROK', 'PNG', 'IQ', 'PK', 'NE', 'ML', 'MH', 'CM', 'FJ', 'SM', 'HR', 'TR', 'IQ', 'VT', 'BG', 'PK', 'RO', 'SE', 'PH', 'PKR', 'NLG', 'PNGX', 'SARX', 'SGNX', 'ROKX', 'SSRNX', 'SGNX', 'ROKX', 'SSRNX', 'SARX', 'SGNX', 'ROKX', 'SSRNX', 'SGNX')) AND HeadOfState ≠ 'Head of State of a Republic' AND Capital ≠ ' Capital of a Republic' AND Code2 ≠ 'Code of a Republic'
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

eval_err_num:628
extra pred: SELECT * FROM city WHERE country_code NOT IN (SELECT country_code FROM countrylanguage)
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')

eval_err_num:629
extra pred: SELECT Name, country_code FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language != ' ENGLISH'
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')

eval_err_num:630
hard pred: SQL NOT GET: may be TIMEOUT
hard gold: select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  "asia"

eval_err_num:631
hard pred: SELECT c.Name, c.District, c.Population, CT.Name AS "Chinese Language" FROM city c INNER JOIN country CT ON c.CountryCode = CT.Code INNER JOIN sqlite_sequenceseq ON c.SQLiteSequence = CT.SQLiteSequence WHERE CT.Continent = "Asia" AND CT.Language = '中文' ORDER BY c.Name DESC, CT.Name DESC
hard gold: SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  "Asia"

eval_err_num:632
medium pred: SELECT Name, independenceYear, SurfaceArea FROM country ORDER BY population DESC LIMIT 1
medium gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1

medium pred: SELECT name, INdepYear, surfaceArea FROM country ORDER BY population DESC LIMIT 1
medium gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1

eval_err_num:633
medium pred: SELECT c.Name, c.Continent, c.Region, c.SurfaceArea, c.IndepYear, c.Population, c.LifeExpectancy, c.GNP, c.GNPOld, l.LocalName, l.HeadOfState, l.Capital FROM country c INNER JOIN city c2 ON c.Code = c2.CountryCode INNER JOIN sqlite_sequenceseqseq ON c2. sqlite_sequence_name = seq.seq INNER JOIN countrylanguage c3 ON c2.CountryCode = c3.CountryCode INNER JOIN table_numbersseq ON c3.CountryCode = table_numbersseq.name WHERE c3.Language = 'F' AND c.SurfaceArea = ( SELECT MAX(a.SurfaceArea) FROM country a WHERE a.Code = c.Code )
medium gold: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1

medium pred: SELECT Country.Name, Country.Population, Country.HeadOfState FROM Country JOIN city ON Country.Code = city.CountryCode JOIN sqlite_sequence ON city.ID = sqlite_sequence.name ORDER BY Country.SurfaceArea DESC LIMIT 1
medium gold: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1

eval_err_num:634
medium pred: SELECT country.Name, COUNT(DISTINCT language.Language) FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(DISTINCT language.Language) >= 3
medium gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2

eval_err_num:635
medium pred: SELECT Country.Name, COUNT(DISTINCT Language.Name) as NumLanguages FROM country INNER JOIN countrylanguage ON Country.Code = countrylanguage.CountryCode GROUP BY Country.Code HAVING COUNT(DISTINCT Language.Name) > 2
medium gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2

eval_err_num:636
extra pred: SELECT district, COUNT(*) as num_city_population FROM ( SELECT city.District, COUNT(*) as num_city_population, SUM(population) / COUNT(*) as avg_population FROM city JOIN country ON city.CountryCode = country.Code JOIN sqlite_sequence ON sqlite_sequence.name = city.ID GROUP BY city.District ) subquery ON subquery.num_city_population > subquery. avg_population
extra gold: SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District

eval_err_num:637
extra pred: SELECT t1. District, COUNT(*) as num_cities FROM city t1 JOIN country t2 ON t1. District = t2. District AND t1. Population > (SELECT avg(population) FROM city) GROUP BY t1. District HAVING COUNT(*) > 1
extra gold: SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District

eval_err_num:638
medium pred: SELECT t1.LocalName, t2.TotalPopulation FROM city t1 INNER JOIN city t2 ON t1.Name = t2.Name AND t1.CountryCode = t2.CountryCode INNER JOIN country t3 ON t1.Code = t3.Code INNER JOIN sqlite_sequence t4 ON t3.Code = t4.name WHERE t2.LifeExpectancy > 72 GROUP BY t1.Name, t2.TotalPopulation HAVING COUNT(*) > 1
medium gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72

eval_err_num:639
medium pred: SELECT c.Name AS country_name, c.Continent AS country_Continent, c.Region AS country_Region, s.Name AS language_name, s.Language AS language_Code, sum(p.population) AS population_total, avg(p.lifeExpectancy) AS lifeExpectancy_avg FROM city c JOIN country c ON c.Code = c.Code JOIN countryLanguage s ON c.Code = s.Code AND s.Language = s.Language JOIN sqlite_sequence s ON s.name = sqlite_sequence.name JOIN population p ON p.id = s.population GROUP BY c.Code, c.Name, c.Continent, c.Region, s.Language, s.Language Code, p.lifeExpectancy_avg HAVING avg(p.lifeExpectancy) > 72
medium gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72

eval_err_num:640
medium pred: SELECT c.Continent, AVG(c.LifeExpectancy) AS avg_life_expectancy, SUM(c.Population) AS total_population FROM city c INNER JOIN country c ON c.Code = c.CountryCode WHERE c.LifeExpectancy < 72 GROUP BY c.Continent
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72

eval_err_num:641
medium pred: SELECT c.Code, COUNT(DISTINCT c.Name) AS TotalPop, SUM(c.LifeExpectancy) / COUNT(DISTINCT c.Name) AS AvgLifeExpectancy FROM city c JOIN country c ON c.Code = c.CountryCode JOIN sqlite_sequenceseq ON c.ID = sqlite_sequenceseq.name GROUP BY c.Code, sqlite_sequenceseq.name HAVING sqlite_sequenceseq.averageLife expectancy < 72
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72

eval_err_num:642
medium pred: SELECT c.Name, c.Continent, c.Region, c.SurfaceArea FROM country c INNER JOIN countrylanguage cln ON c.Code = cln.CountryCode INNER JOIN city c2 ON cln.Language = c2.Language AND c2.CountryCode = c.Code WHERE cln.CountryCode = ( SELECT CountryCode FROM countrylanguage GROUP BY CountryCode ORDER BY SurfaceArea DESC LIMIT 5 ) GROUP BY c.Name, c.Continent, c.Region, c.SurfaceArea
medium gold: SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5

eval_err_num:643
medium pred: SELECT c.Name, c.SurfaceArea FROM country c INNER JOIN city c1 ON c.Code = c1.CountryCode INNER JOIN sqlite_sequence c2 ON c1.ID = c2.name GROUP BY c.Code ORDER BY SurfaceArea DESC LIMIT 5
medium gold: SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5

medium pred: SELECT Code, Name FROM country ORDER BY population DESC LIMIT 3
medium gold: SELECT Name FROM country ORDER BY Population DESC LIMIT 3

eval_err_num:644
medium pred: SELECT `Code`, `Name` FROM `country` ORDER BY `Population` DESC LIMIT 3
medium gold: SELECT Name FROM country ORDER BY Population DESC LIMIT 3

medium pred: SELECT name FROM country WHERE population < (SELECT population FROM country ORDER BY population DESC LIMIT 3)
medium gold: SELECT Name FROM country ORDER BY Population ASC LIMIT 3

eval_err_num:645
medium pred: SELECT `Code`, COUNT(*) AS `Count` FROM `city` JOIN `country` ON `city``.`CountryCode` = `Country``.`Code` JOIN `countrylanguage` ON `city``.`CountryCode` = `CountryLanguage``.`CountryCode` GROUP BY `Code` ORDER BY `Count` DESC LIMIT 3
medium gold: SELECT Name FROM country ORDER BY Population ASC LIMIT 3

eval_err_num:646
easy pred: SELECT COUNT(*) as num_ countries FROM country WHEREContinent='Asia'
easy gold: SELECT count(*) FROM country WHERE continent  =  "Asia"

eval_err_num:647
easy pred: SELECT COUNT(*) FROM country WHEREContinent='Asia'
easy gold: SELECT count(*) FROM country WHERE continent  =  "Asia"

eval_err_num:648
medium pred: SELECT Name,Continent from `country` WHERE population >= 80000
medium gold: SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"

medium pred: SELECT t1.Name FROM country as t1 JOIN city as t2 ON t1.Code = t2.CountryCode AND t2.Population = 80000
medium gold: SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"

eval_err_num:649
hard pred: SELECT SUM(population) AS total_population, AVG(surface_area) AS average_area FROM city, country WHERE city.CountryCode REFERENCES country.Code AND country.Continent = 'North America' AND country.SurfaceArea > 3000
hard gold: select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000

eval_err_num:650
hard pred: SELECT SUM( population) AS total_population, AVG( surfaceArea) AS average_surface_area FROM city, country WHERE city.CountryCode = country.Code AND country.SurfaceArea > 3000
hard gold: select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000

easy pred: SELECT * FROM city WHERE population between 160000 and 900000
easy gold: SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000

easy pred: SELECT name, population FROM city WHERE population >= 160000 AND population <= 900000
easy gold: select name from city where population between 160000 and 900000

eval_err_num:651
hard pred: SELECT Language FROM `countryLanguage` WHERE `Language` = ( SELECT Language FROM `country` WHERE Code = 'en' ORDER BY COUNT(*) DESC LIMIT 1 )
hard gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1

eval_err_num:652
hard pred: SELECT Language FROM `countryLanguage` WHERE Language = ( SELECT Language FROM `country` GROUP BY Code ORDER BY COUNT(*) DESC LIMIT 1 )
hard gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1

eval_err_num:653
medium pred: SELECT Country.Code, Country.Name, COUNT(DISTINCT Language.Code) AS LanguageCount, Language.Percentage FROM country INNER JOIN countryLanguage ON Country.Code = CountryLanguage.CountryCode INNER JOIN language ON Language.Code = CountryLanguage.Language GROUP BY Country.Code, Country.Name ORDER BY Language.Percentage DESC LIMIT 10
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode

eval_err_num:654
medium pred: SELECT country.Code, country.Name, country_language.Language, country_language.IsOfficial, (SELECT COUNT(*) FROM country_language WHERE country_language.CountryCode = country.Code AND language = country_language.Language) AS LanguageCount FROM country JOIN country_language ON country.Code = country_language.Code GROUP BY country.Code, country.Name ORDER BY LanguageCount DESC
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode

eval_err_num:655
extra pred: SELECT COUNT(DISTINCT country) FROM countrylanguage
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

eval_err_num:656
extra pred: SELECT COUNT(*) FROM `country` WHERE `Code` = 'ES' AND `Language` = 'ES'
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

eval_err_num:657
medium pred: SELECT Code FROM `country` WHERE Percentage > (SELECT Percentage FROM `countrylanguage` WHERE Language = 'Spanish')
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

eval_err_num:658
medium pred: SELECT Code FROM country WHERE Language = 'Spanish' AND Code2 = 'SPA'
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

eval_err_num:659
easy pred: SELECT COUNT(*) FROM "conductor" WHERE "Conductor_ID" = (SELECT COUNT(*) FROM "conductor")
easy gold: SELECT count(*) FROM conductor

eval_err_num:660
easy pred: SELECT COUNT(*) AS num_conductors FROM "conductor"
easy gold: SELECT count(*) FROM conductor

eval_err_num:661
easy pred: SELECT Name FROM "conductor" WHERE Age > 0 ORDER BY Age ASC
easy gold: SELECT Name FROM conductor ORDER BY Age ASC

eval_err_num:662
easy pred: SELECT Name from "conductor" order by Age
easy gold: SELECT Name FROM conductor ORDER BY Age ASC

eval_err_num:663
easy pred: SELECT Name FROMconductor WHERE Nationality NOT IN ('USA')
easy gold: SELECT Name FROM conductor WHERE Nationality != 'USA'

eval_err_num:664
easy pred: SELECT Name FROM "conductor" WHERE Nationality NOT IN ('USA')
easy gold: SELECT Name FROM conductor WHERE Nationality != 'USA'

easy pred: SELECT Record_Company FROM Orchestra WHERE Year_of_Founded > 2000 GROUP BY Record_Company ORDER BY Year_of_Founded DESC
easy gold: SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC

eval_err_num:665
easy pred: SELECT avg(Attendance) AS average_ attendance FROM "show"
easy gold: SELECT avg(Attendance) FROM SHOW

eval_err_num:666
easy pred: SELECT AVG(Attendance) ASAverage_ attendance FROM "show" GROUP BY "Show_ID"
easy gold: SELECT avg(Attendance) FROM SHOW

eval_err_num:667
medium pred: SELECT MAX(Share) AS maximum, MIN(Share) AS minimum FROM performance WHERE Type != 'Live final'
medium gold: SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"

eval_err_num:668
medium pred: SELECT MAX(Share) AS maximum_share, MIN(Share) AS minimum_share FROM performance WHERE Type NOT IN ('Live final', 'Home final')
medium gold: SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"

eval_err_num:669
easy pred: SELECT COUNT(DISTINCT `Nationality`) AS `num_different_nationalities` FROM `conductor`
easy gold: SELECT count(DISTINCT Nationality) FROM conductor

eval_err_num:670
easy pred: SELECT COUNT(DISTINCT `Nationality`) AS `Number_of_Nationalities` FROM `conductor`
easy gold: SELECT count(DISTINCT Nationality) FROM conductor

eval_err_num:671
easy pred: SELECT Name FROM "conductor" ORDER BY Year_of_Work DESC
easy gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC

eval_err_num:672
easy pred: SELECT Name FROM "conductor" WHERE Year_of_Work >= 2018 ORDER BY Year_of_Work DESC
easy gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC

eval_err_num:673
medium pred: SELECT Name FROM "conductor" WHERE Year_of_Work = ( SELECT MAX(Year_of_Work) FROM "conductor" GROUP BY Name )
medium gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1

eval_err_num:674
medium pred: The name of theconductor who has worked the greatest number of years is "David Beazley".
medium gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1

eval_err_num:675
medium pred: SELECT Conductor_ID, Name, Orchestra_ID FROMconductor JOIN Performance ON Conductor_ID = Performance_ID JOIN Show ON Conductor_ID = Show_ID
medium gold: SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID

eval_err_num:676
medium pred: SELECTConductor_ID, Name, Age, Nationality, Year_of_Work FROMconductor; SELECTOrchestra_ID, Name, Record_Company, Year_of_Founded,Major_Record_Format, PRIMARY KEY("Conductor_ID"),FOREIGN KEY("Conductor_ID") REFERENCESconductor("Conductor_ID"); SELECTPerformance_ID, Type, Date, Official_ratings_( Millions), Weekly_rank,Share, PRIMARY KEY("Performance_ID"),FOREIGN KEY("Conductor_ID") REFERENCESconductor("Conductor_ID"); SELECTShow_ID, Performance_ID, If_first_show, Result, Attendance, PRIMARY KEY("Show_ID"),FOREIGN KEY("Performance_ID") REFERENCESperformance("Performance_ID")
medium gold: SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID

eval_err_num:677
medium pred: SELECT Conductor_ID FROM "conductor" GROUP BY Conductor_ID HAVING COUNT(DISTINCT "orchestra".Conductor_ID) > 1
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1

eval_err_num:678
medium pred: SELECT DISTINCT Conductor.Name FROM Conductor JOIN Orchestra ON Conductor.Conductor_ID = Orchestra.Conductor_ID JOIN Performance ON Orchestra.Orchestra_ID = Performance.Orchestra_ID WHERE Performance.Orchestra_ID IS NULL
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1

eval_err_num:679
extra pred: SELECT t1.Name FROM "conductor" t1 INNER JOIN "orchestra" t2 ON t1.Conductor_ID = t2.Conductor_ID INNER JOIN "performance" t3 ON t2.Orchestra_ID = t3.Orchestra_ID WHERE t3.Official_ratings_(millions) = ( SELECT MAX(Official_ratings_( Millions)) FROM "performance" GROUP BY "conductor" HAVING COUNT(*) = ( SELECT COUNT(*) FROM "conductor" GROUP BY " Conductor_ID") )
extra gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:680
extra pred: The name of the Conductor who has conducted the most orchestras is "挥泪斩马茨" (油纸伞) - who is also the music arranger and Conductor for the Chinese show "The中长期计划" (中长期计划) and has conducted many high-profile orchestras in China.
extra gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:681
medium pred: SELECT name FROM "conductor" WHERE Conductor_ID >= 2008
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008

eval_err_num:682
medium pred: SELECT name FROM "conductor" WHERE Year_of_Work >= 2008
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008

eval_err_num:683
medium pred: SQL NOT GET: may be TIMEOUT
medium gold: SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company

eval_err_num:684
medium pred: SELECT Record_Company, COUNT(*) as总数 FROM Orchestra GROUP BY Record_Company ORDER BY 总数 DESC
medium gold: SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company

medium pred: SELECT major_record_format from orchestra order by count(*) asc
medium gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC

eval_err_num:685
medium pred: SELECT * FROM `orchestra` ORDER BY COUNT(*) DESC LIMIT 10
medium gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC

eval_err_num:686
hard pred: SELECT record_company FROM("conductor", "orchestra") c GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1

hard pred: SELECT Record_Company from Orchestra
hard gold: SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:687
hard pred: SELECT * FROM "orchestra" WHERE "Orchestra"."Name" = ''); -- 删除该等号,即可删除表中的未存在的子表
hard gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)

eval_err_num:688
hard pred: SELECT * FROM "orchestra" WHERE "Orchestra"."ID" = (SELECT COUNT(*) FROM "performance" WHERE "performance"."Orchestra_ID" = "orchestra"."ID")
hard gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)

eval_err_num:689
hard pred: SELECT DISTINCT t1.Record_Company FROM "orchestra" t1 INNER JOIN "performance" t2 ON t1.Orchestra_ID = t2.Performance_ID WHERE t1.Year_of_Founded <= 2003 AND t2.Year_of_Founded >= 2003
hard gold: SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003

eval_err_num:690
hard pred: SELECT Record_Company from "orchestra" WHERE Year_of_Founded < 2003 AND Year_of_Founded > 2003
hard gold: SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003

eval_err_num:691
medium pred: SELECT COUNT(*) FROM "orchestra" WHERE "major_Record_Format" = 'CD' OR "major_Record_Format" = 'DVD'
medium gold: SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"

eval_err_num:692
medium pred: SELECT COUNT(DISTINCT `Orchestra_ID`) AS num_orchestras FROM `conductor` JOIN `orchestra` ON `Conductor_ID` = `Orchestra_ID` WHERE `Major_Record_Format` = 'CD' 或者 SELECT COUNT(DISTINCT `Orchestra_ID`) AS num_orchestras FROM `conductor` JOIN `orchestra` ON `Conductor_ID` = `Orchestra_ID` WHERE `Major_Record_Format` = 'DVD'
medium gold: SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"

eval_err_num:693
medium pred: SELECT Year_of_Founded FROM orchestra WHERE orchestra.Year_of_Founded > 0 AND performance.Orchestra_ID IN ( SELECT DISTINCT寺.寺ID FROM寺.conductor WHERE寺.Conductor_ID IN (SELECTConductor_ID FROM Conductor) )
medium gold: SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1

eval_err_num:694
medium pred: SELECT Year_of_Founded FROM `orchestra` WHERE Year_of_Founded > 1
medium gold: SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1

eval_err_num:695
easy pred: SELECT COUNT(*) as num_highschoolers FROM Highschooler GROUP BY ID
easy gold: SELECT count(*) FROM Highschooler

eval_err_num:696
easy pred: SELECT COUNT(*) as num_highschoolers FROM Highschooler
easy gold: SELECT count(*) FROM Highschooler

medium pred: SELECT highschooler.name, highschooler.grade FROM Highschooler JOIN Friend ON highschooler.ID = Friend.student_id JOIN Likes ON highschooler.ID = Likes.student_id
medium gold: SELECT name ,  grade FROM Highschooler

easy pred: SELECT grade FROM Highschooler WHERE ID = 10
easy gold: SELECT grade FROM Highschooler WHERE name  =  "Kyle"

eval_err_num:697
medium pred: SELECT grade, COUNT(*) as num_highschoolers FROM Highschooler GROUP BY grade ORDER BY grade
medium gold: SELECT grade ,  count(*) FROM Highschooler GROUP BY grade

eval_err_num:698
medium pred: SELECT grade, COUNT(*) as num_highschoolers FROM Highschooler GROUP BY grade ORDER BY grade
medium gold: SELECT grade ,  count(*) FROM Highschooler GROUP BY grade

hard pred: SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) > 1
hard gold: SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1

eval_err_num:699
hard pred: SELECT grade FROM Highschooler WHERE ID IN (SELECT ID FROM Likes GROUP BY ID ORDER BY COUNT(*) DESC LIMIT 1)
hard gold: SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1

eval_err_num:700
easy pred: SELECT grade FROM Highschooler WHERE ID IN (SELECT ID FROM Friend WHERE student_id IN (SELECT student_id FROM Highschooler WHERE grade > 0) AND liked_id IN (SELECT ID FROM Friend WHERE liked_id IN (SELECT student_id FROM Highschooler WHERE grade > 0) AND liked_id > 0)) GROUP BY grade HAVING COUNT(DISTINCT student_id) >= 4
easy gold: SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4

eval_err_num:701
easy pred: SELECT grade FROM Highschooler WHERE ID IN (SELECT ID FROM Friend GROUP BY student_id HAVING COUNT(DISTINCT friend_id) >= 4)
easy gold: SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4

eval_err_num:702
medium pred: SELECT student_id, COUNT(*) as num_friend FROM Highschooler GROUP BY student_id ORDER BY num_friend DESC
medium gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id

eval_err_num:703
medium pred: SELECT students.ID, students.name, COUNT(*) as num_Friends FROM Highschooler students JOIN Friend students ON students.ID = students.student_id JOIN Likes students ON students.ID = students.student_id GROUP BY students.ID, students.name
medium gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id

eval_err_num:704
medium pred: SELECT s.name, COUNT(*) AS num_friends FROM Highschooler s INNER JOIN Friend f ON s.ID = f.student_id AND f.friend_id = s.ID INNER JOIN Likes l ON f.ID = l.student_id GROUP BY s.name
medium gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id

eval_err_num:705
medium pred: SELECT highschooler.name, Friend.student_id, Friend.friend_id, COUNT(DISTINCT Friend.student_id) as num_students_with_Friends FROM Highschooler INNER JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY highschooler.name, Friend.student_id, Friend.friend_id
medium gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id

eval_err_num:706
extra pred: SELECT name FROM Highschooler WHERE ID IN (SELECT ID FROM Friend WHERE student_id = Highschooler.ID AND liked_id = Highschooler.ID) GROUP BY name HAVING COUNT(DISTINCT liked_id) > (SELECT COUNT(DISTINCT student_id) FROM Friend WHERE student_id = Highschooler.ID)
extra gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:707
extra pred: SELECT s.name AS Name FROM Highschooler s INNER JOIN Friend f ON s.ID = f.student_id INNER JOIN Likes l ON f.friend_id = l.student_id WHERE l.liked_id IN (SELECT id FROM Likes WHERE liked_id = 1) GROUP BY s.ID ORDER BY COUNT(*) DESC LIMIT 1
extra gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

medium pred: SELECT highschooler.name FROM Highschooler JOIN Friend ON highschooler.ID = friend.student_id JOIN Likes ON highschooler.ID = Likes.student_id GROUP BY highschooler.ID HAVING COUNT(DISTINCT Friend.friend_id) >= 3
medium gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3

eval_err_num:708
medium pred: SELECT highschooler.name, friend.name, likes.name FROM Highschooler JOIN Friend ON highschooler.ID = friend.student_id JOIN Likes ON highschooler.ID = liked_id AND liked_id = friend.student_id WHERE highschooler.grade > 8 AND friend.student_id IN (SELECT student_id FROM likes) GROUP BY highschooler.name, friend.name, likes.name HAVING COUNT(DISTINCT liked_id) >= 3
medium gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3

eval_err_num:709
hard pred: SELECT name FROM Highschooler WHERE ID = ( SELECT ID FROM Friend WHERE student_id = 123 AND friend_id = 456 )
hard gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"

hard pred: SELECT name FROM Highschooler WHERE ID = 1; SELECT name FROM Friend WHERE student_id = 1 AND friend_id = 1; SELECT name FROM Likes WHERE student_id = 1
hard gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"

eval_err_num:710
medium pred: SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT student_id FROM Highschooler WHERE name = ' Kyle')
medium gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"

eval_err_num:711
medium pred: SELECT COUNT(*) AS num_of_Friends FROM Highschooler INNER JOIN Likes ON Highschooler.ID = Likes.student_id WHERE Highschooler.name = ' Kyle'
medium gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"

eval_err_num:712
hard pred: SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT ID FROM Friend WHERE student_id = '123456789')
hard gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend

hard pred: SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
hard gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend

hard pred: SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
hard gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id

eval_err_num:713
hard pred: SELECT name FROM Highschooler WHERE ID NOT IN (SELECT ID FROM Friend WHERE student_id = Highschooler.ID)
hard gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id

eval_err_num:714
hard pred: SELECT t1.ID FROM Highschooler t1 JOIN Friend t2 ON t1.ID = t2.student_id AND t2.friend_id = t1.ID JOIN Likes t3 ON t2.liked_id = t3.student_id WHERE t3.liked_id IS NOT NULL
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes

eval_err_num:715
hard pred: SELECT student_id FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = likes_id AND student_id = NULL) AND grade > 9
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes

eval_err_num:716
hard pred: SELECT s.name FROM Highschooler s INNER JOIN Friend f ON s.ID = f.student_id INNER JOIN Likes l ON f.ID = l.liked_id WHERE l.liked_id IN (SELECT student_id FROM Likes)
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id

eval_err_num:717
hard pred: SELECT highschooler.name, likes.name FROM Highschooler INNER JOIN Friend ON highschooler.ID = Friend.student_id INNER JOIN Likes ON highschooler.ID = Likes.student_id WHERE Friend.liked_id = Likes.student_id AND Friend.student_id = ?
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id

eval_err_num:718
medium pred: SELECT student_id, COUNT(*) as num_likes FROM Likes GROUP BY student_id
medium gold: SELECT student_id ,  count(*) FROM Likes GROUP BY student_id

eval_err_num:719
medium pred: SELECT student_id, COUNT(*) as num_likes FROM Likes GROUP BY student_id
medium gold: SELECT student_id ,  count(*) FROM Likes GROUP BY student_id

eval_err_num:720
medium pred: SELECT h.name, COUNT(f.student_id) AS num_likes FROM Highschooler h INNER JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID
medium gold: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id

eval_err_num:721
medium pred: SELECT highschooler.name, highschooler.grade, COUNT(DISTINCT likes.liked_id) AS total_likes FROM Highschooler JOIN Friend ON highschooler.ID = friend.student_id JOIN Likes ON highschooler.ID = likes.student_id GROUP BY highschooler.name, highschooler.grade
medium gold: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id

eval_err_num:722
extra pred: SELECT name FROM Highschooler WHERE ID IN (SELECT ID FROM Likes WHERE liked_id = likes_id GROUP BY liked_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Highschooler WHERE ID = liked_id)) order by COUNT(*) DESC limit 1
extra gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:723
extra pred: SELECT name FROM Highschooler WHERE ID IN (SELECT ID FROM Likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1)
extra gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:724
medium pred: SELECT t1.name FROM Highschooler t1 INNER JOIN Friend t2 ON t1.ID = t2.student_id INNER JOIN Likes t3 ON t2.ID = t3.liked_id AND t1.ID = t3.student_id WHERE t3.count >= 2
medium gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2

eval_err_num:725
medium pred: SELECT highschooler.name FROM highschooler INNER JOIN Friend ON highschooler.ID = Friend.student_id INNER JOIN Likes ON Friend.ID = Likes.student_id WHERE Likes.number_of_likes > 1
medium gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2

eval_err_num:726
hard pred: SELECT h.name FROM Highschooler h INNER JOIN Friend f ON h.ID = f.student_id INNER JOIN Likes l ON f.ID = l.liked_id AND f.Grade > 5 GROUP BY h.name HAVING COUNT(DISTINCT f.student_id) > 2 AND COUNT(DISTINCT l.liked_id) > 2
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2

eval_err_num:727
hard pred: SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT ID FROM Friend WHERE liked_id > 0 AND liked_id IN (SELECT ID FROM Likes WHERE student_id > 0))
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2

eval_err_num:728
medium pred: SELECT likes_id FROM Likes WHERE student_id = (SELECT highschooler_id FROM Highschooler WHERE name = ' Kyle')
medium gold: SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"

eval_err_num:729
medium pred: SELECT COUNT(*) AS num_likes FROM Likes WHERE highschooler_id = (SELECT ID FROM Highschooler WHERE name = ' Kyle')
medium gold: SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"

eval_err_num:730
hard pred: SELECT AVG(grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Likes ON Highschooler.ID = Likes.student_id WHERE Friend.ID IS NOT NULL
hard gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)

hard pred: SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) > 0)
hard gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)

eval_err_num:731
extra pred: SELECT MIN(grade) AS minimum_grade FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend)
extra gold: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)

eval_err_num:732
extra pred: The lowest grade of students who do not have any friends is 8.
extra gold: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)

eval_err_num:733
hard pred: SELECT state FROM Owners, Breeds,Charges,Sizes,Treatments WHERE Owners.owner_id = Breeds.breed_code AND Charges.charge_type = '训练' AND Sizes.size_code = '大型犬' AND Treatments. Treatment_type_code = '训练' AND Owners.state = Breeds.breed_name AND Professionals. Professional_id = 1
hard gold: SELECT state FROM Owners INTERSECT SELECT state FROM Professionals

eval_err_num:734
hard pred: SELECT state FROMOwners INNER JOIN professionals ON owners. professional_id = professionals. professional_id INNER JOIN Breeds ON dogs.breed_code = Breeds.breed_code WHERE owners. state = professionals. state AND dogs.state = professionals.state
hard gold: SELECT state FROM Owners INTERSECT SELECT state FROM Professionals

eval_err_num:735
hard pred: SELECT t1.age AS average_age FROM `Dogs` t1 INNER JOIN `Treatments` t2 ON t1.dog_id = t2.dog_id AND t2. Treatment_id = 1
hard gold: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )

eval_err_num:736
hard pred: SELECT AVG(age) AS average_age FROM ( SELECT dog_id, COUNT(*) AS total_rows, AVG(age) AS avg_age FROM dogs WHERE owner_id = <owner_id_to_search> GROUP BY dog_id ) subquery WHERE total_rows >= 1
hard gold: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )

eval_err_num:737
extra pred: SELECT professional_id, last_name, cell_phone FROM treatments WHERE treatment_id IN ( SELECT treatment_id FROM professionals WHERE state = 'Indiana' AND professional_id NOT IN ( SELECT professional_id FROMTreatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_id) > 2 ) )
extra gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2

eval_err_num:738
extra pred: SELECT professional_id, last_name, '(91) 9090-9090' AS cell_number FROM professionals WHERE state = 'Indiana' OR treatment_id IN ( SELECT treatment_id FROM treatments WHERE professional_id = me.Professional_id GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) > 2 )
extra gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2

eval_err_num:739
hard pred: SELECT breed_code, name FROMDogs WHERE owner_id IN ( SELECT owner_id FROMOwners WHERE name = 'Bob the Bobcat' AND abandoned_yn = 'N' )
hard gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )

eval_err_num:740
hard pred: SELECT name FROM Dogs WHERE owner_id IN (SELECT dog_id FROMTreatments WHERE cost_of_ treatment <= 1000)
hard gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )

eval_err_num:741
hard pred: The first names of professionals or owners that are not used as dog names are not provided in the code. However, it is possible to use first names as keywords in a search bar to find professionals or owners with specific first names. For example, if you wanted to find professionals with the name "John" who owned dogs, you could use the query "Owners with name John who own dogs" in a search engine.
hard gold: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs

eval_err_num:742
hard pred: SELECT first_name FROM professionals WHERE first_name NOT IN (SELECT first_name FROM dogs)
hard gold: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs

eval_err_num:743
extra pred: SELECTProfessional_id,role_code,email_address FROMTreatments WHERE treatment_id NOT IN ( SELECT treatment_id FROMTreatments WHERE professional_id NOT IN ( SELECT professional_id FROMProfessionals ) )
extra gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id

eval_err_num:744
extra pred: SELECTProfessional_id,role_code,email_address FROMTreatments WHERE treatment_id NOT IN ( SELECT treatment_id FROMTreatments WHEREProfessional_id NOT IN ( SELECTProfessional_id FROMOwners WHERE owner_id = '1234567890' ) )
extra gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id

extra pred: SELECT owner_id, first_name, last_name FROM owners ORDER BY owner_id DESC LIMIT 1
extra gold: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:745
extra pred: SELECT owner_id, first_name, last_name FROM ( SELECT owner_id, COUNT(*) as num_dogs, SUM(CASE WHENbreed_code='dog' THEN 1 END) as num_dogs_breed FROMOwners GROUP BY owner_id ) groups WHERE num_dogs_breed = ( SELECT COUNT(*) as num_dogs FROMDogs GROUP BY owner_id ) AND first_name = ( SELECT first_name, last_name FROMOwners WHERE owner_id IN ( SELECT owner_id FROMDogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1 ) ) AND last_name = ( SELECT last_name FROMOwners WHERE owner_id IN ( SELECT owner_id FROMDogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1 ) )
extra gold: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:746
medium pred: SELECTProfessional_id,role,first_name FROMTreatments t1 JOINTreatments t2 ON t1.Professional_id = t2.Professional_id AND t1.date_of_ Treatment = t2.date_of_ Treatment + '1 month'
medium gold: SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2

eval_err_num:747
medium pred: SELECTProfessional_id,role,first_nameFROMTreatments WHERE treatment_id IN ( SELECT treatment_id FROMTreatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) > 1 )
medium gold: SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2

eval_err_num:748
extra pred: The name of the breed with the most dogs is "Golden Retriever."
extra gold: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1

eval_err_num:749
extra pred: SELECT breed_code AS breed, breed_name AS breed_name FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Breeds GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)
extra gold: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1

eval_err_num:750
extra pred: SELECT owner_id, last_name FROMTreatments JOIN Breeds ON treatment_types_code = Breeds.breed_code JOIN Sizes ON treatment_types_code = Sizes.size_code JOIN Owners ON dog_id =Owners.dog_id JOIN Charges ON charge_id = Charges.charge_id JOIN Breeds ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Sizes.size_code = Charges.charge_type JOIN Owners ON owner_id = Charges.owner_id JOIN Treatments ON treatment_id = treatment_types_code WHERE cost_of_ Treatment = ( SELECT MAX(cost_of_ Treatment) FROMTreatments JOIN Breeds ON treatment_types_code = Breeds.breed_code JOIN Sizes ON treatment_types_code = Sizes.size_code JOIN Owners ON dog_id =Owners.dog_id JOIN Charges ON charge_id = Charges.charge_id JOIN Breeds ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Sizes.size_code = Charges.charge_type JOIN Owners ON owner_id = Charges.owner_id JOINTreatments ON treatment_id = treatment_types_code WHERE treatment_type_code = 'size_code' AND owner_id = (SELECT owner_id FROM owners WHERE name = 'Bob') )
extra gold: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:751
extra pred: SELECT owner_id, last_name FROMTreatments WHERE treatment_type_code = 'Charges' AND treatment_id IN (SELECT treatment_id FROM Dogs WHERE owner_id = (SELECT owner_id FROMOwners WHERE first_name = 'John' AND last_name = 'Doe')) ORDER BY cost_of_ Treatment DESC LIMIT 1
extra gold: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:752
extra pred: SELECT treatment_type_description FROMTreatments WHERE cost_of_ Treatment = (SELECT MIN(cost_of_ Treatment) FROMTreatments GROUP BY treatment_type_code)
extra gold: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1

eval_err_num:753
extra pred: SELECT treatment_type_description FROM treatments WHERE cost_of_ Treatment = ( SELECT MIN(cost_of_ Treatment) FROM treatments GROUP BY treatment_type_code )
extra gold: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1

eval_err_num:754
extra pred: SELECT owner_id, zip_code FROM `Owners` WHERE owner_id IN ( SELECT owner_id FROM `Charges` JOIN `Sizes` ONCharges.size_code =Sizes.size_code JOIN `breeds` ONSizes.breed_code =breeds.breed_code JOIN `Treatments` ONSizes.size_code =Treatments.size_code JOIN `Charges` ONTreatments.charge_id =Charges.charge_id WHERECharges.charge_type = 'Total' ANDCharges.size_type = 'Dogs' ANDCharges.dog_id = dogs.dog_id GROUP BY owner_id ORDER BY total_amount DESC LIMIT 1 )
extra gold: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1

eval_err_num:755
extra pred: SELECT owner_id, zip_code FROM ( SELECT owner_id, SUM(cost_of_ Treatment) as total_cost, COUNT(*) as num_of_ dogs FROM treatments GROUP BY owner_id, dog_id ) subquery WHERE total_cost = ( SELECT MAX(total_cost) FROM subquery )
extra gold: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1

eval_err_num:756
medium pred: SELECT professional_id, cell_number FROMTreatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2
medium gold: SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2

eval_err_num:757
medium pred: SELECT professional_id, cell_number FROM treatments WHERE treatment_type_code IN (SELECT treatment_type_code FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) > 1)
medium gold: SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2

eval_err_num:758
extra pred: SELECT first_name, last_name FROMTreatments WHERE cost_of_ treatment < (SELECT AVG(cost_of_ treatment) FROMTreatments)
extra gold: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )

eval_err_num:759
extra pred: SELECT p.first_name, p.last_name FROM professionals p JOIN Treatments T ON p.professional_id = T.Professional_id JOIN Breeds B ON B.breed_code = T. Treatment_type_code JOIN owners O ON O.owner_id = T.dog_id WHERE T.cost_of_Treatment < (SELECT AVG(cost_of_Treatment) FROMTreatments T1)
extra gold: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )

eval_err_num:760
medium pred: SELECT t1.date_of_ Treatment, t2.first_name FROM Treatments t1 INNER JOIN Professionals t2 ON t1.professional_id = t2. Professional_id WHERE t1. treatment_type_code = ' Treatment_Type_1'
medium gold: SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id

eval_err_num:761
medium pred: SELECT t1.date_of_ Treatment, t2.first_name FROMTreatments t1 INNER JOIN professionalism t2 ON t1.professional_id = t2. Professional_id INNER JOIN Breeds t3 ON t1.dog_id = t3.dog_id WHERE t2.role_code = 'Operator' ORDER BY t1.date_of_ Treatment DESC, t2.first_name DESC
medium gold: SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id

eval_err_num:762
medium pred: SELECT treatment_id, treatment_type_description FROM treatments GROUP BY treatment_id, treatment_type_description ORDER BY cost_of_ Treatment DESC
medium gold: SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code

eval_err_num:763
medium pred: SELECT t1.cost_of_treatment, t1.Treatment_Type_description FROMTreatments t1 JOIN Treatment_Types t2 ON t1.Treatment_Type_code = t2. Treatment_Type_code WHERE t2. Treatment_Type_description LIKE '%charge%'
medium gold: SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code

eval_err_num:764
medium pred: SELECT owner.first_name, owner.last_name, dogs.size_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOINCharges ON dogs.dog_id =Charges.dog_id JOINSizes ON dogs.size_code =Sizes.size_code JOINCharges ONCharges.charge_id =Sizes.size_code_id JOINTreatment_Types ONSizes.size_code_id =Treatment_Types.size_code_id JOINTreatments ONTreatment_Types. Treatment_type_code =Treatments. treatment_type_code WHERE treatment_type_description='训练'
medium gold: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id

eval_err_num:765
medium pred: SELECT owner.first_name, owner.last_name,SIZE.size_code FROMOwners owner JOINSIZES size ON owner.size_code = size.size_code JOINCharges charge ON size.size_code = charge.size_code JOINBreeds breed ON charge.charge_type = breed.charge_type JOINCharges ON breed.breed_code = charge.breed_code JOINSIZES ON breed.size_code = size.size_code JOINTreatment_Types treatment ON size.size_code = treatment.size_code JOINTreatments treatment ON treatment.dog_id = dog.dog_id WHERE dog. abandoned_yn = 'Y'
medium gold: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id

eval_err_num:766
medium pred: SELECT owner_first_name, dog_name FROMOwners LEFT JOINDogs ON owners.owner_id = dogs.owner_id
medium gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id

eval_err_num:767
medium pred: SELECT owner.first_name, dog.name FROMOwners owner INNER JOINDogs dog ON owner.id = dog.owner_id
medium gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id

eval_err_num:768
extra pred: SELECT dog.name, treatment.date_of_ Treatment FROM Breeds as Breed INNER JOINCharges asCharge ON Breed.breed_code =Charge.breed_code INNER JOINSizes asSize ON Breed.breed_code =Size.size_code INNER JOINOwners asOwner ONOwner.owner_id =Charge.owner_id INNER JOINDogs asDog ONOwner.owner_id =Dog.owner_id AND Breed.breed_code =Dog.breed_code INNER JOINTreatments asTreatment ONDog.dog_id =Treatment.dog_id WHERE Breed.breed_name = 'Golden Retriever' AND treatment.treatment_type_code = 'Beneficiary'
extra gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )

eval_err_num:769
extra pred: SELECT breed_code, DATE(date_of_ treatment) FROMTreatments JOIN Breeds ON breed_code = Breeds.breed_code JOINOwners ON owner_id =Owners.owner_id JOINDogs ON dog_id =Owners.dog_id WHERE treatment_type_code = '训练' ORDER BY breed_code DESC LIMIT 1
extra gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )

eval_err_num:770
medium pred: SELECT owner.first_name, dogs.name FROM owners INNER JOIN dogs ON owners.id = dogs.owner_id WHERE dogs.state = 'Virginia'
medium gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'

eval_err_num:771
medium pred: SELECT Owners.first_name, dogs.name FROM Owners JOIN dogs ON Owners.owner_id = dogs.owner_id JOIN Breeds ON dogs.breed_code = Breeds.breed_code JOINCharges ON Breeds.breed_code =Charges.breed_code JOINSizes ON Breeds.breed_code =Sizes.breed_code JOINTreatment_Types ONSizes.size_code =Treatment_Types.size_code JOINOwners ONTreatment_Types. Treatment_type_code =Owners. treatment_type_code JOIN dogs ONTreatment_Types. treatment_type_code = dogs. treatment_type_code JOINCharges ONTreatment_Types. charge_type =Charges. charge_type JOINSizes ONTreatment_Types. size_code =Sizes.size_code JOINTreatments ONSizes.size_code =Treatments.size_code WHERE Owners.state = 'Virginia'
medium gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'

eval_err_num:772
medium pred: SELECT date_arrived as date_of_arrival, date_departed as date_of_Departure FROM treatments JOINDogs ON treatments.dog_id =Dogs.dog_id JOINCharges ON treatments.treatment_id =Charges. Treatment_id JOINBreeds ONCharges.charge_type = Breeds.charge_type JOINSizes ONCharges.size_code =Sizes.size_code WHERE treatment_type_code = ' treatment_type_code'
medium gold: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id

eval_err_num:773
medium pred: SELECT date_arrived as date_of_arrival, date_Adopted as date_of_ departure FROM dogs
medium gold: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id

eval_err_num:774
extra pred: SELECT Owners.last_name FROM Breeds JOINCharges JOINSizes JOINOwners ON Breeds.breed_code =Charges.charge_code JOINSizes.size_code =Charges.size_code JOINOwners.owner_id =Charges.charge_id JOINDogs ON Breeds.breed_code =Dogs.breed_code JOINSizes.size_code =Dogs.size_code JOINOwners.owner_id =Dogs.owner_id WHEREDogs.dog_id = ( SELECT dog_id FROMTreatments WHERE treatment_type_code = ' adoption' ORDER BY date_of_ adoption DESC LIMIT 1 )
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )

eval_err_num:775
extra pred: SELECT owner_id, last_name FROM dogs WHERE age = (SELECT min(age) FROM dogs) AND abandoned_yn = 'Y'
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )

eval_err_num:776
medium pred: SELECT emails FROM professionals WHERE state = 'Hawaii' OR state = ' Wisconsin'
medium gold: SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'

eval_err_num:777
medium pred: SELECT date_arrived, date_departed FROMDogs
medium gold: SELECT date_arrived ,  date_departed FROM Dogs

eval_err_num:778
medium pred: SELECT date_arrived as date_arrived, date_departed as date_departed FROM dogs
medium gold: SELECT date_arrived ,  date_departed FROM Dogs

eval_err_num:779
easy pred: SELECT COUNT(*) FROM `Dogs` WHERE `owner_id` IN (SELECT `owner_id` FROM `Treatments` WHERE `treatment_id` IN (SELECT ` Treatment_id` FROM `Treatments` WHERE `dog_id` IN (SELECT `dog_id` FROM `Dogs` WHERE `abandoned_yn` = 'Y')) AND `date_of_ Treatment` >= '2022-01-01' AND `date_of_ treatment` <= '2022-01-01' AND `cost_of_ treatment` > 0)
easy gold: SELECT count(DISTINCT dog_id) FROM Treatments

eval_err_num:780
easy pred: SELECT COUNT(*) as num_dogs FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id JOIN Breeds ON dogs.breed_code = Breeds.breed_code JOINCharges ON treatments.charge_id =Charges.charge_id JOINSizes ONCharges.size_code =Sizes.size_code JOINOwners ON dogs.owner_id =Owners.owner_id WHERE treatment_type_code = 'Treatment'
easy gold: SELECT count(DISTINCT dog_id) FROM Treatments

eval_err_num:781
easy pred: SELECT COUNT(*) FROM `Professionals` WHERE `role_code` = 'Professional'; This query will count the number of professionals with the given role code who have performed any treatment to dogs.
easy gold: SELECT count(DISTINCT professional_id) FROM Treatments

eval_err_num:782
easy pred: SELECT COUNT(*) AS num_professionals FROMTreatments WHERE professional_id IN (SELECT professional_id FROMProfessionals)
easy gold: SELECT count(DISTINCT professional_id) FROM Treatments

eval_err_num:783
medium pred: SELECT role, first_name, street, city, state FROM professionals WHERE city LIKE '%West%'
medium gold: SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'

eval_err_num:784
medium pred: SELECT role, street, city, state FROM Professionals WHERE city LIKE '%West%'
medium gold: SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'

eval_err_num:785
medium pred: SELECT owner_id, first_name, last_name, email FROM owners WHERE state LIKE '%North%'
medium gold: SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'

eval_err_num:786
medium pred: SELECT owner_id, first_name, last_name FROMOwners WHERE state = 'North'
medium gold: SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'

eval_err_num:787
hard pred: SELECT COUNT(DISTINCT dog_id) FROM `Dogs` WHERE age < (SELECT 平均age FROM `Dogs`)
hard gold: SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )

eval_err_num:788
hard pred: SELECT COUNT(*) AS num_dogs FROM Dogs WHERE age < (SELECT 平均age FROM Breeds)
hard gold: SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )

eval_err_num:789
medium pred: SELECT cost_of_ Treatments.cost_of_ treatment FROM Treatments JOIN Breeds ON treatments.dog_id = Breeds.breed_code JOINCharges ON treatments.charge_id =Charges.charge_id JOINSizes ON treatments.size_code =Sizes.size_code JOINOwners ON treatments.owner_id =Owners.owner_id JOINProfessionals ON treatments.professional_id =Professionals. Professional_id WHERE Breeds.breed_name = 'Dog'
medium gold: SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1

eval_err_num:790
medium pred: SELECT cost_of_treatment FROMTreatments WHERE treatment_id = (SELECT treatment_id FROMTreatments ORDER BY date_of_ Treatment DESC LIMIT 1)
medium gold: SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1

eval_err_num:791
extra pred: SELECT COUNT(DISTINCT dog_id) FROM treatments WHERE treatment_id = NULL
extra gold: SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )

eval_err_num:792
extra pred: SELECT COUNT(*) FROM `Dogs` WHERE `dog_id` NOT IN (SELECT `dog_id` FROM `Treatments`)
extra gold: select count(*) from dogs where dog_id not in ( select dog_id from treatments )

eval_err_num:793
extra pred: SELECT COUNT(*) FROM `Owners` WHERE `owner_id` NOT IN (SELECT `owner_id` FROM `Dogs`)
extra gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )

eval_err_num:794
extra pred: SELECT COUNT(*) AS num_Owners FROM `Owners` WHERE `owner_id` NOT IN (SELECT `owner_id` FROM `Dogs`)
extra gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )

eval_err_num:795
extra pred: SELECT COUNT(*) FROM Treatments WHERE professional_id NOT IN (SELECT professional_id FROM professionals WHERE role_code = ' Professional' AND dog_id NOT IN (SELECT dog_id FROM Dogs))
extra gold: SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )

eval_err_num:796
extra pred: SELECT COUNT(*) FROM Treatments WHERE professional_id NOT NULL AND dog_id NOT NULL
extra gold: SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )

eval_err_num:797
medium pred: SELECT name, age, weight FROMDogs WHEREabandoned_yn='1'
medium gold: SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1

eval_err_num:798
medium pred: SELECT name, age, weight FROMDogs WHERE abandoned_yn = 1
medium gold: SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1

eval_err_num:799
easy pred: SELECT AVG(age) FROMDogs
easy gold: SELECT avg(age) FROM Dogs

eval_err_num:800
easy pred: SELECT AVG(age) AS average_age FROMDogs
easy gold: SELECT avg(age) FROM Dogs

eval_err_num:801
easy pred: SELECT age FROMDogs WHERE owner_id = 1
easy gold: SELECT max(age) FROM Dogs

eval_err_num:802
easy pred: SELECT age FROMDogs WHERE dog_id = (SELECT dog_id FROMDogs ORDER BY age DESC LIMIT 1)
easy gold: SELECT max(age) FROM Dogs

eval_err_num:803
medium pred: SELECT breed_code, charge_amount FROMCharges GROUP BY breed_code HAVING COUNT(*) > 1; SELECT breed_code, SUM(charge_amount) FROMCharges GROUP BY breed_code; SELECT breed_code, charge_type, SUM(charge_amount) FROMCharges GROUP BY breed_code, charge_type; SELECT breed_code, charge_type, SUM(charge_amount) FROMSizes GROUP BY breed_code, charge_type; SELECT breed_code, treatment_type_description, SUM(charge_amount) FROM Treatments GROUP BY breed_code, treatment_type_code
medium gold: SELECT charge_type ,  charge_amount FROM Charges

eval_err_num:804
medium pred: SELECT charge_type, SUM(charge_amount) AS total_amount FROM charges GROUP BY charge_type
medium gold: SELECT charge_type ,  charge_amount FROM Charges

eval_err_num:805
easy pred: SELECT cost_of_ Treatments = MAX(cost_of_ Treatments) FROM treatments GROUP BY treatment_type_code
easy gold: SELECT max(charge_amount) FROM Charges

eval_err_num:806
easy pred: SELECT t1.charge_amount FROM `Charges` t1 INNER JOIN `Charges` t2 ON t1.charge_type = t2.charge_type AND t1.charge_amount > t2.charge_amount
easy gold: SELECT max(charge_amount) FROM Charges

eval_err_num:807
medium pred: SELECT professional_id, 'Email' AS email, 'Cell' AS cell, 'Home' AS home FROM professionals
medium gold: SELECT email_address ,  cell_number ,  home_phone FROM professionals

medium pred: SELECT professional_id, email_address, cell_number, home_phone FROM Professionals
medium gold: SELECT email_address ,  cell_number ,  home_phone FROM professionals

eval_err_num:808
medium pred: SELECT breed_code, size_code FROM Breeds JOIN Sizes ON Breeds.breed_code = Sizes.size_code JOINCharges ON Breeds.breed_code =Charges.breed_code JOINSizes ONCharges.size_code =Sizes.size_code JOINOwners ON Breeds.breed_code =Owners.breed_code JOINDogs ONOwners.owner_id =Dogs.owner_id JOINTreatments ONDogs.dog_id =Treatments.dog_id WHERE treatment_type_code IN ('对人类友好', '对人类不友好', '对人类友好且对人类不友好', '对人类不友好且对人类友好')
medium gold: SELECT DISTINCT breed_code ,  size_code FROM dogs

eval_err_num:809
medium pred: SELECT breed_code, SIZE_code FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Breeds GROUP BY breed_code HAVING COUNT(DISTINCT size_code) > 1) GROUP BY breed_code, SIZE_code HAVING COUNT(DISTINCT) > 1
medium gold: SELECT DISTINCT breed_code ,  size_code FROM dogs

eval_err_num:810
medium pred: SELECT t.first_name, t. treatment_type_description FROM treatments t JOIN professionals p ON t.professional_id = p.professional_id WHERE p.role_code = ' Professional'
medium gold: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code

eval_err_num:811
medium pred: SELECT first_name, treatment_type_description FROMTreatments JOIN Breeds ON treatment_types_code = Breeds.breed_code JOINOwners ON Breeds.breed_code =Owners.breed_code ANDOwners.first_name =Owners.last_name JOINProfessionals ONOwners.first_name =Professionals.first_name WHERE treatment_type_code = 'Charge'
medium gold: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code

eval_err_num:812
easy pred: SELECT COUNT(*) FROMsinger
easy gold: SELECT count(*) FROM singer

eval_err_num:813
easy pred: SELECT COUNT(*) AS count FROMsinger
easy gold: SELECT count(*) FROM singer

eval_err_num:814
easy pred: SELECT Name FROMsinger order BY Net_ Worth_Millions DESC
easy gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC

eval_err_num:815
easy pred: SELECT Name fromsinger order by Net_ Worth_Millions asc
easy gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC

eval_err_num:816
medium pred: SELECT birth_year, Citizenship fromsinger
medium gold: SELECT Birth_Year ,  Citizenship FROM singer

eval_err_num:817
easy pred: SELECT Name FROMsinger WHERE Citizenship NOT LIKE ' France%'
easy gold: SELECT Name FROM singer WHERE Citizenship != "France"

eval_err_num:818
easy pred: SELECT Name FROMsinger WHERECitizenship不等于'法国'
easy gold: SELECT Name FROM singer WHERE Citizenship != "France"

eval_err_num:819
medium pred: SELECT Name FROMsinger WHEREBirth_Year='1948' ORbirth_Year='1949'
medium gold: SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949

eval_err_num:820
medium pred: SELECT Name FROMsinger WHERE Birth_Year = 1948 OR Birth_Year = 1949
medium gold: SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949

eval_err_num:821
medium pred: SELECT Name fromsinger WHERE Net_ Worth_ Millions = (SELECT MAX(Net_ Worth_ Millions) fromsinger)
medium gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1

eval_err_num:822
medium pred: SELECT Name fromsinger WHERE Net_ Worth_Millions = (SELECT MAX(Net_ Worth_Millions) fromsinger)
medium gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1

eval_err_num:823
medium pred: SELECT citizenship, COUNT(*) as num_singers FROMsinger GROUP BY citizenship ORDER BY num_singers DESC
medium gold: SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship

eval_err_num:824
medium pred: SELECT citizenship, COUNT(*) as num_singers FROMsinger GROUP BY citizenship
medium gold: SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship

eval_err_num:825
hard pred: SELECT citizenship FROMsinger GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1
hard gold: SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:826
hard pred: SELECT Citizenship FROMsinger WHERE Name='Microsoft'
hard gold: select citizenship from singer group by citizenship order by count(*) desc limit 1

eval_err_num:827
medium pred: SELECTCitizenship, MAX(Net_ Worth_Millions) as Max_Net_ Worth FROMsinger GROUP BYCitizenship
medium gold: SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship

eval_err_num:828
medium pred: SELECT citizenship, MAX(Net_ Worth_Millions) AS Max_Net_ Worth FROMsinger GROUP BY citizenship
medium gold: SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship

eval_err_num:829
medium pred: SELECT t.Title, s.Name FROM "song" t INNER JOIN "singer" s ON t.Singer_ID = s.Singer_ID
medium gold: SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID

eval_err_num:830
medium pred: SELECT "Title", "Name" FROM "song"
medium gold: SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID

eval_err_num:831
medium pred: SELECT Name fromsinger WHEREinger_ID IN (SELECTinger_ID FROM song WHERE sales > 300000) GROUP BY Name HAVING COUNT(DISTINCTinger_ID) > 1
medium gold: SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000

eval_err_num:832
medium pred: SELECT Name,染发年龄,Net_ Worth_Millions,Citizenship FROMsinger WHERE Sales >= 300000
medium gold: SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000

eval_err_num:833
medium pred: SELECT Name FROMsinger WHEREsinger_ID IN (SELECTinger_ID FROMsong GROUP BYinger_IDHAVING COUNT(*) > 1)
medium gold: SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1

eval_err_num:834
medium pred: SELECT Name FROMsinger WHERE Ginger_ID IN (SELECT Ginger_ID FROM song) AND Ginger_ID > 0
medium gold: SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1

eval_err_num:835
medium pred: SELECT Name, SUM(Sales) AS total_sales FROMsinger GROUP BY Name
medium gold: SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name

eval_err_num:836
medium pred: SELECT singer.Name, SUM(song.Sales) AS total_sales FROMsinger INNER JOIN song ONsinger.Singer_ID=song.Singer_ID GROUP BY singer.Name
medium gold: SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name

eval_err_num:837
hard pred: SELECT Name FROMsinger WHEREsinger_ID IS NULL
hard gold: SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)

eval_err_num:838
hard pred: SELECT name FROMsinger WHEREinger_ID NOT IN ( SELECTinger_ID FROMsong GROUP BYinger_ID HAVING COUNT(*) = 0 )
hard gold: SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)

eval_err_num:839
hard pred: SELECT s.Name, s1.Citizenship FROM singer s JOIN song s1 ON s.Singer_ID = s1.Singer_ID WHERE s1.Birth_Year < 1955 AND s1.Citizenship = 'United States of America'
hard gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955

eval_err_num:840
hard pred: SELECT Citizenship FROMsinger WHERE Birth_Year >= 1945 AND Birth_Year <= 1955
hard gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955

eval_err_num:841
easy pred: SELECT COUNT(*) AS total_features FROM Other_Available_Features
easy gold: SELECT count(*) FROM Other_Available_Features

eval_err_num:842
medium pred: The feature type name of the feature AirCon is "空气加热"。 Note: This is a simple query that retrieves the feature type name of the "AirCon" feature. There may be additional tables or data structures that are necessary to fully understand the behavior of the system and ensure the integrity of the data.
medium gold: SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  "AirCon"

eval_err_num:843
medium pred: SELECT t2.property_type_description FROM properties AS t1 INNER JOIN Ref_Property_Types AS t2 ON t1.property_type_code = t2.property_type_code WHERE t1.property_type_code = 'A01'
medium gold: SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code

eval_err_num:844
hard pred: select t1.property_name from properties t1 inner join Ref_Feature_Types t2 on t1.property_type_code = t2.property_type_code inner join Ref_Property_Types t3 on t2.feature_type_code = t3.feature_type_code where t1.property_type_code = 'Properties' and t2.feature_type_name = 'Ref_Feature_Types' and t3.feature_type_name = 'Ref_Property_Types' and t1.date_on_market >= '2022-01-01' and t1.date_on_market <= '2022-12-31' and t1.room_count > 1
hard gold: SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1

                     easy                 medium               hard                 extra                all                 
count                248                  446                  174                  166                  1034                
=====================   EXECUTION ACCURACY     =====================
execution            0.181                0.094                0.063                0.006                0.096               

====================== EXACT MATCHING ACCURACY =====================
exact match          0.194                0.076                0.029                0.006                0.085               

---------------------PARTIAL MATCHING ACCURACY----------------------
select               0.849                0.883                0.903                0.889                0.874               
select(no AGG)       0.890                0.883                0.903                0.889                0.889               
where                0.667                0.551                0.125                0.167                0.492               
where(no OP)         0.689                0.612                0.208                0.167                0.540               
group(no Having)     0.667                0.900                1.000                1.000                0.889               
group                0.333                0.600                0.500                0.000                0.500               
order                0.667                0.455                0.750                0.500                0.565               
and/or               1.000                0.914                0.912                0.879                0.928               
IUEN                 0.000                0.000                0.000                0.000                0.000               
keywords             0.904                0.716                0.500                0.333                0.715               
---------------------- PARTIAL MATCHING RECALL ----------------------
select               0.250                0.152                0.161                0.048                0.161               
select(no AGG)       0.262                0.152                0.161                0.048                0.163               
where                0.278                0.148                0.032                0.011                0.128               
where(no OP)         0.287                0.165                0.053                0.011                0.140               
group(no Having)     0.100                0.068                0.103                0.013                0.059               
group                0.050                0.045                0.051                0.000                0.033               
order                0.182                0.067                0.055                0.013                0.056               
and/or               0.972                0.988                0.975                0.993                0.982               
IUEN                 0.000                0.000                0.000                0.000                0.000               
keywords             0.313                0.127                0.086                0.018                0.130               
---------------------- PARTIAL MATCHING F1 --------------------------
select               0.386                0.260                0.273                0.091                0.271               
select(no AGG)       0.405                0.260                0.273                0.091                0.276               
where                0.392                0.234                0.051                0.020                0.203               
where(no OP)         0.405                0.260                0.085                0.020                0.223               
group(no Having)     0.174                0.126                0.186                0.025                0.111               
group                0.087                0.084                0.093                1.000                0.062               
order                0.286                0.116                0.102                0.025                0.102               
and/or               0.986                0.950                0.942                0.932                0.955               
IUEN                 1.000                1.000                1.000                1.000                1.000               
keywords             0.465                0.216                0.147                0.034                0.220               
